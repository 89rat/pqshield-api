import React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Brain, Zap, Shield, Settings, Play, Pause, BarChart3,\n  Battery, Thermometer, MemoryStick, Wifi, Clock,\n  CheckCircle, AlertTriangle, Info, Lock, Users,\n  TrendingUp, Activity, Cpu, HardDrive\n} from 'lucide-react';\nimport { OnDeviceTrainingSystem, TrainingMode, TrainingPriority } from '../training/OnDeviceTrainingSystem';\n\n/**\n * Training Control Panel - User Interface for On-Device Learning\n * \n * Provides comprehensive controls for managing AI training on the device\n * with privacy-first design and resource awareness.\n */\nconst TrainingControlPanel = ({ sentinelEngine, userProfile }) => {\n  const [trainingSystem, setTrainingSystem] = useState(null);\n  const [trainingState, setTrainingState] = useState({\n    isTraining: false,\n    progress: 0,\n    currentPhase: null,\n    metrics: null\n  });\n  const [resourceStatus, setResourceStatus] = useState({\n    battery: 100,\n    temperature: 25,\n    memory: 1000,\n    isCharging: false\n  });\n  const [userPreferences, setUserPreferences] = useState({\n    autoTrainingEnabled: true,\n    trainingMode: TrainingMode.BALANCED,\n    federatedLearningEnabled: true,\n    trainingWindows: [\n      { startTime: '02:00', endTime: '05:00', condition: 'charging' },\n      { startTime: '12:00', endTime: '13:00', condition: 'idle_and_charging' },\n      { startTime: '22:00', endTime: '23:00', condition: 'wifi_connected' }\n    ]\n  });\n  const [activeTab, setActiveTab] = useState('overview');\n  const [trainingHistory, setTrainingHistory] = useState([]);\n  \n  // Initialize training system\n  useEffect(() => {\n    const initializeTraining = async () => {\n      try {\n        const system = new OnDeviceTrainingSystem(sentinelEngine);\n        setTrainingSystem(system);\n        \n        // Start monitoring\n        startRealTimeMonitoring(system);\n        \n      } catch (error) {\n        console.error('Failed to initialize training system:', error);\n      }\n    };\n    \n    if (sentinelEngine) {\n      initializeTraining();\n    }\n    \n    return () => {\n      if (trainingSystem) {\n        // Cleanup\n      }\n    };\n  }, [sentinelEngine]);\n  \n  const startRealTimeMonitoring = useCallback((system) => {\n    // Update training state every 2 seconds\n    const stateInterval = setInterval(() => {\n      const metrics = system.getTrainingMetrics();\n      setTrainingState({\n        isTraining: metrics.isTraining,\n        progress: metrics.progress || 0,\n        currentPhase: metrics.currentPhase,\n        metrics\n      });\n    }, 2000);\n    \n    // Update resource status every 5 seconds\n    const resourceInterval = setInterval(() => {\n      if (system.resourceMonitor) {\n        setResourceStatus({\n          battery: system.resourceMonitor.batteryLevel,\n          temperature: system.resourceMonitor.temperature,\n          memory: system.resourceMonitor.availableMemoryMB,\n          isCharging: system.resourceMonitor.isCharging\n        });\n      }\n    }, 5000);\n    \n    return () => {\n      clearInterval(stateInterval);\n      clearInterval(resourceInterval);\n    };\n  }, []);\n  \n  const handleStartTraining = async () => {\n    if (!trainingSystem) return;\n    \n    try {\n      const result = await trainingSystem.trainIncrementally();\n      \n      if (result.success) {\n        setTrainingHistory(prev => [{\n          id: Date.now(),\n          timestamp: new Date(),\n          duration: result.duration,\n          metrics: result.metrics,\n          success: true\n        }, ...prev.slice(0, 9)]);\n      }\n    } catch (error) {\n      console.error('Training failed:', error);\n    }\n  };\n  \n  const handleUpdatePreferences = (key, value) => {\n    setUserPreferences(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    \n    // Apply to training system\n    if (trainingSystem) {\n      trainingSystem.updatePreferences({ [key]: value });\n    }\n  };\n  \n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: BarChart3 },\n    { id: 'training', label: 'Training', icon: Brain },\n    { id: 'resources', label: 'Resources', icon: Cpu },\n    { id: 'privacy', label: 'Privacy', icon: Lock },\n    { id: 'settings', label: 'Settings', icon: Settings }\n  ];\n  \n  if (!trainingSystem) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-purple-50\">\n        <motion.div\n          animate={{ rotate: 360 }}\n          transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n          className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full\"\n        />\n        <span className=\"ml-4 text-xl font-semibold text-gray-700\">\n          Initializing Training System...\n        </span>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg flex items-center justify-center\">\n                <Brain className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">AI Training Center</h1>\n                <p className=\"text-sm text-gray-600\">On-Device Learning & Privacy Control</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Training Status Indicator */}\n              <div className={`flex items-center space-x-2 px-3 py-1 rounded-full ${\n                trainingState.isTraining \n                  ? 'bg-green-100 text-green-800' \n                  : 'bg-gray-100 text-gray-600'\n              }`}>\n                <div className={`w-2 h-2 rounded-full ${\n                  trainingState.isTraining ? 'bg-green-500' : 'bg-gray-400'\n                }`} />\n                <span className=\"text-sm font-medium\">\n                  {trainingState.isTraining ? 'Training' : 'Idle'}\n                </span>\n              </div>\n              \n              {/* Manual Training Button */}\n              <button\n                onClick={handleStartTraining}\n                disabled={trainingState.isTraining}\n                className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg transition-colors\"\n              >\n                {trainingState.isTraining ? (\n                  <>\n                    <Pause className=\"w-4 h-4\" />\n                    <span>Training...</span>\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-4 h-4\" />\n                    <span>Train Now</span>\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n          \n          {/* Tab Navigation */}\n          <div className=\"flex space-x-1 mt-4\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${\n                  activeTab === tab.id\n                    ? 'bg-blue-600 text-white'\n                    : 'text-gray-600 hover:bg-gray-100'\n                }`}\n              >\n                <tab.icon className=\"w-4 h-4\" />\n                <span className=\"font-medium\">{tab.label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <AnimatePresence mode=\"wait\">\n          {activeTab === 'overview' && (\n            <OverviewTab \n              key=\"overview\"\n              trainingState={trainingState}\n              resourceStatus={resourceStatus}\n              trainingHistory={trainingHistory}\n            />\n          )}\n          \n          {activeTab === 'training' && (\n            <TrainingTab \n              key=\"training\"\n              trainingSystem={trainingSystem}\n              trainingState={trainingState}\n              userPreferences={userPreferences}\n              onUpdatePreferences={handleUpdatePreferences}\n            />\n          )}\n          \n          {activeTab === 'resources' && (\n            <ResourcesTab \n              key=\"resources\"\n              resourceStatus={resourceStatus}\n              trainingSystem={trainingSystem}\n            />\n          )}\n          \n          {activeTab === 'privacy' && (\n            <PrivacyTab \n              key=\"privacy\"\n              userPreferences={userPreferences}\n              onUpdatePreferences={handleUpdatePreferences}\n            />\n          )}\n          \n          {activeTab === 'settings' && (\n            <SettingsTab \n              key=\"settings\"\n              userPreferences={userPreferences}\n              onUpdatePreferences={handleUpdatePreferences}\n              userProfile={userProfile}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Overview Tab - Training Status and Key Metrics\n */\nconst OverviewTab = ({ trainingState, resourceStatus, trainingHistory }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    className=\"space-y-6\"\n  >\n    {/* Training Status Card */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Training Status</h2>\n        {trainingState.isTraining && (\n          <div className=\"flex items-center space-x-2 text-green-600\">\n            <Activity className=\"w-5 h-5\" />\n            <span className=\"font-medium\">Active</span>\n          </div>\n        )}\n      </div>\n      \n      {trainingState.isTraining ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-gray-600\">Current Phase:</span>\n            <span className=\"font-medium\">{trainingState.currentPhase || 'Initializing'}</span>\n          </div>\n          \n          <div className=\"w-full bg-gray-200 rounded-full h-3\">\n            <motion.div \n              className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full\"\n              initial={{ width: 0 }}\n              animate={{ width: `${trainingState.progress}%` }}\n              transition={{ duration: 0.5 }}\n            />\n          </div>\n          \n          <div className=\"text-center text-sm text-gray-600\">\n            {trainingState.progress.toFixed(1)}% Complete\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <Brain className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-600 mb-2\">No training in progress</p>\n          <p className=\"text-sm text-gray-500\">\n            {trainingState.metrics?.lastTrainingTime \n              ? `Last trained: ${new Date(trainingState.metrics.lastTrainingTime).toLocaleString()}`\n              : 'No training performed yet'\n            }\n          </p>\n        </div>\n      )}\n    </div>\n    \n    {/* Key Metrics Grid */}\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n      <MetricCard\n        title=\"Queue Size\"\n        value={trainingState.metrics?.queueSize || 0}\n        icon={<HardDrive className=\"w-6 h-6\" />}\n        color=\"text-blue-600\"\n        bgColor=\"bg-blue-50\"\n      />\n      \n      <MetricCard\n        title=\"Total Sessions\"\n        value={trainingState.metrics?.totalSessions || 0}\n        icon={<BarChart3 className=\"w-6 h-6\" />}\n        color=\"text-green-600\"\n        bgColor=\"bg-green-50\"\n      />\n      \n      <MetricCard\n        title=\"Accuracy\"\n        value={`${(trainingState.metrics?.averageAccuracy || 0).toFixed(1)}%`}\n        icon={<TrendingUp className=\"w-6 h-6\" />}\n        color=\"text-purple-600\"\n        bgColor=\"bg-purple-50\"\n      />\n      \n      <MetricCard\n        title=\"Battery Level\"\n        value={`${resourceStatus.battery.toFixed(0)}%`}\n        icon={<Battery className=\"w-6 h-6\" />}\n        color={resourceStatus.battery > 50 ? \"text-green-600\" : \"text-red-600\"}\n        bgColor={resourceStatus.battery > 50 ? \"bg-green-50\" : \"bg-red-50\"}\n      />\n    </div>\n    \n    {/* Training History */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Recent Training Sessions</h2>\n      \n      {trainingHistory.length > 0 ? (\n        <div className=\"space-y-3\">\n          {trainingHistory.slice(0, 5).map((session) => (\n            <div key={session.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-4\">\n                <div className={`w-3 h-3 rounded-full ${\n                  session.success ? 'bg-green-500' : 'bg-red-500'\n                }`} />\n                <div>\n                  <div className=\"font-medium\">\n                    {session.timestamp.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    Duration: {(session.duration / 1000).toFixed(1)}s\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"font-medium\">\n                  {session.success ? 'Success' : 'Failed'}\n                </div>\n                {session.metrics && (\n                  <div className=\"text-sm text-gray-500\">\n                    Accuracy: {(session.metrics.accuracy || 0).toFixed(1)}%\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500\">\n          <Clock className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n          <p>No training sessions yet</p>\n        </div>\n      )}\n    </div>\n  </motion.div>\n);\n\n/**\n * Training Tab - Training Configuration and Controls\n */\nconst TrainingTab = ({ trainingSystem, trainingState, userPreferences, onUpdatePreferences }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    className=\"space-y-6\"\n  >\n    {/* Training Mode Selection */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Training Mode</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {Object.values(TrainingMode).map((mode) => (\n          <button\n            key={mode}\n            onClick={() => onUpdatePreferences('trainingMode', mode)}\n            className={`p-4 rounded-lg border-2 transition-colors ${\n              userPreferences.trainingMode === mode\n                ? 'border-blue-500 bg-blue-50'\n                : 'border-gray-200 hover:border-gray-300'\n            }`}\n          >\n            <div className=\"text-center\">\n              <div className={`w-12 h-12 mx-auto mb-2 rounded-full flex items-center justify-center ${\n                mode === TrainingMode.LIGHT ? 'bg-green-100' :\n                mode === TrainingMode.BALANCED ? 'bg-yellow-100' : 'bg-red-100'\n              }`}>\n                <Zap className={`w-6 h-6 ${\n                  mode === TrainingMode.LIGHT ? 'text-green-600' :\n                  mode === TrainingMode.BALANCED ? 'text-yellow-600' : 'text-red-600'\n                }`} />\n              </div>\n              <div className=\"font-medium capitalize\">{mode}</div>\n              <div className=\"text-sm text-gray-500 mt-1\">\n                {mode === TrainingMode.LIGHT && 'Low resource usage'}\n                {mode === TrainingMode.BALANCED && 'Optimal performance'}\n                {mode === TrainingMode.INTENSIVE && 'Maximum learning'}\n              </div>\n            </div>\n          </button>\n        ))}\n      </div>\n    </div>\n    \n    {/* Auto-Training Settings */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Automatic Training</h2>\n        <label className=\"relative inline-flex items-center cursor-pointer\">\n          <input\n            type=\"checkbox\"\n            checked={userPreferences.autoTrainingEnabled}\n            onChange={(e) => onUpdatePreferences('autoTrainingEnabled', e.target.checked)}\n            className=\"sr-only peer\"\n          />\n          <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n        </label>\n      </div>\n      \n      {userPreferences.autoTrainingEnabled && (\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Training will automatically occur during optimal windows when device conditions are suitable.\n          </p>\n          \n          <div className=\"space-y-3\">\n            <h3 className=\"font-medium text-gray-900\">Training Windows</h3>\n            {userPreferences.trainingWindows.map((window, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div>\n                  <span className=\"font-medium\">{window.startTime} - {window.endTime}</span>\n                  <span className=\"ml-2 text-sm text-gray-500 capitalize\">\n                    ({window.condition.replace('_', ' ')})\n                  </span>\n                </div>\n                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n    \n    {/* Training Queue Status */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Training Queue</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {trainingState.metrics?.queueSize || 0}\n          </div>\n          <div className=\"text-sm text-gray-600\">Samples Ready</div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {trainingState.metrics?.totalSamples || 0}\n          </div>\n          <div className=\"text-sm text-gray-600\">Total Processed</div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-purple-600\">\n            {(trainingState.metrics?.hoursSinceLastTraining || 0).toFixed(1)}h\n          </div>\n          <div className=\"text-sm text-gray-600\">Since Last Training</div>\n        </div>\n      </div>\n    </div>\n  </motion.div>\n);\n\n/**\n * Resources Tab - System Resource Monitoring\n */\nconst ResourcesTab = ({ resourceStatus, trainingSystem }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    className=\"space-y-6\"\n  >\n    {/* Resource Status Grid */}\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <ResourceCard\n        title=\"Battery\"\n        value={`${resourceStatus.battery.toFixed(0)}%`}\n        icon={<Battery className=\"w-8 h-8\" />}\n        status={resourceStatus.battery > 50 ? 'good' : resourceStatus.battery > 20 ? 'warning' : 'critical'}\n        details={resourceStatus.isCharging ? 'Charging' : 'On battery'}\n      />\n      \n      <ResourceCard\n        title=\"Temperature\"\n        value={`${resourceStatus.temperature.toFixed(0)}°C`}\n        icon={<Thermometer className=\"w-8 h-8\" />}\n        status={resourceStatus.temperature < 35 ? 'good' : resourceStatus.temperature < 40 ? 'warning' : 'critical'}\n        details={resourceStatus.temperature < 35 ? 'Cool' : 'Warm'}\n      />\n      \n      <ResourceCard\n        title=\"Memory\"\n        value={`${resourceStatus.memory.toFixed(0)}MB`}\n        icon={<MemoryStick className=\"w-8 h-8\" />}\n        status={resourceStatus.memory > 500 ? 'good' : resourceStatus.memory > 200 ? 'warning' : 'critical'}\n        details=\"Available\"\n      />\n      \n      <ResourceCard\n        title=\"Network\"\n        value=\"WiFi\"\n        icon={<Wifi className=\"w-8 h-8\" />}\n        status=\"good\"\n        details=\"Connected\"\n      />\n    </div>\n    \n    {/* Training Readiness */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Training Readiness</h2>\n      \n      <TrainingReadinessCheck resourceStatus={resourceStatus} />\n    </div>\n    \n    {/* Resource History Chart */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Resource Usage History</h2>\n      \n      <div className=\"h-64 flex items-center justify-center text-gray-500\">\n        <div className=\"text-center\">\n          <BarChart3 className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n          <p>Resource usage chart would be displayed here</p>\n        </div>\n      </div>\n    </div>\n  </motion.div>\n);\n\n/**\n * Privacy Tab - Privacy Controls and Federated Learning\n */\nconst PrivacyTab = ({ userPreferences, onUpdatePreferences }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    className=\"space-y-6\"\n  >\n    {/* Privacy Overview */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <Lock className=\"w-6 h-6 text-green-600\" />\n        <h2 className=\"text-xl font-semibold text-gray-900\">Privacy Protection</h2>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n          <div className=\"font-medium\">Local Processing</div>\n          <div className=\"text-sm text-gray-600\">All data stays on device</div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <Shield className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n          <div className=\"font-medium\">Encrypted Storage</div>\n          <div className=\"text-sm text-gray-600\">Quantum-safe encryption</div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <Users className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n          <div className=\"font-medium\">Anonymous Learning</div>\n          <div className=\"text-sm text-gray-600\">No personal data shared</div>\n        </div>\n      </div>\n    </div>\n    \n    {/* Federated Learning Controls */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Federated Learning</h2>\n        <label className=\"relative inline-flex items-center cursor-pointer\">\n          <input\n            type=\"checkbox\"\n            checked={userPreferences.federatedLearningEnabled}\n            onChange={(e) => onUpdatePreferences('federatedLearningEnabled', e.target.checked)}\n            className=\"sr-only peer\"\n          />\n          <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n        </label>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <p className=\"text-gray-600\">\n          Contribute to improving AI security for everyone while maintaining complete privacy.\n          Only anonymous model improvements are shared, never your personal data.\n        </p>\n        \n        {userPreferences.federatedLearningEnabled && (\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <div className=\"flex items-start space-x-3\">\n              <Info className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n              <div>\n                <div className=\"font-medium text-blue-900\">How it works:</div>\n                <ul className=\"text-sm text-blue-800 mt-1 space-y-1\">\n                  <li>• Your device learns from your usage patterns</li>\n                  <li>• Only anonymous model improvements are shared</li>\n                  <li>• Differential privacy adds mathematical protection</li>\n                  <li>• No raw data ever leaves your device</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n    \n    {/* Data Retention Settings */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Data Retention</h2>\n      \n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n          <div>\n            <div className=\"font-medium\">Training Data</div>\n            <div className=\"text-sm text-gray-600\">Automatically deleted after 30 days</div>\n          </div>\n          <CheckCircle className=\"w-5 h-5 text-green-500\" />\n        </div>\n        \n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n          <div>\n            <div className=\"font-medium\">Model Checkpoints</div>\n            <div className=\"text-sm text-gray-600\">Kept for rollback purposes</div>\n          </div>\n          <CheckCircle className=\"w-5 h-5 text-green-500\" />\n        </div>\n        \n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n          <div>\n            <div className=\"font-medium\">Performance Metrics</div>\n            <div className=\"text-sm text-gray-600\">Anonymous statistics only</div>\n          </div>\n          <CheckCircle className=\"w-5 h-5 text-green-500\" />\n        </div>\n      </div>\n    </div>\n  </motion.div>\n);\n\n/**\n * Settings Tab - Advanced Configuration\n */\nconst SettingsTab = ({ userPreferences, onUpdatePreferences, userProfile }) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -20 }}\n    className=\"space-y-6\"\n  >\n    {/* Advanced Training Settings */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Advanced Settings</h2>\n      \n      <div className=\"space-y-6\">\n        {/* Learning Rate */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Learning Rate\n          </label>\n          <input\n            type=\"range\"\n            min=\"0.0001\"\n            max=\"0.01\"\n            step=\"0.0001\"\n            value={userPreferences.learningRate || 0.001}\n            onChange={(e) => onUpdatePreferences('learningRate', parseFloat(e.target.value))}\n            className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n          />\n          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n            <span>Conservative</span>\n            <span>Aggressive</span>\n          </div>\n        </div>\n        \n        {/* Batch Size */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Batch Size\n          </label>\n          <select\n            value={userPreferences.batchSize || 8}\n            onChange={(e) => onUpdatePreferences('batchSize', parseInt(e.target.value))}\n            className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value={4}>4 (Light)</option>\n            <option value={8}>8 (Balanced)</option>\n            <option value={16}>16 (Intensive)</option>\n          </select>\n        </div>\n        \n        {/* Training Frequency */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Training Frequency\n          </label>\n          <select\n            value={userPreferences.trainingFrequency || 'daily'}\n            onChange={(e) => onUpdatePreferences('trainingFrequency', e.target.value)}\n            className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"hourly\">Every Hour</option>\n            <option value=\"daily\">Daily</option>\n            <option value=\"weekly\">Weekly</option>\n          </select>\n        </div>\n      </div>\n    </div>\n    \n    {/* Age-Specific Settings */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Age-Adaptive Configuration</h2>\n      \n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <div className=\"flex items-center space-x-3\">\n          <Info className=\"w-5 h-5 text-blue-600\" />\n          <div>\n            <div className=\"font-medium text-blue-900\">\n              Current Profile: {userProfile?.ageGroup || 'Adult'}\n            </div>\n            <div className=\"text-sm text-blue-800\">\n              Training parameters are automatically optimized for your age group\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    {/* Export/Import Settings */}\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Backup & Restore</h2>\n      \n      <div className=\"flex space-x-4\">\n        <button className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors\">\n          Export Settings\n        </button>\n        <button className=\"flex-1 bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition-colors\">\n          Import Settings\n        </button>\n      </div>\n    </div>\n  </motion.div>\n);\n\n/**\n * Utility Components\n */\nconst MetricCard = ({ title, value, icon, color, bgColor }) => (\n  <div className={`${bgColor} rounded-xl p-6 border border-gray-200`}>\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <div className=\"text-2xl font-bold text-gray-900\">{value}</div>\n        <div className=\"text-sm text-gray-600\">{title}</div>\n      </div>\n      <div className={color}>{icon}</div>\n    </div>\n  </div>\n);\n\nconst ResourceCard = ({ title, value, icon, status, details }) => {\n  const statusColors = {\n    good: 'text-green-600 bg-green-50 border-green-200',\n    warning: 'text-yellow-600 bg-yellow-50 border-yellow-200',\n    critical: 'text-red-600 bg-red-50 border-red-200'\n  };\n  \n  return (\n    <div className={`rounded-xl p-6 border-2 ${statusColors[status]}`}>\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {icon}\n      </div>\n      <div className=\"font-medium\">{title}</div>\n      <div className=\"text-sm opacity-75\">{details}</div>\n    </div>\n  );\n};\n\nconst TrainingReadinessCheck = ({ resourceStatus }) => {\n  const checks = [\n    {\n      name: 'Battery Level',\n      status: resourceStatus.battery > 30,\n      message: resourceStatus.battery > 30 ? 'Sufficient' : 'Too low'\n    },\n    {\n      name: 'Temperature',\n      status: resourceStatus.temperature < 38,\n      message: resourceStatus.temperature < 38 ? 'Normal' : 'Too hot'\n    },\n    {\n      name: 'Memory',\n      status: resourceStatus.memory > 300,\n      message: resourceStatus.memory > 300 ? 'Available' : 'Insufficient'\n    },\n    {\n      name: 'Charging',\n      status: resourceStatus.isCharging,\n      message: resourceStatus.isCharging ? 'Connected' : 'On battery'\n    }\n  ];\n  \n  const allReady = checks.every(check => check.status);\n  \n  return (\n    <div className=\"space-y-3\">\n      <div className={`flex items-center space-x-2 p-3 rounded-lg ${\n        allReady ? 'bg-green-50 text-green-800' : 'bg-yellow-50 text-yellow-800'\n      }`}>\n        {allReady ? (\n          <CheckCircle className=\"w-5 h-5\" />\n        ) : (\n          <AlertTriangle className=\"w-5 h-5\" />\n        )}\n        <span className=\"font-medium\">\n          {allReady ? 'Ready for training' : 'Training conditions not optimal'}\n        </span>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        {checks.map((check) => (\n          <div key={check.name} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n            <span className=\"font-medium\">{check.name}</span>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">{check.message}</span>\n              {check.status ? (\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n              ) : (\n                <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TrainingControlPanel;"
