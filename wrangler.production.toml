name = "pq359-production"
main = "src/edge/ultra-optimized-worker.ts"
compatibility_date = "2024-01-01"
compatibility_flags = ["nodejs_compat"]

# Account configuration
account_id = "${CLOUDFLARE_ACCOUNT_ID}"
zone_id = "${CLOUDFLARE_ZONE_ID}"

# Production environment
[env.production]
name = "pq359-production"
routes = [
  { pattern = "api.pq359.com/*", zone_id = "${CLOUDFLARE_ZONE_ID}" },
  { pattern = "pq359.com/api/*", zone_id = "${CLOUDFLARE_ZONE_ID}" }
]

# Variables for production
[env.production.vars]
ENVIRONMENT = "production"
API_BASE_URL = "https://api.pq359.com"
WEB_BASE_URL = "https://pq359.com"
NEURAL_NETWORK_ENDPOINT = "https://neural.pq359.com"
QUANTUM_SECURITY_LEVEL = "maximum"
GAMIFICATION_ENABLED = "true"
VIRAL_GROWTH_ENABLED = "true"
FAMILY_PROTECTION_ENABLED = "true"
ANALYTICS_ENABLED = "true"
DEBUG_MODE = "false"
LOG_LEVEL = "info"

# D1 Databases
[[env.production.d1_databases]]
binding = "PQ359_DB"
database_name = "pq359-main"
database_id = "${PQ359_MAIN_DB_ID}"

[[env.production.d1_databases]]
binding = "ANALYTICS_DB"
database_name = "pq359-analytics"
database_id = "${PQ359_ANALYTICS_DB_ID}"

[[env.production.d1_databases]]
binding = "CACHE_DB"
database_name = "pq359-cache"
database_id = "${PQ359_CACHE_DB_ID}"

# KV Stores
[[env.production.kv_namespaces]]
binding = "CACHE_KV"
id = "${PQ359_CACHE_KV_ID}"

[[env.production.kv_namespaces]]
binding = "SESSIONS_KV"
id = "${PQ359_SESSIONS_KV_ID}"

[[env.production.kv_namespaces]]
binding = "CONFIG_KV"
id = "${PQ359_CONFIG_KV_ID}"

# R2 Buckets
[[env.production.r2_buckets]]
binding = "ASSETS_BUCKET"
bucket_name = "pq359-assets"

[[env.production.r2_buckets]]
binding = "BACKUPS_BUCKET"
bucket_name = "pq359-backups"

[[env.production.r2_buckets]]
binding = "LOGS_BUCKET"
bucket_name = "pq359-logs"

# Durable Objects
[[env.production.durable_objects.bindings]]
name = "NEURAL_NETWORK_DO"
class_name = "NeuralNetworkDurableObject"

[[env.production.durable_objects.bindings]]
name = "GAMIFICATION_DO"
class_name = "GamificationDurableObject"

[[env.production.durable_objects.bindings]]
name = "VIRAL_GROWTH_DO"
class_name = "ViralGrowthDurableObject"

# Services (for microservices architecture)
[[env.production.services]]
binding = "NEURAL_SERVICE"
service = "pq359-neural-network"

[[env.production.services]]
binding = "QUANTUM_SERVICE"
service = "pq359-quantum-security"

[[env.production.services]]
binding = "GAMIFICATION_SERVICE"
service = "pq359-gamification"

# Analytics Engine
[[env.production.analytics_engine_datasets]]
binding = "ANALYTICS"
dataset = "pq359_analytics"

# Hyperdrive (for database connections)
[[env.production.hyperdrive]]
binding = "HYPERDRIVE"
id = "${PQ359_HYPERDRIVE_ID}"

# Vectorize (for AI/ML features)
[[env.production.vectorize]]
binding = "VECTORIZE"
index_name = "pq359-neural-vectors"

# Queue (for background processing)
[[env.production.queues]]
binding = "BACKGROUND_QUEUE"
queue_name = "pq359-background-tasks"

# Staging environment
[env.staging]
name = "pq359-staging"
routes = [
  { pattern = "api-staging.pq359.com/*", zone_id = "${CLOUDFLARE_ZONE_ID}" },
  { pattern = "staging.pq359.com/api/*", zone_id = "${CLOUDFLARE_ZONE_ID}" }
]

[env.staging.vars]
ENVIRONMENT = "staging"
API_BASE_URL = "https://api-staging.pq359.com"
WEB_BASE_URL = "https://staging.pq359.com"
NEURAL_NETWORK_ENDPOINT = "https://neural-staging.pq359.com"
QUANTUM_SECURITY_LEVEL = "high"
GAMIFICATION_ENABLED = "true"
VIRAL_GROWTH_ENABLED = "true"
FAMILY_PROTECTION_ENABLED = "true"
ANALYTICS_ENABLED = "true"
DEBUG_MODE = "true"
LOG_LEVEL = "debug"

# Development environment
[env.development]
name = "pq359-development"
routes = [
  { pattern = "api-dev.pq359.com/*", zone_id = "${CLOUDFLARE_ZONE_ID}" },
  { pattern = "dev.pq359.com/api/*", zone_id = "${CLOUDFLARE_ZONE_ID}" }
]

[env.development.vars]
ENVIRONMENT = "development"
API_BASE_URL = "https://api-dev.pq359.com"
WEB_BASE_URL = "https://dev.pq359.com"
NEURAL_NETWORK_ENDPOINT = "https://neural-dev.pq359.com"
QUANTUM_SECURITY_LEVEL = "medium"
GAMIFICATION_ENABLED = "true"
VIRAL_GROWTH_ENABLED = "false"
FAMILY_PROTECTION_ENABLED = "true"
ANALYTICS_ENABLED = "false"
DEBUG_MODE = "true"
LOG_LEVEL = "debug"

# Build configuration
[build]
command = "npm run build:worker"
cwd = "."
watch_dir = "src"

# Miniflare configuration for local development
[miniflare]
kv_persist = true
d1_persist = true
r2_persist = true
durable_objects_persist = true

# Limits and performance
[limits]
cpu_ms = 50
memory_mb = 128

# Security headers
[security]
csp = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https:; frame-ancestors 'none';"
hsts = "max-age=31536000; includeSubDomains; preload"
x_frame_options = "DENY"
x_content_type_options = "nosniff"
x_xss_protection = "1; mode=block"
referrer_policy = "strict-origin-when-cross-origin"

# Observability
[observability]
enabled = true
head_sampling_rate = 0.01

# Placement
[placement]
mode = "smart"
