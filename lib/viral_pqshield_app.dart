// lib/viral_pqshield_app.dart\n// 🎮 Viral Gamified PQShield App - k>1 Growth Engine\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:provider/provider.dart';\nimport 'package:confetti/confetti.dart';\nimport 'package:lottie/lottie.dart';\nimport 'package:share_plus/share_plus.dart';\nimport 'package:in_app_purchase/in_app_purchase.dart';\nimport 'dart:async';\nimport 'dart:math';\n\n/// 🚀 Main Viral PQShield App with Gamification\nclass ViralPQShieldApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) => GameStateManager()),\n        ChangeNotifierProvider(create: (_) => ViralGrowthEngine()),\n        ChangeNotifierProvider(create: (_) => MonetizationManager()),\n        ChangeNotifierProvider(create: (_) => SocialProofEngine()),\n      ],\n      child: MaterialApp(\n        title: '🛡️ PQShield: Quantum Guardian',\n        theme: _buildQuantumTheme(),\n        home: SplashScreen(),\n        routes: {\n          '/game': (context) => GameDashboard(),\n          '/battles': (context) => TeamBattlesScreen(),\n          '/shop': (context) => QuantumShopScreen(),\n          '/leaderboard': (context) => GlobalLeaderboardScreen(),\n          '/referrals': (context) => ReferralCenterScreen(),\n        },\n      ),\n    );\n  }\n  \n  ThemeData _buildQuantumTheme() {\n    return ThemeData(\n      primarySwatch: Colors.blue,\n      scaffoldBackgroundColor: Color(0xFF0A0A0A),\n      appBarTheme: AppBarTheme(\n        backgroundColor: Colors.transparent,\n        elevation: 0,\n        systemOverlayStyle: SystemUiOverlayStyle.light,\n      ),\n      textTheme: TextTheme(\n        headlineLarge: TextStyle(\n          color: Colors.white,\n          fontSize: 32,\n          fontWeight: FontWeight.bold,\n          shadows: [\n            Shadow(\n              color: Colors.blue.withOpacity(0.5),\n              blurRadius: 10,\n              offset: Offset(0, 2),\n            ),\n          ],\n        ),\n        bodyLarge: TextStyle(color: Colors.white70),\n        bodyMedium: TextStyle(color: Colors.white60),\n      ),\n      elevatedButtonTheme: ElevatedButtonThemeData(\n        style: ElevatedButton.styleFrom(\n          backgroundColor: Colors.blue,\n          foregroundColor: Colors.white,\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(25),\n          ),\n          elevation: 8,\n          shadowColor: Colors.blue.withOpacity(0.5),\n        ),\n      ),\n    );\n  }\n}\n\n/// 🎮 Game State Manager - Core Gamification Logic\nclass GameStateManager extends ChangeNotifier {\n  // Player stats\n  int _level = 1;\n  int _xp = 0;\n  int _coins = 100;\n  int _threatsBlocked = 0;\n  int _keysGenerated = 0;\n  int _referralsCount = 0;\n  \n  // Achievements\n  final Set<String> _unlockedAchievements = {};\n  final List<String> _recentAchievements = [];\n  \n  // Daily streak\n  int _loginStreak = 1;\n  DateTime _lastLogin = DateTime.now();\n  \n  // Getters\n  int get level => _level;\n  int get xp => _xp;\n  int get coins => _coins;\n  int get threatsBlocked => _threatsBlocked;\n  int get keysGenerated => _keysGenerated;\n  int get referralsCount => _referralsCount;\n  int get loginStreak => _loginStreak;\n  Set<String> get achievements => _unlockedAchievements;\n  List<String> get recentAchievements => _recentAchievements;\n  \n  // XP required for next level\n  int get xpForNextLevel => _level * 100;\n  double get levelProgress => _xp / xpForNextLevel;\n  \n  // Player title based on level\n  String get playerTitle {\n    if (_level >= 100) return '🚀 Quantum God';\n    if (_level >= 50) return '⚡ Mythic Protector';\n    if (_level >= 25) return '👑 Crypto Legend';\n    if (_level >= 15) return '🧠 Neural Sentinel';\n    if (_level >= 10) return '🔮 Quantum Guardian';\n    if (_level >= 5) return '⚔️ Cyber Defender';\n    return '🛡️ Quantum Rookie';\n  }\n  \n  /// Add XP and handle level ups\n  void addXP(int amount, {String? source}) {\n    _xp += amount;\n    \n    // Check for level up\n    while (_xp >= xpForNextLevel) {\n      _xp -= xpForNextLevel;\n      _level++;\n      _triggerLevelUp();\n    }\n    \n    // Track XP source for analytics\n    if (source != null) {\n      _trackEvent('xp_gained', {\n        'amount': amount,\n        'source': source,\n        'total_xp': _xp,\n        'level': _level,\n      });\n    }\n    \n    notifyListeners();\n  }\n  \n  /// Add coins with optional bonus\n  void addCoins(int amount, {double bonus = 0.0}) {\n    final totalAmount = (amount * (1 + bonus)).round();\n    _coins += totalAmount;\n    \n    _trackEvent('coins_earned', {\n      'base_amount': amount,\n      'bonus_multiplier': bonus,\n      'total_earned': totalAmount,\n      'total_coins': _coins,\n    });\n    \n    notifyListeners();\n  }\n  \n  /// Spend coins\n  bool spendCoins(int amount) {\n    if (_coins >= amount) {\n      _coins -= amount;\n      notifyListeners();\n      return true;\n    }\n    return false;\n  }\n  \n  /// Record threat detection\n  void recordThreatDetection(String threatType, {bool critical = false}) {\n    _threatsBlocked++;\n    \n    // XP rewards based on threat type\n    int xpReward = critical ? 50 : 5;\n    int coinReward = critical ? 25 : 2;\n    \n    addXP(xpReward, source: 'threat_detection');\n    addCoins(coinReward);\n    \n    // Check for achievements\n    _checkThreatAchievements();\n    \n    // Trigger viral sharing for critical threats\n    if (critical) {\n      _triggerViralMoment('critical_threat', {\n        'threat_type': threatType,\n        'total_blocked': _threatsBlocked,\n      });\n    }\n    \n    notifyListeners();\n  }\n  \n  /// Record key generation\n  void recordKeyGeneration(String keyType, {bool quantum = false}) {\n    _keysGenerated++;\n    \n    int xpReward = quantum ? 25 : 15;\n    int coinReward = quantum ? 15 : 8;\n    \n    addXP(xpReward, source: 'key_generation');\n    addCoins(coinReward);\n    \n    _checkKeyAchievements();\n    notifyListeners();\n  }\n  \n  /// Record successful referral\n  void recordReferral(String referredUserId) {\n    _referralsCount++;\n    \n    // Generous referral rewards\n    addXP(100, source: 'referral');\n    addCoins(50);\n    \n    // Unlock referral achievements\n    _checkReferralAchievements();\n    \n    // Trigger viral sharing\n    _triggerViralMoment('successful_referral', {\n      'referred_user': referredUserId,\n      'total_referrals': _referralsCount,\n    });\n    \n    notifyListeners();\n  }\n  \n  /// Handle daily login\n  void handleDailyLogin() {\n    final now = DateTime.now();\n    final daysSinceLastLogin = now.difference(_lastLogin).inDays;\n    \n    if (daysSinceLastLogin == 1) {\n      // Consecutive day\n      _loginStreak++;\n    } else if (daysSinceLastLogin > 1) {\n      // Streak broken\n      _loginStreak = 1;\n    }\n    \n    _lastLogin = now;\n    \n    // Daily login rewards\n    final streakBonus = (_loginStreak / 7).floor();\n    addXP(10 + streakBonus * 5, source: 'daily_login');\n    addCoins(5 + streakBonus * 2);\n    \n    // Weekly streak bonus\n    if (_loginStreak % 7 == 0) {\n      _unlockAchievement('weekly_warrior');\n      _triggerViralMoment('weekly_streak', {\n        'streak_days': _loginStreak,\n      });\n    }\n    \n    notifyListeners();\n  }\n  \n  /// Trigger level up celebration\n  void _triggerLevelUp() {\n    _unlockAchievement('level_${_level}');\n    \n    // Level up rewards\n    addCoins(_level * 10);\n    \n    // Trigger viral sharing\n    _triggerViralMoment('level_up', {\n      'new_level': _level,\n      'new_title': playerTitle,\n    });\n    \n    // Show celebration UI\n    _showLevelUpCelebration();\n  }\n  \n  /// Check threat-related achievements\n  void _checkThreatAchievements() {\n    final milestones = [1, 10, 50, 100, 500, 1000, 5000];\n    for (final milestone in milestones) {\n      if (_threatsBlocked == milestone) {\n        _unlockAchievement('threat_hunter_$milestone');\n      }\n    }\n  }\n  \n  /// Check key generation achievements\n  void _checkKeyAchievements() {\n    final milestones = [1, 25, 100, 500, 2500];\n    for (final milestone in milestones) {\n      if (_keysGenerated == milestone) {\n        _unlockAchievement('key_master_$milestone');\n      }\n    }\n  }\n  \n  /// Check referral achievements\n  void _checkReferralAchievements() {\n    final milestones = [1, 5, 25, 100, 500];\n    for (final milestone in milestones) {\n      if (_referralsCount == milestone) {\n        _unlockAchievement('viral_champion_$milestone');\n      }\n    }\n  }\n  \n  /// Unlock achievement\n  void _unlockAchievement(String achievementId) {\n    if (!_unlockedAchievements.contains(achievementId)) {\n      _unlockedAchievements.add(achievementId);\n      _recentAchievements.insert(0, achievementId);\n      \n      // Keep only recent 10 achievements\n      if (_recentAchievements.length > 10) {\n        _recentAchievements.removeLast();\n      }\n      \n      // Achievement rewards\n      addXP(25, source: 'achievement');\n      addCoins(15);\n      \n      // Trigger viral sharing\n      _triggerViralMoment('achievement_unlocked', {\n        'achievement': achievementId,\n        'total_achievements': _unlockedAchievements.length,\n      });\n    }\n  }\n  \n  /// Trigger viral sharing moment\n  void _triggerViralMoment(String eventType, Map<String, dynamic> data) {\n    // This would integrate with the ViralGrowthEngine\n    // For now, just track the event\n    _trackEvent('viral_moment', {\n      'event_type': eventType,\n      'data': data,\n      'user_level': _level,\n      'user_title': playerTitle,\n    });\n  }\n  \n  /// Show level up celebration\n  void _showLevelUpCelebration() {\n    // This would trigger UI celebration\n    // Implementation depends on current context\n  }\n  \n  /// Track analytics event\n  void _trackEvent(String eventName, Map<String, dynamic> properties) {\n    // Integration with analytics services\n    print('📊 Event: $eventName - $properties');\n  }\n}\n\n/// 🚀 Viral Growth Engine - Drives k>1 Growth\nclass ViralGrowthEngine extends ChangeNotifier {\n  // Viral metrics\n  double _viralCoefficient = 0.0;\n  int _totalShares = 0;\n  int _successfulReferrals = 0;\n  int _viralMoments = 0;\n  \n  // Referral tracking\n  final Map<String, ReferralData> _referrals = {};\n  String? _referralCode;\n  \n  // Social proof data\n  final GlobalStats _globalStats = GlobalStats();\n  \n  // Getters\n  double get viralCoefficient => _viralCoefficient;\n  int get totalShares => _totalShares;\n  int get successfulReferrals => _successfulReferrals;\n  String? get referralCode => _referralCode;\n  GlobalStats get globalStats => _globalStats;\n  \n  /// Initialize viral engine\n  void initialize(String userId) {\n    _referralCode = _generateReferralCode(userId);\n    _startGlobalStatsStream();\n    notifyListeners();\n  }\n  \n  /// Generate personalized referral link\n  String generateReferralLink({String? customMessage}) {\n    final baseUrl = 'https://pqshield.com/join';\n    final params = {\n      'ref': _referralCode,\n      'utm_source': 'app_referral',\n      'utm_medium': 'social',\n      'utm_campaign': 'viral_growth',\n    };\n    \n    if (customMessage != null) {\n      params['msg'] = Uri.encodeComponent(customMessage);\n    }\n    \n    final queryString = params.entries\n        .map((e) => '${e.key}=${e.value}')\n        .join('&');\n    \n    return '$baseUrl?$queryString';\n  }\n  \n  /// Get viral sharing templates\n  List<ShareTemplate> getShareTemplates(GameStateManager gameState) {\n    return [\n      ShareTemplate(\n        platform: 'twitter',\n        content: '🛡️ Just hit level ${gameState.level} in @PQShield!\\n'\n                '🚀 ${gameState.threatsBlocked} quantum threats blocked!\\n'\n                '⚡ Join me in the quantum security revolution!\\n'\n                '${generateReferralLink()}\\n'\n                '#QuantumSecurity #PQShield #CyberSafety',\n        expectedReach: 500,\n        viralPotential: 0.8,\n      ),\n      \n      ShareTemplate(\n        platform: 'instagram',\n        content: '🔮 ${gameState.playerTitle} Level ${gameState.level}! 🔮\\n'\n                '\\n'\n                'Just blocked my ${gameState.threatsBlocked}th cyber threat! 🛡️\\n'\n                '\\n'\n                'In a world where quantum computers will break current '\n                'encryption, I\\'m already protected! 🚀\\n'\n                '\\n'\n                'Join the revolution: ${generateReferralLink()}\\n'\n                '\\n'\n                '#QuantumSecurity #CyberSafety #PQShield #TechSafety',\n        expectedReach: 1200,\n        viralPotential: 0.9,\n      ),\n      \n      ShareTemplate(\n        platform: 'tiktok',\n        content: 'POV: You\\'re protected against quantum hackers 😎\\n'\n                '\\n'\n                'Level ${gameState.level} ${gameState.playerTitle} 🔮\\n'\n                '${gameState.threatsBlocked} threats blocked! 📈\\n'\n                '\\n'\n                'Get your quantum armor: ${generateReferralLink()}\\n'\n                '\\n'\n                '#QuantumSecurity #CyberSafety #TechTok #PQShield',\n        expectedReach: 5000,\n        viralPotential: 0.95,\n      ),\n    ];\n  }\n  \n  /// Share achievement with viral potential\n  Future<void> shareAchievement(String achievementType, Map<String, dynamic> data) async {\n    final templates = _getAchievementTemplates(achievementType, data);\n    \n    // Show sharing options\n    await _showSharingDialog(templates);\n    \n    _totalShares++;\n    _viralMoments++;\n    \n    // Calculate viral coefficient\n    _updateViralCoefficient();\n    \n    notifyListeners();\n  }\n  \n  /// Record successful referral\n  void recordReferral(String referredUserId, String referralSource) {\n    _referrals[referredUserId] = ReferralData(\n      userId: referredUserId,\n      source: referralSource,\n      timestamp: DateTime.now(),\n      status: ReferralStatus.active,\n    );\n    \n    _successfulReferrals++;\n    _updateViralCoefficient();\n    \n    notifyListeners();\n  }\n  \n  /// Update viral coefficient calculation\n  void _updateViralCoefficient() {\n    if (_totalShares > 0) {\n      _viralCoefficient = _successfulReferrals / _totalShares;\n    }\n  }\n  \n  /// Generate referral code\n  String _generateReferralCode(String userId) {\n    final hash = userId.hashCode.abs();\n    return 'QG${hash.toString().substring(0, 6).toUpperCase()}';\n  }\n  \n  /// Start global stats stream\n  void _startGlobalStatsStream() {\n    Timer.periodic(Duration(seconds: 30), (timer) {\n      _globalStats.update();\n      notifyListeners();\n    });\n  }\n  \n  /// Get achievement-specific sharing templates\n  List<ShareTemplate> _getAchievementTemplates(String type, Map<String, dynamic> data) {\n    // Implementation would return templates based on achievement type\n    return [];\n  }\n  \n  /// Show sharing dialog\n  Future<void> _showSharingDialog(List<ShareTemplate> templates) async {\n    // Implementation would show platform selection dialog\n  }\n}\n\n/// 💰 Monetization Manager - Revenue Optimization\nclass MonetizationManager extends ChangeNotifier {\n  // Subscription status\n  SubscriptionTier _currentTier = SubscriptionTier.free;\n  DateTime? _subscriptionExpiry;\n  \n  // Purchase history\n  final List<Purchase> _purchaseHistory = [];\n  \n  // Revenue tracking\n  double _totalRevenue = 0.0;\n  double _monthlyRevenue = 0.0;\n  \n  // In-app purchase products\n  final Map<String, ProductDetails> _products = {};\n  \n  // Getters\n  SubscriptionTier get currentTier => _currentTier;\n  bool get isPremium => _currentTier != SubscriptionTier.free;\n  DateTime? get subscriptionExpiry => _subscriptionExpiry;\n  double get totalRevenue => _totalRevenue;\n  \n  /// Initialize monetization\n  Future<void> initialize() async {\n    await _loadProducts();\n    await _restorePurchases();\n    notifyListeners();\n  }\n  \n  /// Purchase subscription\n  Future<bool> purchaseSubscription(SubscriptionTier tier) async {\n    try {\n      final productId = _getProductId(tier);\n      final product = _products[productId];\n      \n      if (product != null) {\n        final purchaseParam = PurchaseParam(productDetails: product);\n        final result = await InAppPurchase.instance.buyNonConsumable(\n          purchaseParam: purchaseParam,\n        );\n        \n        if (result) {\n          _currentTier = tier;\n          _subscriptionExpiry = DateTime.now().add(Duration(days: 30));\n          _recordRevenue(double.parse(product.price));\n          \n          notifyListeners();\n          return true;\n        }\n      }\n    } catch (e) {\n      print('Purchase failed: $e');\n    }\n    \n    return false;\n  }\n  \n  /// Purchase coins\n  Future<bool> purchaseCoins(String packageId) async {\n    try {\n      final product = _products[packageId];\n      if (product != null) {\n        final purchaseParam = PurchaseParam(productDetails: product);\n        final result = await InAppPurchase.instance.buyConsumable(\n          purchaseParam: purchaseParam,\n        );\n        \n        if (result) {\n          final coinAmount = _getCoinAmount(packageId);\n          // Add coins to game state\n          _recordRevenue(double.parse(product.price));\n          \n          notifyListeners();\n          return true;\n        }\n      }\n    } catch (e) {\n      print('Coin purchase failed: $e');\n    }\n    \n    return false;\n  }\n  \n  /// Get subscription benefits\n  List<String> getSubscriptionBenefits(SubscriptionTier tier) {\n    switch (tier) {\n      case SubscriptionTier.guardian:\n        return [\n          '🚀 Unlimited threat scans',\n          '🔑 Unlimited quantum keys',\n          '🎮 Exclusive achievements',\n          '📱 No ads',\n          '⚡ Priority support',\n          '🏆 Team battles access',\n        ];\n        \n      case SubscriptionTier.sentinel:\n        return [\n          '🧠 AI threat prediction',\n          '📊 Advanced analytics',\n          '🎨 Custom themes',\n          '🔧 API access',\n          '💎 Premium NFTs',\n          '👥 Team management',\n        ];\n        \n      case SubscriptionTier.quantumMaster:\n        return [\n          '🏢 Enterprise features',\n          '📞 Dedicated support',\n          '🔗 Custom integrations',\n          '📋 Compliance reports',\n          '💰 Revenue sharing',\n          '🌟 Founder status',\n        ];\n        \n      default:\n        return [];\n    }\n  }\n  \n  /// Load available products\n  Future<void> _loadProducts() async {\n    final productIds = {\n      'guardian_monthly',\n      'sentinel_monthly',\n      'quantum_master_monthly',\n      'coins_small',\n      'coins_medium',\n      'coins_large',\n      'xp_booster',\n      'battle_pass',\n    };\n    \n    try {\n      final response = await InAppPurchase.instance.queryProductDetails(productIds);\n      for (final product in response.productDetails) {\n        _products[product.id] = product;\n      }\n    } catch (e) {\n      print('Failed to load products: $e');\n    }\n  }\n  \n  /// Restore previous purchases\n  Future<void> _restorePurchases() async {\n    try {\n      await InAppPurchase.instance.restorePurchases();\n    } catch (e) {\n      print('Failed to restore purchases: $e');\n    }\n  }\n  \n  /// Record revenue\n  void _recordRevenue(double amount) {\n    _totalRevenue += amount;\n    _monthlyRevenue += amount;\n    \n    _purchaseHistory.add(Purchase(\n      productId: 'unknown',\n      amount: amount,\n      timestamp: DateTime.now(),\n    ));\n  }\n  \n  /// Get product ID for subscription tier\n  String _getProductId(SubscriptionTier tier) {\n    switch (tier) {\n      case SubscriptionTier.guardian:\n        return 'guardian_monthly';\n      case SubscriptionTier.sentinel:\n        return 'sentinel_monthly';\n      case SubscriptionTier.quantumMaster:\n        return 'quantum_master_monthly';\n      default:\n        return '';\n    }\n  }\n  \n  /// Get coin amount for package\n  int _getCoinAmount(String packageId) {\n    switch (packageId) {\n      case 'coins_small':\n        return 500;\n      case 'coins_medium':\n        return 1500;\n      case 'coins_large':\n        return 3000;\n      default:\n        return 0;\n    }\n  }\n}\n\n/// 🌍 Social Proof Engine - FOMO & Urgency\nclass SocialProofEngine extends ChangeNotifier {\n  final GlobalStats _stats = GlobalStats();\n  final List<RecentActivity> _recentActivities = [];\n  \n  GlobalStats get stats => _stats;\n  List<RecentActivity> get recentActivities => _recentActivities;\n  \n  void initialize() {\n    _startStatsUpdates();\n    _startActivityFeed();\n  }\n  \n  void _startStatsUpdates() {\n    Timer.periodic(Duration(seconds: 15), (timer) {\n      _stats.update();\n      notifyListeners();\n    });\n  }\n  \n  void _startActivityFeed() {\n    Timer.periodic(Duration(seconds: 5), (timer) {\n      _addRandomActivity();\n      notifyListeners();\n    });\n  }\n  \n  void _addRandomActivity() {\n    final activities = [\n      'CryptoNinja_2024 just blocked a quantum phishing attack! 🛡️',\n      'SecureGamer reached level 25 Quantum Guardian! 🔮',\n      'TechSavvy_Pro generated their 1000th quantum key! 🔑',\n      'QuantumHunter unlocked the Mythic Protector achievement! 🌟',\n      'CyberDefender_X referred 50 new guardians! 🚀',\n    ];\n    \n    _recentActivities.insert(0, RecentActivity(\n      message: activities[Random().nextInt(activities.length)],\n      timestamp: DateTime.now(),\n    ));\n    \n    // Keep only recent 20 activities\n    if (_recentActivities.length > 20) {\n      _recentActivities.removeLast();\n    }\n  }\n}\n\n// Data Models\nclass ReferralData {\n  final String userId;\n  final String source;\n  final DateTime timestamp;\n  final ReferralStatus status;\n  \n  ReferralData({\n    required this.userId,\n    required this.source,\n    required this.timestamp,\n    required this.status,\n  });\n}\n\nenum ReferralStatus { pending, active, churned }\n\nclass ShareTemplate {\n  final String platform;\n  final String content;\n  final int expectedReach;\n  final double viralPotential;\n  \n  ShareTemplate({\n    required this.platform,\n    required this.content,\n    required this.expectedReach,\n    required this.viralPotential,\n  });\n}\n\nenum SubscriptionTier {\n  free,\n  guardian,\n  sentinel,\n  quantumMaster,\n}\n\nclass Purchase {\n  final String productId;\n  final double amount;\n  final DateTime timestamp;\n  \n  Purchase({\n    required this.productId,\n    required this.amount,\n    required this.timestamp,\n  });\n}\n\nclass GlobalStats {\n  int threatsBlockedToday = 2847293;\n  int quantumKeysGenerated = 892847;\n  int usersProtected = 1847293;\n  int countriesActive = 127;\n  String trendingThreat = 'Quantum Phishing Attack';\n  String topGuardian = 'CryptoNinja_2024';\n  \n  void update() {\n    // Simulate real-time updates\n    threatsBlockedToday += Random().nextInt(100) + 50;\n    quantumKeysGenerated += Random().nextInt(50) + 25;\n    usersProtected += Random().nextInt(25) + 10;\n  }\n}\n\nclass RecentActivity {\n  final String message;\n  final DateTime timestamp;\n  \n  RecentActivity({\n    required this.message,\n    required this.timestamp,\n  });\n}\n\n/// 🎮 Game Dashboard - Main Gaming Interface\nclass GameDashboard extends StatefulWidget {\n  @override\n  _GameDashboardState createState() => _GameDashboardState();\n}\n\nclass _GameDashboardState extends State<GameDashboard>\n    with TickerProviderStateMixin {\n  late AnimationController _pulseController;\n  late AnimationController _rotationController;\n  late ConfettiController _confettiController;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    _pulseController = AnimationController(\n      duration: Duration(seconds: 2),\n      vsync: this,\n    )..repeat(reverse: true);\n    \n    _rotationController = AnimationController(\n      duration: Duration(seconds: 10),\n      vsync: this,\n    )..repeat();\n    \n    _confettiController = ConfettiController(\n      duration: Duration(seconds: 3),\n    );\n    \n    // Handle daily login\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      context.read<GameStateManager>().handleDailyLogin();\n    });\n  }\n  \n  @override\n  void dispose() {\n    _pulseController.dispose();\n    _rotationController.dispose();\n    _confettiController.dispose();\n    super.dispose();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xFF0A0A0A),\n              Color(0xFF1A1A2E),\n              Color(0xFF16213E),\n            ],\n          ),\n        ),\n        child: Stack(\n          children: [\n            // Background particles\n            _buildParticleBackground(),\n            \n            // Main content\n            SafeArea(\n              child: SingleChildScrollView(\n                padding: EdgeInsets.all(16),\n                child: Column(\n                  children: [\n                    _buildPlayerHeader(),\n                    SizedBox(height: 20),\n                    _buildLevelProgress(),\n                    SizedBox(height: 20),\n                    _buildStatsGrid(),\n                    SizedBox(height: 20),\n                    _buildDailyChallenges(),\n                    SizedBox(height: 20),\n                    _buildSocialProof(),\n                    SizedBox(height: 20),\n                    _buildActionButtons(),\n                  ],\n                ),\n              ),\n            ),\n            \n            // Confetti overlay\n            Align(\n              alignment: Alignment.topCenter,\n              child: ConfettiWidget(\n                confettiController: _confettiController,\n                blastDirectionality: BlastDirectionality.explosive,\n                shouldLoop: false,\n                colors: [Colors.blue, Colors.purple, Colors.gold, Colors.orange],\n              ),\n            ),\n          ],\n        ),\n      ),\n      bottomNavigationBar: _buildBottomNavigation(),\n    );\n  }\n  \n  Widget _buildParticleBackground() {\n    return AnimatedBuilder(\n      animation: _rotationController,\n      builder: (context, child) {\n        return CustomPaint(\n          painter: ParticleBackgroundPainter(_rotationController.value),\n          size: Size.infinite,\n        );\n      },\n    );\n  }\n  \n  Widget _buildPlayerHeader() {\n    return Consumer<GameStateManager>(\n      builder: (context, gameState, child) {\n        return Container(\n          padding: EdgeInsets.all(20),\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              colors: [Colors.blue.withOpacity(0.3), Colors.purple.withOpacity(0.3)],\n            ),\n            borderRadius: BorderRadius.circular(20),\n            border: Border.all(color: Colors.blue.withOpacity(0.5)),\n          ),\n          child: Row(\n            children: [\n              // Player avatar\n              Container(\n                width: 80,\n                height: 80,\n                decoration: BoxDecoration(\n                  shape: BoxShape.circle,\n                  gradient: LinearGradient(\n                    colors: [Colors.blue, Colors.purple],\n                  ),\n                  boxShadow: [\n                    BoxShadow(\n                      color: Colors.blue.withOpacity(0.5),\n                      blurRadius: 20,\n                      spreadRadius: 5,\n                    ),\n                  ],\n                ),\n                child: Center(\n                  child: Text(\n                    gameState.playerTitle.split(' ').last,\n                    style: TextStyle(\n                      fontSize: 24,\n                      fontWeight: FontWeight.bold,\n                    ),\n                  ),\n                ),\n              ),\n              \n              SizedBox(width: 16),\n              \n              // Player info\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      gameState.playerTitle,\n                      style: Theme.of(context).textTheme.headlineSmall,\n                    ),\n                    Text(\n                      'Level ${gameState.level}',\n                      style: Theme.of(context).textTheme.bodyLarge?.copyWith(\n                        color: Colors.blue,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                    Row(\n                      children: [\n                        Icon(Icons.monetization_on, color: Colors.gold, size: 16),\n                        SizedBox(width: 4),\n                        Text(\n                          '${gameState.coins} coins',\n                          style: TextStyle(color: Colors.gold),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n              \n              // Share button\n              AnimatedBuilder(\n                animation: _pulseController,\n                builder: (context, child) {\n                  return Transform.scale(\n                    scale: 1.0 + (_pulseController.value * 0.1),\n                    child: IconButton(\n                      onPressed: () => _shareProgress(gameState),\n                      icon: Icon(Icons.share, color: Colors.blue),\n                      style: IconButton.styleFrom(\n                        backgroundColor: Colors.blue.withOpacity(0.2),\n                      ),\n                    ),\n                  );\n                },\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n  \n  Widget _buildLevelProgress() {\n    return Consumer<GameStateManager>(\n      builder: (context, gameState, child) {\n        return Container(\n          padding: EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            color: Colors.black.withOpacity(0.3),\n            borderRadius: BorderRadius.circular(15),\n            border: Border.all(color: Colors.blue.withOpacity(0.3)),\n          ),\n          child: Column(\n            children: [\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Text(\n                    'Level Progress',\n                    style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),\n                  ),\n                  Text(\n                    '${gameState.xp}/${gameState.xpForNextLevel} XP',\n                    style: TextStyle(color: Colors.blue),\n                  ),\n                ],\n              ),\n              SizedBox(height: 12),\n              ClipRRect(\n                borderRadius: BorderRadius.circular(10),\n                child: LinearProgressIndicator(\n                  value: gameState.levelProgress,\n                  backgroundColor: Colors.grey[800],\n                  valueColor: AlwaysStoppedAnimation(\n                    LinearGradient(\n                      colors: [Colors.blue, Colors.purple],\n                    ).colors.first,\n                  ),\n                  minHeight: 12,\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n  \n  Widget _buildStatsGrid() {\n    return Consumer<GameStateManager>(\n      builder: (context, gameState, child) {\n        return GridView.count(\n          crossAxisCount: 2,\n          shrinkWrap: true,\n          physics: NeverScrollableScrollPhysics(),\n          crossAxisSpacing: 12,\n          mainAxisSpacing: 12,\n          children: [\n            _buildStatCard(\n              '🛡️',\n              'Threats Blocked',\n              gameState.threatsBlocked.toString(),\n              Colors.red,\n            ),\n            _buildStatCard(\n              '🔑',\n              'Keys Generated',\n              gameState.keysGenerated.toString(),\n              Colors.green,\n            ),\n            _buildStatCard(\n              '🚀',\n              'Referrals',\n              gameState.referralsCount.toString(),\n              Colors.orange,\n            ),\n            _buildStatCard(\n              '🔥',\n              'Login Streak',\n              '${gameState.loginStreak} days',\n              Colors.purple,\n            ),\n          ],\n        );\n      },\n    );\n  }\n  \n  Widget _buildStatCard(String emoji, String title, String value, Color color) {\n    return Container(\n      padding: EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          colors: [color.withOpacity(0.2), color.withOpacity(0.1)],\n        ),\n        borderRadius: BorderRadius.circular(15),\n        border: Border.all(color: color.withOpacity(0.3)),\n      ),\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Text(\n            emoji,\n            style: TextStyle(fontSize: 32),\n          ),\n          SizedBox(height: 8),\n          Text(\n            title,\n            style: TextStyle(\n              color: Colors.white70,\n              fontSize: 12,\n            ),\n            textAlign: TextAlign.center,\n          ),\n          SizedBox(height: 4),\n          Text(\n            value,\n            style: TextStyle(\n              color: color,\n              fontSize: 18,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildDailyChallenges() {\n    return Container(\n      padding: EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.black.withOpacity(0.3),\n        borderRadius: BorderRadius.circular(15),\n        border: Border.all(color: Colors.gold.withOpacity(0.3)),\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Row(\n            children: [\n              Icon(Icons.emoji_events, color: Colors.gold),\n              SizedBox(width: 8),\n              Text(\n                'Daily Challenges',\n                style: TextStyle(\n                  color: Colors.gold,\n                  fontSize: 18,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n            ],\n          ),\n          SizedBox(height: 12),\n          _buildChallengeItem('Detect 5 threats', 3, 5, 50),\n          _buildChallengeItem('Generate 3 quantum keys', 1, 3, 30),\n          _buildChallengeItem('Share an achievement', 0, 1, 100),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildChallengeItem(String title, int current, int target, int reward) {\n    final isComplete = current >= target;\n    \n    return Padding(\n      padding: EdgeInsets.symmetric(vertical: 4),\n      child: Row(\n        children: [\n          Icon(\n            isComplete ? Icons.check_circle : Icons.radio_button_unchecked,\n            color: isComplete ? Colors.green : Colors.grey,\n            size: 20,\n          ),\n          SizedBox(width: 8),\n          Expanded(\n            child: Text(\n              title,\n              style: TextStyle(\n                color: isComplete ? Colors.green : Colors.white70,\n                decoration: isComplete ? TextDecoration.lineThrough : null,\n              ),\n            ),\n          ),\n          Text(\n            '$current/$target',\n            style: TextStyle(color: Colors.blue),\n          ),\n          SizedBox(width: 8),\n          Container(\n            padding: EdgeInsets.symmetric(horizontal: 8, vertical: 2),\n            decoration: BoxDecoration(\n              color: Colors.gold.withOpacity(0.2),\n              borderRadius: BorderRadius.circular(10),\n            ),\n            child: Text(\n              '+$reward XP',\n              style: TextStyle(color: Colors.gold, fontSize: 12),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  Widget _buildSocialProof() {\n    return Consumer<SocialProofEngine>(\n      builder: (context, socialProof, child) {\n        return Container(\n          padding: EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              colors: [Colors.green.withOpacity(0.2), Colors.teal.withOpacity(0.2)],\n            ),\n            borderRadius: BorderRadius.circular(15),\n            border: Border.all(color: Colors.green.withOpacity(0.3)),\n          ),\n          child: Column(\n            children: [\n              Text(\n                '🌍 Global Quantum Guardian Network',\n                style: TextStyle(\n                  color: Colors.green,\n                  fontSize: 16,\n                  fontWeight: FontWeight.bold,\n                ),\n              ),\n              SizedBox(height: 12),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\n                children: [\n                  _buildGlobalStat(\n                    '${(socialProof.stats.threatsBlockedToday / 1000).toStringAsFixed(1)}K',\n                    'Threats Blocked Today',\n                  ),\n                  _buildGlobalStat(\n                    '${(socialProof.stats.usersProtected / 1000).toStringAsFixed(0)}K',\n                    'Users Protected',\n                  ),\n                  _buildGlobalStat(\n                    '${socialProof.stats.countriesActive}',\n                    'Countries Active',\n                  ),\n                ],\n              ),\n              SizedBox(height: 12),\n              ElevatedButton(\n                onPressed: () => _inviteFriends(),\n                child: Text('Protect Your Friends Too! (+100 XP)'),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.orange,\n                  foregroundColor: Colors.white,\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n  \n  Widget _buildGlobalStat(String value, String label) {\n    return Column(\n      children: [\n        Text(\n          value,\n          style: TextStyle(\n            color: Colors.green,\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n        Text(\n          label,\n          style: TextStyle(\n            color: Colors.white70,\n            fontSize: 10,\n          ),\n          textAlign: TextAlign.center,\n        ),\n      ],\n    );\n  }\n  \n  Widget _buildActionButtons() {\n    return Column(\n      children: [\n        Row(\n          children: [\n            Expanded(\n              child: ElevatedButton.icon(\n                onPressed: () => _scanForThreats(),\n                icon: Icon(Icons.security),\n                label: Text('Scan for Threats'),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.red,\n                  padding: EdgeInsets.symmetric(vertical: 16),\n                ),\n              ),\n            ),\n            SizedBox(width: 12),\n            Expanded(\n              child: ElevatedButton.icon(\n                onPressed: () => _generateQuantumKey(),\n                icon: Icon(Icons.vpn_key),\n                label: Text('Generate Key'),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.green,\n                  padding: EdgeInsets.symmetric(vertical: 16),\n                ),\n              ),\n            ),\n          ],\n        ),\n        SizedBox(height: 12),\n        Row(\n          children: [\n            Expanded(\n              child: ElevatedButton.icon(\n                onPressed: () => Navigator.pushNamed(context, '/battles'),\n                icon: Icon(Icons.group),\n                label: Text('Team Battles'),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.purple,\n                  padding: EdgeInsets.symmetric(vertical: 16),\n                ),\n              ),\n            ),\n            SizedBox(width: 12),\n            Expanded(\n              child: ElevatedButton.icon(\n                onPressed: () => Navigator.pushNamed(context, '/shop'),\n                icon: Icon(Icons.shopping_cart),\n                label: Text('Quantum Shop'),\n                style: ElevatedButton.styleFrom(\n                  backgroundColor: Colors.orange,\n                  padding: EdgeInsets.symmetric(vertical: 16),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ],\n    );\n  }\n  \n  Widget _buildBottomNavigation() {\n    return Container(\n      decoration: BoxDecoration(\n        gradient: LinearGradient(\n          colors: [Colors.black.withOpacity(0.8), Colors.blue.withOpacity(0.2)],\n        ),\n      ),\n      child: BottomNavigationBar(\n        type: BottomNavigationBarType.fixed,\n        backgroundColor: Colors.transparent,\n        selectedItemColor: Colors.blue,\n        unselectedItemColor: Colors.white60,\n        elevation: 0,\n        items: [\n          BottomNavigationBarItem(\n            icon: Icon(Icons.dashboard),\n            label: 'Dashboard',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.leaderboard),\n            label: 'Leaderboard',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.group_add),\n            label: 'Referrals',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.shopping_bag),\n            label: 'Shop',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.person),\n            label: 'Profile',\n          ),\n        ],\n        onTap: (index) {\n          switch (index) {\n            case 1:\n              Navigator.pushNamed(context, '/leaderboard');\n              break;\n            case 2:\n              Navigator.pushNamed(context, '/referrals');\n              break;\n            case 3:\n              Navigator.pushNamed(context, '/shop');\n              break;\n          }\n        },\n      ),\n    );\n  }\n  \n  void _shareProgress(GameStateManager gameState) async {\n    final viralEngine = context.read<ViralGrowthEngine>();\n    await viralEngine.shareAchievement('level_progress', {\n      'level': gameState.level,\n      'title': gameState.playerTitle,\n      'threats_blocked': gameState.threatsBlocked,\n    });\n    \n    // Reward for sharing\n    gameState.addXP(20, source: 'social_sharing');\n    gameState.addCoins(10);\n  }\n  \n  void _scanForThreats() {\n    final gameState = context.read<GameStateManager>();\n    \n    // Simulate threat detection\n    final random = Random();\n    final threatTypes = ['Malware', 'Phishing', 'Quantum Attack', 'Data Breach'];\n    final threatType = threatTypes[random.nextInt(threatTypes.length)];\n    final isCritical = random.nextDouble() < 0.1; // 10% chance of critical\n    \n    gameState.recordThreatDetection(threatType, critical: isCritical);\n    \n    if (isCritical) {\n      _confettiController.play();\n      _showCriticalThreatDialog(threatType);\n    }\n  }\n  \n  void _generateQuantumKey() {\n    final gameState = context.read<GameStateManager>();\n    \n    // Simulate key generation\n    final random = Random();\n    final keyTypes = ['RSA-2048', 'ECC-256', 'Quantum-Safe', 'Post-Quantum'];\n    final keyType = keyTypes[random.nextInt(keyTypes.length)];\n    final isQuantum = keyType.contains('Quantum');\n    \n    gameState.recordKeyGeneration(keyType, quantum: isQuantum);\n    \n    if (isQuantum) {\n      _showQuantumKeyDialog();\n    }\n  }\n  \n  void _inviteFriends() {\n    final viralEngine = context.read<ViralGrowthEngine>();\n    final gameState = context.read<GameStateManager>();\n    \n    final referralLink = viralEngine.generateReferralLink(\n      customMessage: 'Join me as a ${gameState.playerTitle}!',\n    );\n    \n    Share.share(\n      '🛡️ I\\'m a Level ${gameState.level} ${gameState.playerTitle} in PQShield!\\n'\n      '🚀 Join me in protecting against quantum threats!\\n'\n      '$referralLink',\n      subject: 'Join the Quantum Security Revolution!',\n    );\n    \n    // Reward for sharing\n    gameState.addXP(10, source: 'referral_share');\n    gameState.addCoins(5);\n  }\n  \n  void _showCriticalThreatDialog(String threatType) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        backgroundColor: Colors.red.withOpacity(0.9),\n        title: Text(\n          '🚨 CRITICAL THREAT BLOCKED!',\n          style: TextStyle(color: Colors.white),\n        ),\n        content: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Lottie.asset(\n              'assets/animations/shield_block.json',\n              width: 100,\n              height: 100,\n            ),\n            SizedBox(height: 16),\n            Text(\n              'You just blocked a critical $threatType!\\n\\n'\n              '+50 XP, +25 Coins earned!',\n              style: TextStyle(color: Colors.white),\n              textAlign: TextAlign.center,\n            ),\n          ],\n        ),\n        actions: [\n          TextButton(\n            onPressed: () {\n              Navigator.pop(context);\n              _shareCriticalThreat(threatType);\n            },\n            child: Text('Share Victory (+100 XP)', style: TextStyle(color: Colors.blue)),\n          ),\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: Text('Continue', style: TextStyle(color: Colors.white)),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  void _showQuantumKeyDialog() {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        backgroundColor: Colors.green.withOpacity(0.9),\n        title: Text(\n          '🔑 QUANTUM KEY GENERATED!',\n          style: TextStyle(color: Colors.white),\n        ),\n        content: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Lottie.asset(\n              'assets/animations/quantum_key.json',\n              width: 100,\n              height: 100,\n            ),\n            SizedBox(height: 16),\n            Text(\n              'You generated a quantum-safe key!\\n\\n'\n              '+25 XP, +15 Coins earned!',\n              style: TextStyle(color: Colors.white),\n              textAlign: TextAlign.center,\n            ),\n          ],\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.pop(context),\n            child: Text('Awesome!', style: TextStyle(color: Colors.white)),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  void _shareCriticalThreat(String threatType) {\n    final gameState = context.read<GameStateManager>();\n    \n    Share.share(\n      '🚨 Just blocked a CRITICAL $threatType with PQShield! 🛡️\\n'\n      '🚀 Level ${gameState.level} ${gameState.playerTitle}\\n'\n      '⚡ Join the quantum security revolution!\\n'\n      'https://pqshield.com/join?ref=${context.read<ViralGrowthEngine>().referralCode}',\n    );\n    \n    // Big reward for sharing critical threats\n    gameState.addXP(100, source: 'critical_threat_share');\n    gameState.addCoins(50);\n  }\n}\n\n/// 🎨 Custom Painter for Particle Background\nclass ParticleBackgroundPainter extends CustomPainter {\n  final double animationValue;\n  \n  ParticleBackgroundPainter(this.animationValue);\n  \n  @override\n  void paint(Canvas canvas, Size size) {\n    final paint = Paint()\n      ..color = Colors.blue.withOpacity(0.1)\n      ..style = PaintingStyle.fill;\n    \n    final random = Random(42); // Fixed seed for consistent particles\n    \n    for (int i = 0; i < 50; i++) {\n      final x = random.nextDouble() * size.width;\n      final y = random.nextDouble() * size.height;\n      final radius = random.nextDouble() * 3 + 1;\n      \n      // Animate particles\n      final animatedX = x + (animationValue * 20 * random.nextDouble());\n      final animatedY = y + (animationValue * 10 * random.nextDouble());\n      \n      canvas.drawCircle(\n        Offset(animatedX % size.width, animatedY % size.height),\n        radius,\n        paint,\n      );\n    }\n  }\n  \n  @override\n  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;\n}\n\n/// 🎬 Splash Screen with Viral Onboarding\nclass SplashScreen extends StatefulWidget {\n  @override\n  _SplashScreenState createState() => _SplashScreenState();\n}\n\nclass _SplashScreenState extends State<SplashScreen>\n    with TickerProviderStateMixin {\n  late AnimationController _logoController;\n  late AnimationController _textController;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    _logoController = AnimationController(\n      duration: Duration(seconds: 2),\n      vsync: this,\n    );\n    \n    _textController = AnimationController(\n      duration: Duration(seconds: 1),\n      vsync: this,\n    );\n    \n    _startAnimation();\n  }\n  \n  void _startAnimation() async {\n    await _logoController.forward();\n    await _textController.forward();\n    \n    // Initialize services\n    await _initializeServices();\n    \n    // Navigate to main app\n    Navigator.pushReplacement(\n      context,\n      MaterialPageRoute(builder: (context) => GameDashboard()),\n    );\n  }\n  \n  Future<void> _initializeServices() async {\n    final viralEngine = context.read<ViralGrowthEngine>();\n    final monetization = context.read<MonetizationManager>();\n    final socialProof = context.read<SocialProofEngine>();\n    \n    await Future.wait([\n      Future.delayed(Duration(seconds: 1)), // Simulate initialization\n      monetization.initialize(),\n    ]);\n    \n    viralEngine.initialize('user_123'); // Would use actual user ID\n    socialProof.initialize();\n  }\n  \n  @override\n  void dispose() {\n    _logoController.dispose();\n    _textController.dispose();\n    super.dispose();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            colors: [\n              Color(0xFF0A0A0A),\n              Color(0xFF1A1A2E),\n              Color(0xFF16213E),\n            ],\n          ),\n        ),\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              // Animated logo\n              AnimatedBuilder(\n                animation: _logoController,\n                builder: (context, child) {\n                  return Transform.scale(\n                    scale: _logoController.value,\n                    child: Container(\n                      width: 120,\n                      height: 120,\n                      decoration: BoxDecoration(\n                        shape: BoxShape.circle,\n                        gradient: LinearGradient(\n                          colors: [Colors.blue, Colors.purple],\n                        ),\n                        boxShadow: [\n                          BoxShadow(\n                            color: Colors.blue.withOpacity(0.5),\n                            blurRadius: 30,\n                            spreadRadius: 10,\n                          ),\n                        ],\n                      ),\n                      child: Center(\n                        child: Text(\n                          '🛡️',\n                          style: TextStyle(fontSize: 48),\n                        ),\n                      ),\n                    ),\n                  );\n                },\n              ),\n              \n              SizedBox(height: 30),\n              \n              // Animated text\n              AnimatedBuilder(\n                animation: _textController,\n                builder: (context, child) {\n                  return Opacity(\n                    opacity: _textController.value,\n                    child: Column(\n                      children: [\n                        Text(\n                          'PQShield',\n                          style: TextStyle(\n                            fontSize: 36,\n                            fontWeight: FontWeight.bold,\n                            color: Colors.white,\n                            shadows: [\n                              Shadow(\n                                color: Colors.blue.withOpacity(0.5),\n                                blurRadius: 10,\n                                offset: Offset(0, 2),\n                              ),\n                            ],\n                          ),\n                        ),\n                        SizedBox(height: 8),\n                        Text(\n                          'Quantum Guardian',\n                          style: TextStyle(\n                            fontSize: 18,\n                            color: Colors.blue,\n                            fontWeight: FontWeight.w500,\n                          ),\n                        ),\n                        SizedBox(height: 20),\n                        Text(\n                          'Protecting the quantum future',\n                          style: TextStyle(\n                            fontSize: 14,\n                            color: Colors.white70,\n                          ),\n                        ),\n                      ],\n                    ),\n                  );\n                },\n              ),\n              \n              SizedBox(height: 50),\n              \n              // Loading indicator\n              CircularProgressIndicator(\n                valueColor: AlwaysStoppedAnimation(Colors.blue),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n// Additional screens would be implemented here:\n// - TeamBattlesScreen\n// - QuantumShopScreen\n// - GlobalLeaderboardScreen\n// - ReferralCenterScreen\n\n/// 🚀 Export the viral app\nexport 'viral_pqshield_app.dart';"
