import{g as e,c as t,a as n}from"./vendor-react-xaB5yA9v.js";function s(e,t){for(var n=0;n<t.length;n++){const s=t[n];if("string"!=typeof s&&!Array.isArray(s))for(const t in s)if("default"!==t&&!(t in e)){const n=Object.getOwnPropertyDescriptor(s,t);n&&Object.defineProperty(e,t,n.get?n:{enumerable:!0,get:()=>s[t]})}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return i("refCount")}incRef(e){return i("incRef")}timerAvailable(){return!0}time(e){return i("time")}read(e){return i("read")}readSync(e){return i("readSync")}readToGPU(e,t){return i("readToGPU")}numDataIds(){return i("numDataIds")}disposeData(e,t){return i("disposeData")}write(e,t,n){return i("write")}move(e,t,n,s,r){return i("move")}createTensorFromGPUData(e,t,n){return i("createTensorFromGPUData")}memory(){return i("memory")}floatPrecision(){return i("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return i("dispose")}}function i(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function o(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,c(e,t,n)}function l(e,t,n){return Math.max(e,Math.min(t,n))}function u(e){return e%2==0?e:e+1}function c(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function h(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function d(e,t,n=""){h(g(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function p(e){h(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function f(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function m(e){return e%1==0}function b(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function x(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function y(e,t=e=>0,n,s){return new Promise((r,a)=>{let i=0;const o=()=>{if(e())return void r();i++;const l=t(i);null!=n&&i>=n?a():null!=s?s(o,l):setTimeout(o,l)};o()})}function k(e,t){let n=1,s=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);s=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function w(e,t){const n=t.length;return h((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),h(e.every(e=>m(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function v(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:w(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),s.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),s.push(o))}return{newShape:n,keptDims:s}}function I(e,t){return C(e,t)}function C(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function $(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function S(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function N(e){return"string"==typeof e||e instanceof String}function T(e){return"number"==typeof e}function E(e){return Array.isArray(e)?E(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":T(e)?"float32":N(e)?"string":"boolean"==typeof e?"bool":"float32"}function R(e){return!!(e&&e.constructor&&e.call&&e.apply)}function A(e,t){for(let n=t;n<e;++n)if(e%n===0)return n;return e}function F(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function D(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce((e,t)=>e*t)*(s?2:1);for(let t=0;t<a;t++)r[t]=D(e+t*o,i,n,s)}return r}function _(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce((e,t)=>e*t)*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return D(0,e,t,n)}function O(e,t){const n=L(e,t);for(let s=0;s<n.length;s++)n[s]=1;return n}function L(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function M(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return _(e,new Float32Array(n));if("int32"===t)return _(e,new Int32Array(n));if("bool"===t)return _(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function z(e){e.forEach(t=>{h(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function B(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let r=0;r<e.length-1;++r)s+=n[r]*e[r];return s}function P(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(e/n[r]),e-=s[r]*n[r];return s[s.length-1]=e,s}function W(e){return e&&e.then&&"function"==typeof e.then}const U="tfjsflags";class V{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=G,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&!H().getBool("IS_TEST")&&H().getBool("PROD"),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];!H().getBool("IS_TEST")&&H().getBool("PROD"),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(W(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);U in e&&e[U].split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)})}}function G(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function H(){return K}let j,K=null;function X(){if(null==j){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}j=e}return j}function q(e,t){const n=function(){const e=X();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const Y="Abs",Z="Acos",J="Acosh",Q="Add",ee="AddN",te="All",ne="Any",se="ArgMax",re="ArgMin",ae="Asin",ie="Asinh",oe="Atan",le="Atanh",ue="Atan2",ce="AvgPool",he="AvgPoolGrad",de="AvgPool3D",pe="AvgPool3DGrad",fe="BatchMatMul",ge="BatchToSpaceND",me="Bincount",be="BitwiseAnd",xe="BroadcastArgs",ye="Cast",ke="Ceil",we="ClipByValue",ve="Complex",Ie="ComplexAbs",Ce="Concat",$e="Conv2D",Se="Conv2DBackpropFilter",Ne="Conv2DBackpropInput",Te="Conv3D",Ee="Conv3DBackpropFilterV2",Re="Conv3DBackpropInputV2",Ae="Cos",Fe="Cosh",De="Cumprod",_e="Cumsum",Oe="CropAndResize",Le="DenseBincount",Me="DepthToSpace",ze="DepthwiseConv2dNative",Be="DepthwiseConv2dNativeBackpropFilter",Pe="DepthwiseConv2dNativeBackpropInput",We="Diag",Ue="Dilation2D",Ve="Dilation2DBackpropInput",Ge="Dilation2DBackpropFilter",He="RealDiv",je="Einsum",Ke="Elu",Xe="EluGrad",qe="Erf",Ye="Equal",Ze="Exp",Je="ExpandDims",Qe="Expm1",et="FFT",tt="Fill",nt="FlipLeftRight",st="Floor",rt="FloorDiv",at="FusedBatchNorm",it="GatherV2",ot="GatherNd",lt="Greater",ut="GreaterEqual",ct="Identity",ht="IFFT",dt="Imag",pt="IsFinite",ft="IsInf",gt="IsNan",mt="LeakyRelu",bt="Less",xt="LessEqual",yt="LinSpace",kt="Log",wt="Log1p",vt="LogicalAnd",It="LogicalNot",Ct="LogicalOr",$t="LRN",St="LRNGrad",Nt="Max",Tt="Maximum",Et="MaxPool",Rt="MaxPoolGrad",At="MaxPool3D",Ft="MaxPool3DGrad",Dt="MaxPoolWithArgmax",_t="Mean",Ot="Min",Lt="Minimum",Mt="MirrorPad",zt="Mod",Bt="Multinomial",Pt="Multiply",Wt="Neg",Ut="NotEqual",Vt="NonMaxSuppressionV3",Gt="NonMaxSuppressionV4",Ht="NonMaxSuppressionV5",jt="OnesLike",Kt="OneHot",Xt="Pack",qt="PadV2",Yt="Pow",Zt="Prelu",Jt="Prod",Qt="RaggedGather",en="RaggedRange",tn="RaggedTensorToTensor",nn="Range",sn="Real",rn="Reciprocal",an="Relu",on="Reshape",ln="ResizeNearestNeighbor",un="ResizeNearestNeighborGrad",cn="ResizeBilinear",hn="ResizeBilinearGrad",dn="Relu6",pn="Reverse",fn="Round",gn="Rsqrt",mn="ScatterNd",bn="TensorScatterUpdate",xn="SearchSorted",yn="Select",kn="Selu",wn="Slice",vn="Sin",In="Sinh",Cn="Sign",$n="Sigmoid",Sn="Softplus",Nn="Sqrt",Tn="Sum",En="SpaceToBatchND",Rn="SplitV",An="Softmax",Fn="SparseFillEmptyRows",Dn="SparseReshape",_n="SparseSegmentMean",On="SparseSegmentSum",Ln="SparseToDense",Mn="SquaredDifference",zn="Square",Bn="StaticRegexReplace",Pn="StridedSlice",Wn="StringNGrams",Un="StringSplit",Vn="StringToHashBucketFast",Gn="Sub",Hn="Tan",jn="Tanh",Kn="Tile",Xn="TopK",qn="Transform",Yn="Transpose",Zn="Unique",Jn="Unpack",Qn="UnsortedSegmentSum",es="ZerosLike",ts="Step",ns="RotateWithOffset",ss="_FusedMatMul",rs="FusedConv2D",as="FusedDepthwiseConv2D";function is(...e){!H().getBool("IS_TEST")&&H().getBool("PROD")}const os=q("kernelRegistry",()=>new Map),ls=q("gradRegistry",()=>new Map);function us(e,t){const n=fs(e,t);return os.get(n)}function cs(e){return ls.get(e)}function hs(e){const t=os.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function ds(e){const{kernelName:t,backendName:n}=e,s=fs(t,n);os.has(s)&&is(),os.set(s,e)}function ps(e){const{kernelName:t}=e;ls.has(t)&&H().getBool("DEBUG")&&is(),ls.set(t,e)}function fs(e,t){return`${t}_${e}`}function gs(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}var ms=xs,bs=null;try{bs=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(q_){}function xs(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function ys(e){return!0===(e&&e.__isLong__)}xs.prototype.__isLong__,Object.defineProperty(xs.prototype,"__isLong__",{value:!0}),xs.isLong=ys;var ks={},ws={};function vs(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=ws[e])?s:(n=Cs(e,(0|e)<0?-1:0,!0),r&&(ws[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=ks[e])?s:(n=Cs(e,e<0?-1:0,!1),r&&(ks[e]=n),n)}function Is(e,t){if(isNaN(e))return t?Ds:Fs;if(t){if(e<0)return Ds;if(e>=Es)return zs}else{if(e<=-0x8000000000000000)return Bs;if(e+1>=Rs)return Ms}return e<0?Is(-e,t).neg():Cs(e%Ts|0,e/Ts|0,t)}function Cs(e,t,n){return new xs(e,t,n)}xs.fromInt=vs,xs.fromNumber=Is,xs.fromBits=Cs;var $s=Math.pow;function Ss(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Fs;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return Ss(e.substring(1),t,n).neg();for(var r=Is($s(n,8)),a=Fs,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=Is($s(n,o));a=a.mul(u).add(Is(l))}else a=(a=a.mul(r)).add(Is(l))}return a.unsigned=t,a}function Ns(e,t){return"number"==typeof e?Is(e,t):"string"==typeof e?Ss(e,t):Cs(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}xs.fromString=Ss,xs.fromValue=Ns;var Ts=4294967296,Es=Ts*Ts,Rs=Es/2,As=vs(1<<24),Fs=vs(0);xs.ZERO=Fs;var Ds=vs(0,!0);xs.UZERO=Ds;var _s=vs(1);xs.ONE=_s;var Os=vs(1,!0);xs.UONE=Os;var Ls=vs(-1);xs.NEG_ONE=Ls;var Ms=Cs(-1,2147483647,!1);xs.MAX_VALUE=Ms;var zs=Cs(-1,-1,!0);xs.MAX_UNSIGNED_VALUE=zs;var Bs=Cs(0,-2147483648,!1);xs.MIN_VALUE=Bs;var Ps=xs.prototype;Ps.toInt=function(){return this.unsigned?this.low>>>0:this.low},Ps.toNumber=function(){return this.unsigned?(this.high>>>0)*Ts+(this.low>>>0):this.high*Ts+(this.low>>>0)},Ps.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Bs)){var t=Is(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=Is($s(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},Ps.getHighBits=function(){return this.high},Ps.getHighBitsUnsigned=function(){return this.high>>>0},Ps.getLowBits=function(){return this.low},Ps.getLowBitsUnsigned=function(){return this.low>>>0},Ps.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Bs)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},Ps.isZero=function(){return 0===this.high&&0===this.low},Ps.eqz=Ps.isZero,Ps.isNegative=function(){return!this.unsigned&&this.high<0},Ps.isPositive=function(){return this.unsigned||this.high>=0},Ps.isOdd=function(){return!(1&~this.low)},Ps.isEven=function(){return!(1&this.low)},Ps.equals=function(e){return ys(e)||(e=Ns(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},Ps.eq=Ps.equals,Ps.notEquals=function(e){return!this.eq(e)},Ps.neq=Ps.notEquals,Ps.ne=Ps.notEquals,Ps.lessThan=function(e){return this.comp(e)<0},Ps.lt=Ps.lessThan,Ps.lessThanOrEqual=function(e){return this.comp(e)<=0},Ps.lte=Ps.lessThanOrEqual,Ps.le=Ps.lessThanOrEqual,Ps.greaterThan=function(e){return this.comp(e)>0},Ps.gt=Ps.greaterThan,Ps.greaterThanOrEqual=function(e){return this.comp(e)>=0},Ps.gte=Ps.greaterThanOrEqual,Ps.ge=Ps.greaterThanOrEqual,Ps.compare=function(e){if(ys(e)||(e=Ns(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},Ps.comp=Ps.compare,Ps.negate=function(){return!this.unsigned&&this.eq(Bs)?Bs:this.not().add(_s)},Ps.neg=Ps.negate,Ps.add=function(e){ys(e)||(e=Ns(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=r+(65535&e.low))>>>16,u+=(c+=s+o)>>>16,l+=(u+=n+i)>>>16,l+=t+a,Cs((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},Ps.subtract=function(e){return ys(e)||(e=Ns(e)),this.add(e.neg())},Ps.sub=Ps.subtract,Ps.multiply=function(e){if(this.isZero())return Fs;if(ys(e)||(e=Ns(e)),bs)return Cs(bs.mul(this.low,this.high,e.low,e.high),bs.get_high(),this.unsigned);if(e.isZero())return Fs;if(this.eq(Bs))return e.isOdd()?Bs:Fs;if(e.eq(Bs))return this.isOdd()?Bs:Fs;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(As)&&e.lt(As))return Is(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,d=0;return h+=(d+=r*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=r*o)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*o)>>>16,c&=65535,u+=(c+=r*i)>>>16,u+=t*l+n*o+s*i+r*a,Cs((h&=65535)<<16|(d&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},Ps.mul=Ps.multiply,Ps.divide=function(e){if(ys(e)||(e=Ns(e)),e.isZero())throw Error("division by zero");var t,n,s;if(bs)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Cs((this.unsigned?bs.div_u:bs.div_s)(this.low,this.high,e.low,e.high),bs.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Ds:Fs;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Ds;if(e.gt(this.shru(1)))return Os;s=Ds}else{if(this.eq(Bs))return e.eq(_s)||e.eq(Ls)?Bs:e.eq(Bs)?_s:(t=this.shr(1).div(e).shl(1)).eq(Fs)?e.isNegative()?_s:Ls:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(Bs))return this.unsigned?Ds:Fs;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=Fs}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:$s(2,r-48),i=Is(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=Is(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=_s),s=s.add(i),n=n.sub(o)}return s},Ps.div=Ps.divide,Ps.modulo=function(e){return ys(e)||(e=Ns(e)),bs?Cs((this.unsigned?bs.rem_u:bs.rem_s)(this.low,this.high,e.low,e.high),bs.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},Ps.mod=Ps.modulo,Ps.rem=Ps.modulo,Ps.not=function(){return Cs(~this.low,~this.high,this.unsigned)},Ps.and=function(e){return ys(e)||(e=Ns(e)),Cs(this.low&e.low,this.high&e.high,this.unsigned)},Ps.or=function(e){return ys(e)||(e=Ns(e)),Cs(this.low|e.low,this.high|e.high,this.unsigned)},Ps.xor=function(e){return ys(e)||(e=Ns(e)),Cs(this.low^e.low,this.high^e.high,this.unsigned)},Ps.shiftLeft=function(e){return ys(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Cs(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Cs(0,this.low<<e-32,this.unsigned)},Ps.shl=Ps.shiftLeft,Ps.shiftRight=function(e){return ys(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Cs(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Cs(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},Ps.shr=Ps.shiftRight,Ps.shiftRightUnsigned=function(e){if(ys(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?Cs(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Cs(32===e?t:t>>>e-32,0,this.unsigned)},Ps.shru=Ps.shiftRightUnsigned,Ps.shr_u=Ps.shiftRightUnsigned,Ps.toSigned=function(){return this.unsigned?Cs(this.low,this.high,!1):this},Ps.toUnsigned=function(){return this.unsigned?this:Cs(this.low,this.high,!0)},Ps.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},Ps.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},Ps.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},xs.fromBytes=function(e,t,n){return n?xs.fromBytesLE(e,t):xs.fromBytesBE(e,t)},xs.fromBytesLE=function(e,t){return new xs(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},xs.fromBytesBE=function(e,t){return new xs(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const Ws=e(ms),Us=Ws||s({__proto__:null,default:Ws},[ms]);function Vs(e){return Us.fromString(e,!0,16)}const Gs=Vs("c3a5c85c97cb3127"),Hs=Vs("b492b66fbe98f273"),js=Vs("9ae16a3b2f90404f");function Ks(e){return e.xor(e.shru(47))}function Xs(e,t,n){const s=e.slice(t,t+n);return Us.fromBytes(Array.from(s),!0,!0)}function qs(e,t){return Xs(e,t,8)}function Ys(e,t){return Xs(e,t,4)}function Zs(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Js(e,t,n=Vs("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Qs(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Zs(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Zs(r,44)),[r.add(s),a.add(i)]}(qs(e,t),qs(e,t+8),qs(e,t+16),qs(e,t+24),n,s)}function er(e,t=e.length){const n=Us.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=js.add(2*t),s=qs(e,0).add(js),r=qs(e,t-8);return Js(Zs(r,37).mul(n).add(s),Zs(s,25).add(r).mul(n),n)}if(t>=4){const n=js.add(2*t);return Js(Ys(e,0).shl(3).add(t),Ys(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return Ks(js.mul(n).xor(Gs.mul(s))).mul(js)}return js}(e,t):function(e,t=e.length){const n=js.add(2*t),s=qs(e,0).mul(Hs),r=qs(e,8),a=qs(e,t-8).mul(n),i=qs(e,t-16).mul(js);return Js(Zs(s.add(r),43).add(Zs(a,30)).add(i),s.add(Zs(r.add(js),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=js.add(2*t),s=qs(e,0).mul(js),r=qs(e,8),a=qs(e,t-8).mul(n),i=qs(e,t-16).mul(js),o=Zs(s.add(r),43).add(Zs(a,30)).add(i),l=Js(o,s.add(Zs(r.add(js),18)).add(a),n),u=qs(e,16).mul(n),c=qs(e,24),h=o.add(qs(e,t-32)).mul(n),d=l.add(qs(e,t-24)).mul(n);return Js(Zs(u.add(c),43).add(Zs(h,30)).add(d),u.add(Zs(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Hs).add(113),a=Ks(r.mul(js).add(113)).mul(js),i=[Us.UZERO,Us.UZERO],o=[Us.UZERO,Us.UZERO];s=s.mul(js).add(qs(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Zs(s.add(r).add(i[0]).add(qs(e,l+8)),37).mul(Hs),r=Zs(r.add(i[1]).add(qs(e,l+48)),42).mul(Hs),s=s.xor(o[1]),r=r.add(i[0]).add(qs(e,l+40)),a=Zs(a.add(o[0]),33).mul(Hs),i=Qs(e,l,i[1].mul(Hs),s.add(o[0])),o=Qs(e,l+32,a.add(o[1]),r.add(qs(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Hs.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Zs(s.add(r).add(i[0]).add(qs(e,l+8)),37).mul(h),r=Zs(r.add(i[1]).add(qs(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(qs(e,l+40))),a=Zs(a.add(o[0]),33).mul(h),i=Qs(e,l,i[1].mul(h),s.add(o[0])),o=Qs(e,l+32,a.add(o[1]),r.add(qs(e,l+16))),[a,s]=[s,a],Js(Js(i[0],o[0],h).add(Ks(r).mul(Gs)).add(a),Js(i[1],o[1],h).add(s),h)}function tr(e,t){return"string"===t?rr(e):nr([e],t)}function nr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=or(e)),H().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function sr(){return H().platform.now()}function rr(e,t="utf-8"){return t=t||"utf-8",H().platform.encode(e,t)}function ar(e,t="utf-8"){return t=t||"utf-8",H().platform.decode(e,t)}function ir(e){return null!=H().platform.isTypedArray?H().platform.isTypedArray(e):gs(e)}function or(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||W(e)||null==e||ir(e)&&n)t.push(e);else if(Array.isArray(e)||ir(e))for(let s=0;s<e.length;++s)or(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let r=0;r<=s;r++)or(e[r],t,n)}return t}class lr{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new cr)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=sr();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:sr()-i})}if(H().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let o=0;o<s.length;o++){const e=s[o];e.data().then(t=>{ur(t,e.dtype)})}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),s,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])})})}}function ur(e,t,n){if("float32"!==t)return!1;for(let s=0;s<e.length;s++){const t=e[s];if(isNaN(t)||!isFinite(t))return!0}return!1}class cr{logKernelProfile(e,t,n,s,r,a){"number"==typeof s?x(`${s}ms`,9):s.error,x(e,25),t.rank,t.size,x(t.shape.toString(),14);let i="";for(const o in r){const e=r[o];if(null!=e){const n=e.shape||t.shape,s=n.length;i+=`${o}: ${s}D ${s>0?n:""} `}}}}function hr(e,t,n,s){const r=F(t),a=function(e,t,n,s){const r=f(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?gr(e):e;if(o>1)for(let u=0;u<r/a;u++){const e=u*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],dr(l[e+t],0,n).length)}return i}(e,t,n,r),i=t.length,o=fr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}function dr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:N(e)?`'${e}'`:"bool"===n?pr(e):parseFloat(e.toFixed(7)).toString(),x(s,t)}function pr(e){return 0===e?"false":"true"}function fr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[dr(gr(e)[0],0,n)]:"bool"===n?[pr(e[0])]:[e[0].toString()];if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=gr(s),a=gr(a)),["["+s.map((e,t)=>dr(e,r[t],n)).join(", ")+", ..., "+a.map((e,t)=>dr(e,r[o-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?gr(e):Array.from(e)).map((e,t)=>dr(e,r[t],n)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,d=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;d.push(...fr(e.slice(s,a),u,n,c,r,!1))}d.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;d.push(...fr(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let g=0;g<o;g++){const t=g*h,s=t+h;d.push(...fr(e.slice(t,s),u,n,c,r,g===o-1))}const p=2===l?",":"";d[0]="["+(o>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function gr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class mr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=f(e),null!=n){const e=n.length;h(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||C(t,this.size),this.strides=F(e)}set(e,...t){0===t.length&&(t=[0]),h(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const s of e){if(s<0||s>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let s=0;s<e.length-1;++s)n+=this.strides[s]*e[s];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return br().makeTensor(this.values,this.shape,this.dtype)}}let br=null,xr=null;class yr{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=f(e),this.strides=F(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return xr.buffer(this.shape,this.dtype,e)}bufferSync(){return xr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return _(this.shape,e,"complex64"===this.dtype)}arraySync(){return _(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=br().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map(e=>ar(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),br().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=br().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>ar(e))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await br().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),br().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return xr.print(this,e)}clone(){return this.throwIfDisposed(),xr.clone(this)}toString(e=!1){return hr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),xr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),br().makeVariable(this,e,t,n)}}function kr(){return q("Tensor",()=>yr)}Object.defineProperty(yr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),kr();class wr extends yr{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!g(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);br().disposeTensor(this),this.dataId=e.dataId,br().incRef(this,null)}dispose(){br().disposeVariable(this),this.isDisposedInternal=!0}}var vr,Ir,Cr,$r,Sr,Nr,Tr,Er,Rr,Ar;Object.defineProperty(wr,Symbol.hasInstance,{value:e=>e instanceof yr&&null!=e.assign&&e.assign instanceof Function}),(Ir=vr||(vr={})).R0="R0",Ir.R1="R1",Ir.R2="R2",Ir.R3="R3",Ir.R4="R4",Ir.R5="R5",Ir.R6="R6",($r=Cr||(Cr={})).float32="float32",$r.int32="int32",$r.bool="int32",$r.complex64="complex64",(Nr=Sr||(Sr={})).float32="float32",Nr.int32="int32",Nr.bool="bool",Nr.complex64="complex64",(Er=Tr||(Tr={})).float32="float32",Er.int32="float32",Er.bool="float32",Er.complex64="complex64",(Ar=Rr||(Rr={})).float32="complex64",Ar.int32="complex64",Ar.bool="complex64",Ar.complex64="complex64";const Fr={float32:Tr,int32:Cr,bool:Sr,complex64:Rr};function Dr(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Fr[e][t]}function _r(e){return Dr(e,"int32")}function Or(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function Lr(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function Mr(e,t){if(e.dtype===t.dtype)return[e,t];const n=Dr(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function zr(e){const t=[];return Br(e,t,new Set),t}function Br(e,t,n){if(null==e)return;if(e instanceof yr)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const a in r){const e=r[a];n.has(e)||(n.add(e),Br(e,t,n))}}function Pr(e){return null!=e.kernelName}class Wr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ur{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Wr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void(await this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(is(),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new lr(this.backendInstance),!0}setupRegisteredKernels(){hs(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){hs(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof a||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(e=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,is(),is(e.stack||e.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(n){return is(),is(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(n),()=>(n=t(),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(s){throw t(),s}}nextTensorId(){return Ur.nextTensorId++}nextVariableId(){return Ur.nextVariableId++}clone(e){const t=Gr.runKernel(ct,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e};return Gr.runKernel(ye,t,{dtype:"float32"})}}),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==us(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach(e=>{r+="complex64"===e.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Pr(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Pr(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=us(t,this.backendName);h(null!=l,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map(e=>this.keep(this.clone(e))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy(()=>t(this.backend,r));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,d=Pr(e)?null:e.backwardsFunc;let p;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()}),s&&this.addTapeNode(l,u,t,d,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map(e=>null!=u[e]?u[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const s=cs(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(h(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const i=n.filter((e,t)=>r[t]);return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&N(e[0])&&(r=e.map(e=>rr(e)));const a=s.write(r,t,n),i=new yr(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new yr(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new wr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*S(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof wr||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*S(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const s of this.state.activeProfile.kernels)s.kernelTimeMs=await s.kernelTimeMs,s.extraInfo=await s.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=cs(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],s=L(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e}),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=zr(e),n=new Set(t.map(e=>e.id));for(let r=0;r<this.state.activeScope.track.length;r++){const e=this.state.activeScope.track[r];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==s.id||this.track(e)})}gradients(e,t,n,s=!1){if(h(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));h(r instanceof yr,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<e.length;l++){const n=e[l],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(s[i.id]){n.outputs.forEach(e=>s[e.id]=!0),o=!0,r[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let l=e.length-1;l>=0;l--){const t=e[l],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let l=0;l<e.length;l++){const t=e[l];if(r[t.id]&&i[t.id]){const e={};for(const r in t.inputs){const n=t.inputs[r];s[n.id]&&(e[r]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[r.id]=null==n?function(e){const t=O(f(e),"float32");return Gr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach(t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[t]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!g(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,e=>this.tidy(e),Hr);const s=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:r,grads:s}})}customGrad(e){return h(R(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;h(t.every(e=>e instanceof yr),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const s={};return t.forEach((e,t)=>{s[t]=e}),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),h(n.value instanceof yr,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),h(R(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];h(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),h(a.every(e=>e instanceof yr),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((e,t)=>{i[t]=()=>e}),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=sr(),n=await this.backend.time(e);return n.wallMs=sr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Wr;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Vr(){const e=X();if(null==e._tfengine){const t=new V(e);e._tfengine=new Ur(t)}var t;return t=e._tfengine.ENV,K=t,br=()=>e._tfengine,e._tfengine}Ur.nextTensorId=0,Ur.nextVariableId=0;const Gr=Vr();function Hr(e,t){const n={a:e,b:t};return Gr.runKernel(Q,n)}function jr(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Kr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Xr=H();function qr(e,t){let n=e;if(ir(e))return"string"===t?[]:[e.length];if(Or(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(Lr(e))return[e.buffer.size/(null==t?4:S(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||ir(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&H().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Yr(e,s,[]),s}function Yr(e,t,n){if(n=n||[],!Array.isArray(e)&&!ir(e))return void h(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);h(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),h(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const s=t.slice(1);for(let r=0;r<e.length;++r)Yr(e[r],s,n.concat(r))}function Zr(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Jr(e,t,n,s="numeric"){if(e instanceof kr())return Zr(s,e.dtype,t,n),e;let r=E(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Zr(s,r,t,n),null==e||!ir(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=qr(e,r);ir(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?nr(e,r):or(e,[],!0);return Gr.makeTensor(i,a,r)}function Qr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,r)=>Jr(e,`${t}[${r}]`,n,s))}function ea(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{Gr.startScope(n);try{const t=s(...e);return W(t),Gr.endScope(t),t}catch(t){throw Gr.endScope(null),t}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}Xr.registerFlag("DEBUG",()=>!1,e=>{}),Xr.registerFlag("IS_BROWSER",()=>Kr()),Xr.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Xr.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Xr.registerFlag("IS_SAFARI",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),Xr.registerFlag("PROD",()=>!1),Xr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Xr.getBool("DEBUG")),Xr.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Xr.registerFlag("IS_TEST",()=>!1),Xr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>Xr.getBool("DEBUG")),Xr.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Xr.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Xr.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const ta=ea({complex_:function(e,t){const n=Jr(e,"real","complex"),s=Jr(t,"imag","complex");d(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Gr.runKernel(ve,r)}});function na(e,t,n,s){if(null==s)s=E(e);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Lr(e)||Or(e)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return Gr.backend.createTensorFromGPUData(e,t||n,s)}if(!ir(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){z(t);const e=f(t),s=f(n);h(e===s,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`);for(let r=0;r<n.length;++r){const e=n[r],s=r!==n.length-1||e!==f(t.slice(r));h(n[r]===t[r]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return ir(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?nr(e,s):or(e,[],!0),Gr.makeTensor(e,t,s)}function sa(e,t,n){return na(e,t,qr(e,n),n)}class ra{static join(e){return new ra(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map(e=>ir(e)?e.buffer:e)).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=t+s.byteLength;this.shards.push({buffer:s,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),r=new Uint8Array(s);let a=0;for(let i=n;i<this.shards.length;i++){const n=this.shards[i],s=e+a-n.start,o=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,s,l-s);if(r.set(u,o),a+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const r=Math.floor((s-n)/2)+n,a=t(e[r]);if(0===a)return r;a<0?s=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function aa(){return Gr}function ia(){return Gr.memory()}function oa(e,t){return Gr.tidy(e,t)}function la(e){zr(e).forEach(e=>e.dispose())}function ua(e){return Gr.keep(e)}function ca(e){return Gr.setBackend(e)}function ha(e,t,n=1){return Gr.registerBackend(e,t,n)}async function da(e,t){const n=[],s=[],r=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise(async e=>{const t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,s=new Uint8Array(n);let r=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);s.set(n,r),r+=4,s.set(e,r),r+=e.length}e(s)});s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:pa(await Promise.all(s)),specs:n}}function pa(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});const s=new Uint8Array(t);let r=0;return n.forEach(e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength}),s.buffer}const fa="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ga(e){return fa?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function ma(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ga(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ga(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new ra(e.weightData).byteLength}}class ba{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ba.instance&&(ba.instance=new ba),ba.instance}static registerSaveRouter(e){ba.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ba.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ba.getHandlers(e,"save")}static getLoadHandlers(e,t){return ba.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?ba.getInstance().loadRouters:ba.getInstance().saveRouters).forEach(t=>{const r=t(e,n);null!==r&&s.push(r)}),s}}const xa="tensorflowjs",ya="models_store",ka="model_info_store";function wa(){if(!H().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function va(e){const t=e.result;t.createObjectStore(ya,{keyPath:"modelPath"}),t.createObjectStore(ka,{keyPath:"modelPath"})}class Ia{constructor(e){if(this.indexedDB=wa(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const s=this.indexedDB.open(xa,1);s.onupgradeneeded=()=>va(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(ya,"readonly"),s=t.objectStore(ya).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{t.weightData=ra.join(t.weightData);const s=ma(t),i=r.transaction(ka,"readwrite");let o,l,u=i.objectStore(ka);try{o=u.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(a){return n(a)}o.onsuccess=()=>{l=r.transaction(ya,"readwrite");const o=l.objectStore(ya);let c;try{c=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(a){return n(a)}c.onsuccess=()=>e({modelArtifactsInfo:s}),c.onerror=e=>{u=i.objectStore(ka);const t=u.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(c.error)),t.onerror=e=>(r.close(),n(c.error))}},o.onerror=e=>(r.close(),n(o.error)),i.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)})}}Ia.URL_SCHEME="indexeddb://";const Ca=e=>{return H().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ia.URL_SCHEME)?(t=e.slice(Ia.URL_SCHEME.length),new Ia(t)):null;var t};ba.registerSaveRouter(Ca),ba.registerLoadRouter(Ca);class $a{constructor(){this.indexedDB=wa()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(xa,1);n.onupgradeneeded=()=>va(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(ka,"readonly"),a=r.objectStore(ka).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(Ia.URL_SCHEME)?t.slice(Ia.URL_SCHEME.length):t,new Promise((t,n)=>{const s=this.indexedDB.open(xa,1);s.onupgradeneeded=()=>va(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(ka,"readwrite"),i=a.objectStore(ka),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(ya,"readwrite");const s=l.objectStore(ya).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)})}}const Sa="/",Na="tensorflowjs_models",Ta="info",Ea="model_topology",Ra="weight_specs",Aa="weight_data",Fa="model_metadata";function Da(e){return{info:[Na,e,Ta].join(Sa),topology:[Na,e,Ea].join(Sa),weightSpecs:[Na,e,Ra].join(Sa),weightData:[Na,e,Aa].join(Sa),modelMetadata:[Na,e,Fa].join(Sa)}}function _a(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Oa(e){const t=e.split(Sa);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Sa)}class La{constructor(e){if(!H().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Da(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),s=JSON.stringify(e.weightSpecs),r=ma(e),a=ra.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,s),this.LS.setItem(this.keys.weightData,function(e){if(fa)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let s=0,r=t.length;s<r;s++)n+=String.fromCharCode(t[s]);return btoa(n)}(a));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:r}}catch(t){throw _a(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(fa){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let s=0;s<t.length;++s)n.set([t.charCodeAt(s)],s);return n.buffer}(a),t}}La.URL_SCHEME="localstorage://";const Ma=e=>{return H().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(La.URL_SCHEME)?(t=e.slice(La.URL_SCHEME.length),new La(t)):null;var t};ba.registerSaveRouter(Ma),ba.registerLoadRouter(Ma);class za{constructor(){h(H().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),h("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=Na+Sa,n=Sa+Ta;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[Oa(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=Da(e=(t=e).startsWith(La.URL_SCHEME)?t.slice(La.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return _a(n),s}}class Ba{constructor(){this.managers={}}static getInstance(){return null==Ba.instance&&(Ba.instance=new Ba),Ba.instance}static registerManager(e,t){h(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),h(e.length>0,()=>"scheme must not be an empty string.");const n=Ba.getInstance();h(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=Ba.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ba.getInstance().managers)}}class Pa{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&H().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(e,t)}isTypedArray(e){return gs(e)}}if(H().get("IS_BROWSER")){H().setPlatform("browser",new Pa);try{Ba.registerManager(La.URL_SCHEME,new za)}catch(Y_){}try{Ba.registerManager(Ia.URL_SCHEME,new $a)}catch(Y_){}}let Wa;function Ua(e,t="float32",n){return t=t||"float32",z(e),new mr(e,t,n)}H().get("IS_NODE")&&!H().get("IS_BROWSER")&&H().setPlatform("node",new class{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=H().global.fetch?H().global.fetch(e,t):(null==Wa&&(Wa=require("node-fetch")),Wa(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const Va=ea({cast_:function(e,t){const n=Jr(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Gr.runKernel(ye,s,r)}}),Ga=ea({clone_:function(e){const t={x:Jr(e,"x","clone","string_or_numeric")};return Gr.runKernel(ct,t)}});Vr(),xr={buffer:Ua,cast:Va,clone:Ga,print:function(e,t=!1){}};const Ha=ea({add_:function(e,t){let n=Jr(e,"a","add"),s=Jr(t,"b","add");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(Q,r)}}),ja=ea({floorDiv_:function(e,t){let n=Jr(e,"a","floorDiv"),s=Jr(t,"b","floorDiv");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(rt,r)}}),Ka=ea({div_:function(e,t){let n=Jr(e,"a","div"),s=Jr(t,"b","div");if([n,s]=Mr(n,s),"int32"===n.dtype&&"int32"===s.dtype)return ja(n,s);const r={a:n,b:s};return Gr.runKernel(He,r,{})}}),Xa=ea({mul_:function(e,t){let n=Jr(e,"a","mul"),s=Jr(t,"b","mul");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(Pt,r)}}),qa=ea({abs_:function(e){const t=Jr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Gr.runKernel(Ie,e)}{const e={x:t};return Gr.runKernel(Y,e)}}}),Ya=ea({acos_:function(e){const t={x:Jr(e,"x","acos")};return Gr.runKernel(Z,t)}}),Za=ea({acosh_:function(e){const t={x:Jr(e,"x","acosh")};return Gr.runKernel(J,t)}}),Ja=ea({all_:function(e,t=null,n=!1){const s={x:Jr(e,"x","all","bool")},r={axis:t,keepDims:n};return Gr.runKernel(te,s,r)}}),Qa=ea({any_:function(e,t=null,n=!1){const s={x:Jr(e,"x","any","bool")},r={axis:t,keepDims:n};return Gr.runKernel(ne,s,r)}}),ei=ea({argMax_:function(e,t=0){const n={x:Jr(e,"x","argMax")},s={axis:t};return Gr.runKernel(se,n,s)}}),ti=ea({argMin_:function(e,t=0){const n={x:Jr(e,"x","argMin")},s={axis:t};return Gr.runKernel(re,n,s)}}),ni=ea({asin_:function(e){const t={x:Jr(e,"x","asin")};return Gr.runKernel(ae,t)}}),si=ea({asinh_:function(e){const t={x:Jr(e,"x","asinh")};return Gr.runKernel(ie,t)}}),ri=ea({atan_:function(e){const t={x:Jr(e,"x","atan")};return Gr.runKernel(oe,t)}}),ai=ea({atan2_:function(e,t){let n=Jr(e,"a","atan2"),s=Jr(t,"b","atan2");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(ue,r)}}),ii=ea({atanh_:function(e){const t={x:Jr(e,"x","atanh")};return Gr.runKernel(le,t)}});function oi(e,t,n,s,r="NHWC",a){return ci(e,[...t,e[3]],n,a,s,null,null,ki(r))}function li(e,t,n,s,r,a,i="channelsLast"){const[o,l]=pi(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return ci(e,u,n,s,r,a,!1,i)}function ui(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=fi(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return hi(e,c,n,s,r,!1,h,a)}function ci(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[d,p,,f]=t,[g,m]=pi(n),[b,x]=pi(s),y=gi(d,b),k=gi(p,x),{padInfo:w,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=di(e,t,n));const a=e[1];return[mi((e[0]-t+2*s)/n+1,r),mi((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),d=e-l,p=Math.floor(o/2);u={top:l,bottom:d,left:p,right:o-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],g="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=mi((t-a+d+p)/s+1,o),h=mi((n-i+f+g)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,y,k,a,o),C=i?f*h:f;let $;return"channelsFirst"===o?$=[l,C,v,I]:"channelsLast"===o&&($=[l,v,I,C]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:C,padInfo:w,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:k,dilationHeight:b,dilationWidth:x,inShape:e,outShape:$,filterShape:t}}function hi(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,d]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,d,u,c,h]=e}const[p,f,g,,m]=t,[b,x,y]=fi(n),[k,w,v]=fi(s),I=gi(p,k),C=gi(f,w),$=gi(g,v),{padInfo:S,outDepth:N,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,d,p,f;if("valid"===e&&(e=0),"number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const g=function(e,t,n,s,r,a){null==r&&(r=di(e,t[0],s[0]));const i=[0,0,0,1];for(let o=0;o<3;o++)e[o]+2*r>=t[o]&&(i[o]=mi((e[o]-t[o]+2*r)/s[o]+1,a));return i}([t,n,s,1],[o,l,u],0,[r,a,i],e,c);d=g[0],p=g[1],f=g[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{d=Math.ceil(t/r),p=Math.ceil(n/a),f=Math.ceil(s/i);const e=(d-1)*r+o-t,c=(p-1)*a+l-n,g=(f-1)*i+u-s,m=Math.floor(e/2),b=e-m,x=Math.floor(c/2),y=c-x,k=Math.floor(g/2);h={top:x,bottom:y,left:k,right:g-k,front:m,back:b,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,b,x,y,I,C,$,o),R=a?m*d:m;let A;return"channelsFirst"===i?A=[l,R,N,T,E]:"channelsLast"===i&&(A=[l,N,T,E,R]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:N,outHeight:T,outWidth:E,outChannels:R,padInfo:S,strideDepth:b,strideHeight:x,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:I,effectiveFilterHeight:C,effectiveFilterWidth:$,dilationDepth:k,dilationHeight:w,dilationWidth:v,inShape:e,outShape:A,filterShape:t}}function di(e,t,n,s=1){const r=gi(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function pi(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function fi(e){return"number"==typeof e?[e,e,e]:e}function gi(e,t){return t<=1?e:e+(e-1)*(t-1)}function mi(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function bi(e){const[t,n,s]=pi(e);return 1===t&&1===n&&1===s}function xi(e,t){return bi(e)||bi(t)}function yi(e){return pi(e).every(e=>e>0)}function ki(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function wi(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)h(m(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{h(m(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}const vi=ea({reshape_:function(e,t){const n={x:Jr(e,"x","reshape","string_or_numeric")},s={shape:t};return Gr.runKernel(on,n,s)}}),Ii=ea({avgPool_:function(e,t,n,s,r){const a=Jr(e,"x","avgPool","float32");h(xi(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=vi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),h(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),wi("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Gr.runKernel(ce,l,u);return c=Va(c,a.dtype),o?vi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Ci=ea({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Jr(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=vi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),h("NDHWC"===a,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),h("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`),wi("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let d=Gr.runKernel(de,u,c);return d=Va(d,o.dtype),l?vi(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),$i=ea({concat_:function(e,t=0){h(e.length>=1,()=>"Pass at least one tensor to concat");const n=Qr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length)return Ga(n[0]);const s=n,r={axis:t};return Gr.runKernel(Ce,s,r)}}),Si=ea({matMul_:function(e,t,n=!1,s=!1){let r=Jr(e,"a","matMul"),a=Jr(t,"b","matMul");[r,a]=Mr(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Gr.runKernel(fe,i,o)}}),Ni=ea({sigmoid_:function(e){const t={x:Jr(e,"x","sigmoid","float32")};return Gr.runKernel($n,t)}}),Ti=ea({slice_:function(e,t,n){const s=Jr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Gr.runKernel(wn,r,a)}}),Ei=ea({tanh_:function(e){const t={x:Jr(e,"x","tanh","float32")};return Gr.runKernel(jn,t)}}),Ri=ea({batchToSpaceND_:function(e,t,n){const s=Jr(e,"x","batchToSpaceND"),r=t.reduce((e,t)=>e*t);h(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),h(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),h(s.shape[0]%r===0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`);const a={x:s},i={blockShape:t,crops:n};return Gr.runKernel(ge,a,i)}}),Ai=ea({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Jr(e,"x","batchNorm"),o=Jr(t,"mean","batchNorm"),l=Jr(n,"variance","batchNorm");let u,c;null!=r&&(u=Jr(r,"scale","batchNorm")),null!=s&&(c=Jr(s,"offset","batchNorm")),h(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:function(e){let t;return t=0===e.rank||1===e.rank?vi(e,[1,1,1,e.size]):2===e.rank?vi(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?vi(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:a},f=Gr.runKernel(at,d,p);return vi(f,i.shape)}}),Fi=ea({batchNorm2d_:function(e,t,n,s,r,a){const i=Jr(e,"x","batchNorm"),o=Jr(t,"mean","batchNorm"),l=Jr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Jr(r,"scale","batchNorm")),null!=s&&(c=Jr(s,"offset","batchNorm")),h(2===i.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),h(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),h(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&h(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&h(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ai(i,o,l,c,u,a)}}),Di=ea({batchNorm3d_:function(e,t,n,s,r,a){const i=Jr(e,"x","batchNorm"),o=Jr(t,"mean","batchNorm"),l=Jr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Jr(r,"scale","batchNorm")),null!=s&&(c=Jr(s,"offset","batchNorm")),h(3===i.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),h(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),h(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&h(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&h(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ai(i,o,l,c,u,a)}}),_i=ea({batchNorm4d_:function(e,t,n,s,r,a){const i=Jr(e,"x","batchNorm"),o=Jr(t,"mean","batchNorm"),l=Jr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Jr(r,"scale","batchNorm")),null!=s&&(c=Jr(s,"offset","batchNorm")),h(4===i.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),h(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),h(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&h(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&h(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ai(i,o,l,c,u,a)}}),Oi=ea({bincount_:function(e,t,n){const s=Jr(e,"x","bincount"),r=Jr(t,"weights","bincount");h("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),h(n>=0,()=>`size must be non-negative, but got ${n}.`),h(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);const a={x:s,weights:r},i={size:n};return Gr.runKernel(me,a,i)}}),Li=ea({broadcastTo_:function(e,t){let n=Jr(e,"broadcastTo","x");const s=n.shape;if(z(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=vi(n,e)}const r=n.shape,a=Array.from(t);for(let l=t.length-1;l>=0;l--)if(r[l]===t[l])a[l]=1;else if(1!==n.shape[l])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return Ga(n);const i={x:n},o={reps:a};return Gr.runKernel(Kn,i,o)}}),Mi=ea({ceil_:function(e){const t={x:Jr(e,"x","ceil","float32")};return Gr.runKernel(ke,t)}});function zi(e,t,n){z(e);const s={shape:e,value:t,dtype:n=n||E(t)};return Gr.runKernel(tt,{},s)}const Bi=ea({clipByValue_:function(e,t,n){const s=Jr(e,"x","clipByValue");if(h(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n)return zi(s.shape,t,s.dtype);const r={x:s},a={clipValueMin:t,clipValueMax:n};return Gr.runKernel(we,r,a)}}),Pi=ea({concat1d_:function(e){return $i(e,0)}}),Wi=ea({concat2d_:function(e,t){return $i(e,t)}}),Ui=ea({concat3d_:function(e,t){return $i(e,t)}}),Vi=ea({concat4d_:function(e,t){return $i(e,t)}}),Gi=ea({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Jr(e,"x","conv2d","float32"),l=Jr(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=vi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),h(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),h(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),wi("conv2d",s,i);const d="NHWC"===r?u.shape[3]:u.shape[1];h(d===l.shape[2],()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`),h(xi(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),h(yi(a),()=>"Error in conv2D: Dilated rates should be larger than 0."),h(yi(n),()=>"Error in conv2D: Strides should be larger than 0.");const p={x:u,filter:l},f={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},g=Gr.runKernel($e,p,f);return c?vi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),Hi=ea({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Jr(e,"x","conv1d"),l=Jr(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=vi(o,[1,o.shape[0],o.shape[1]])),h(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),h(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),wi("conv1d",s,i),h(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),h(xi(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),h(yi(a),()=>"Error in conv1D: Dilated rates should be larger than 0."),h(yi(n),()=>"Error in conv1D: Stride should be larger than 0."),h("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const d=vi(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=vi(u,[u.shape[0],1,u.shape[1],u.shape[2]]),f=Gi(p,d,[1,n],s,"NHWC",[1,a],i);return vi(f,c?[f.shape[2],f.shape[3]]:[f.shape[0],f.shape[2],f.shape[3]])}}),ji=ea({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){h(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=vi(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),h(4===o.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`),h(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),h(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);const c="NHWC"===a?o[3]:o[1],d="NHWC"===a?l.shape[3]:l.shape[1];h(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),h(d===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[3]}.`),wi("conv2dDerInput",r,i);const p={dy:l,filter:n},f={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},g=Gr.runKernel(Ne,p,f);return u?vi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),Ki=ea({conv2dTranspose_:function(e,t,n,s,r,a){const i=Jr(e,"x","conv2dTranspose"),o=Jr(t,"filter","conv2dTranspose");return ji(n,i,o,s,r,"NHWC",a)}}),Xi=ea({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Jr(e,"x","conv3d"),o=Jr(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=vi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),h(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),h(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),h(xi(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),h("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),h(yi(a),()=>"Error in conv3D: Dilated rates should be larger than 0."),h(yi(n),()=>"Error in conv3D: Strides should be larger than 0.");const c={x:l,filter:o},d={strides:n,pad:s,dataFormat:r,dilations:a},p=Gr.runKernel(Te,c,d);return u?vi(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),qi=ea({conv3DBackpropInput_:function(e,t,n,s,r){h(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=vi(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];h(5===a.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`),h(5===i.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),h(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),h(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),h(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i,filter:n},d={pad:r,strides:s,inputShape:a},p=Gr.runKernel(Re,c,d);return o?vi(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Yi=ea({conv3dTranspose_:function(e,t,n,s,r){const a=Jr(e,"x","conv3dTranspose"),i=Jr(t,"filter","conv3dTranspose");return qi(n,a,i,s,r)}}),Zi=ea({cos_:function(e){const t={x:Jr(e,"x","cos","float32")};return Gr.runKernel(Ae,t)}}),Ji=ea({cosh_:function(e){const t={x:Jr(e,"x","cosh","float32")};return Gr.runKernel(Fe,t)}}),Qi=ea({cumprod_:function(e,t=0,n=!1,s=!1){const r={x:Jr(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return Gr.runKernel(De,r,a)}}),eo=ea({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Jr(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Gr.runKernel(_e,r,a)}}),to=ea({denseBincount_:function(e,t,n,s=!1){const r=Jr(e,"x","denseBincount"),a=Jr(t,"weights","denseBincount");h("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),h(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),h(n>=0,()=>`size must be non-negative, but got ${n}.`),h(a.size===r.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`);const i={x:r,weights:a},o={size:n,binaryOutput:s};return Gr.runKernel(Le,i,o)}}),no=ea({depthToSpace_:function(e,t,n="NHWC"){const s=Jr(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];h(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),h(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),h(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`),h(i%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`);const o={x:s},l={blockSize:t,dataFormat:n};return Gr.runKernel(Me,o,l)}}),so=ea({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Jr(e,"x","depthwiseConv2d","float32"),l=Jr(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=vi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),h(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),h(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const d="NHWC"===r?u.shape[3]:u.shape[1];h(d===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${l.shape[2]}.`),wi("depthwiseConv2d",s,i);const p={x:u,filter:l},f={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},g=Gr.runKernel(ze,p,f);return c?vi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),ro=ea({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Jr(e,"x","dilation2d"),o=Jr(t,"filter","dilation2d");h(3===i.rank||4===i.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),h(3===o.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`),h("NHWC"===a,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);let l=i,u=!1;3===i.rank&&(l=vi(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0),h(l.shape[3]===o.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`);const c={x:l,filter:o},d={strides:n,pad:s,dilations:r},p=Gr.runKernel(Ue,c,d);return u?vi(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});function ao(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function io(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function oo(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let r=0;r<n;r++){let a=e[e.length-r-1];null==a&&(a=1);let i=t[t.length-r-1];if(null==i&&(i=1),1===a)s[n-r-1]=i;else if(1===i)s[n-r-1]=a;else{if(a!==i)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);s[n-r-1]=a}}return s}const lo=ea({equal_:function(e,t){let n=Jr(e,"a","equal","string_or_numeric"),s=Jr(t,"b","equal","string_or_numeric");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(Ye,r)}}),uo=ea({where_:function(e,t,n){const s=Jr(t,"a","where"),r=Jr(n,"b","where"),a=Jr(e,"condition","where","bool"),i=oo(oo(a.shape,s.shape),r.shape),o={condition:Li(a,i),t:Li(s,i),e:Li(r,i)};return Gr.runKernel(yn,o)}}),co=ea({zerosLike_:function(e){const t={x:Jr(e,"x","zerosLike")};return Gr.runKernel(es,t)}}),ho=ea({divNoNan_:function(e,t){let n=Jr(e,"a","div"),s=Jr(t,"b","div");[n,s]=Mr(n,s);const r=Ka(n,s),a=co(r),i=lo(s,a);return uo(i,a,r)}}),po=ea({dot_:function(e,t){const n=Jr(e,"t1","dot"),s=Jr(t,"t2","dot");h(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(h(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===n.rank&&1===s.rank){const e=vi(n,[1,-1]),t=vi(s,[-1,1]),r=Si(e,t);return vi(r,[])}if(1===n.rank&&2===s.rank){const e=vi(n,[1,-1]),t=vi(s,[s.shape[0],s.shape[1]]),r=Si(e,t);return vi(r,[r.size])}if(2===n.rank&&1===s.rank){const e=vi(s,[-1,1]),t=Si(n,e);return vi(t,[t.size])}{const e=vi(s,[s.shape[0],s.shape[1]]);return Si(n,e)}}}),fo=ea({einsum_:function(e,...t){const n=t.map((e,t)=>Jr(e,`tensors${t}`,"einsum")),s={equation:e};return Gr.runKernel(je,n,s)}}),go=ea({elu_:function(e){const t={x:Jr(e,"x","elu","float32")};return Gr.runKernel(Ke,t)}}),mo=ea({erf_:function(e){let t=Jr(e,"x","erf");h("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=Va(t,"float32"));const n={x:t};return Gr.runKernel(qe,n)}});function bo(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function xo(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function yo(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map(t=>e[t])]}function ko(e,t){return xo(e,t.map(e=>1),t)}function wo(e,t,n){h(bo(t,n),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`)}function vo(e,t){if(bo(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach(e=>n.push(e)),n}function Io(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Co(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const $o=ea({max_:function(e,t=null,n=!1){const s={x:Jr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Gr.runKernel(Nt,s,r)}}),So=ea({min_:function(e,t=null,n=!1){const s={x:Jr(e,"x","min")},r={axis:t,keepDims:n};return Gr.runKernel(Ot,s,r)}}),No=ea({pow_:function(e,t){let n=Jr(e,"base","pow"),s=Jr(t,"exp","pow");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(Yt,r)}});function To(e,t){if((ir(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ir(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return na(e,[],[],t)}const Eo=ea({sqrt_:function(e){const t={x:Jr(e,"x","sqrt","float32")};return Gr.runKernel(Nn,t)}}),Ro=ea({square_:function(e){const t=Jr(e,"x","square");return Gr.runKernel("Square",{x:t},{})}}),Ao=ea({sum_:function(e,t=null,n=!1){let s=Jr(e,"x","sum");"bool"===s.dtype&&(s=Va(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Gr.runKernel(Tn,r,a)}});function Fo(e,t,n=null){if(0===e.rank)return qa(e);if(1!==e.rank&&null===n)return Fo(vi(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ao(qa(e),n);if(t===1/0)return $o(qa(e),n);if(t===-1/0)return So(qa(e),n);if("euclidean"===t||2===t)return Eo(Ao(No(qa(e),To(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return $o(Ao(qa(e),n[0]),n[1]-1);if(t===1/0)return $o(Ao(qa(e),n[1]),n[0]);if(t===-1/0)return So(Ao(qa(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Eo(Ao(Ro(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Do=ea({norm_:function(e,t="euclidean",n=null,s=!1){const r=Fo(e=Jr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=w(n,e.shape);a=ko(r.shape,t)}return vi(r,a)}}),_o=ea({euclideanNorm_:function(e,t=null,n=!1){return Do(e,"euclidean",t,n)}}),Oo=ea({exp_:function(e){const t={x:Jr(e,"x","exp")};return Gr.runKernel(Ze,t)}}),Lo=ea({expandDims_:function(e,t=0){const n=Jr(e,"x","expandDims","string_or_numeric");h(t<=n.rank,()=>"Axis must be <= rank of the tensor");const s={input:n},r={dim:t};return Gr.runKernel(Je,s,r)}}),Mo=ea({expm1_:function(e){const t={x:Jr(e,"x","expm1")};return Gr.runKernel(Qe,t)}}),zo=ea({tile_:function(e,t){const n=Jr(e,"x","tile","string_or_numeric");h(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const s={x:n},r={reps:t};return Gr.runKernel(Kn,s,r)}}),Bo=ea({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Ua([e,t],s),a=e<=t?e:t;for(let o=0;o<a;++o)r.set(1,o,o);const i=vi(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return zo(Lo(i,0),[n[0],1,1]);if(2===n.length)return zo(Lo(Lo(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return zo(Lo(Lo(Lo(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Po=ea({floor_:function(e){const t={x:Jr(e,"x","floor","float32")};return Gr.runKernel(st,t)}}),Wo=ea({gather_:function(e,t,n=0,s=0){const r={x:Jr(e,"x","gather"),indices:Jr(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Gr.runKernel(it,r,a)}}),Uo=ea({greater_:function(e,t){let n=Jr(e,"a","greater","string_or_numeric"),s=Jr(t,"b","greater","string_or_numeric");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(lt,r)}}),Vo=ea({greaterEqual_:function(e,t){let n=Jr(e,"a","greaterEqual","string_or_numeric"),s=Jr(t,"b","greaterEqual","string_or_numeric");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(ut,r)}}),Go=ea({imag_:function(e){const t={input:Jr(e,"input","imag")};return Gr.runKernel(dt,t)}}),Ho=ea({isFinite_:function(e){const t={x:Jr(e,"x","isFinite")};return Gr.runKernel(pt,t)}}),jo=ea({isInf_:function(e){const t={x:Jr(e,"x","isInf")};return Gr.runKernel(ft,t)}}),Ko=ea({isNaN_:function(e){const t={x:Jr(e,"x","isNaN")};return Gr.runKernel(gt,t)}}),Xo=ea({leakyRelu_:function(e,t=.2){const n={x:Jr(e,"x","leakyRelu")},s={alpha:t};return Gr.runKernel(mt,n,s)}}),qo=ea({less_:function(e,t){let n=Jr(e,"a","less","string_or_numeric"),s=Jr(t,"b","less","string_or_numeric");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(bt,r)}}),Yo=ea({lessEqual_:function(e,t){let n=Jr(e,"a","lessEqual","string_or_numeric"),s=Jr(t,"b","lessEqual","string_or_numeric");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(xt,r)}}),Zo=ea({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Jr(e,"x","localResponseNormalization");h(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),h(m(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=vi(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Gr.runKernel($t,l,u);return o?vi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Jo=ea({log_:function(e){const t={x:Jr(e,"x","log","float32")};return Gr.runKernel(kt,t)}}),Qo=ea({log1p_:function(e){const t={x:Jr(e,"x","log1p")};return Gr.runKernel(wt,t)}});function el(e){return Gr.customGrad(e)}const tl=ea({neg_:function(e){const t={x:Jr(e,"x","neg")};return Gr.runKernel(Wt,t)}}),nl=ea({softplus_:function(e){const t={x:Jr(e,"x","softplus")};return Gr.runKernel(Sn,t)}}),sl=ea({logSigmoid_:function(e){const t=Jr(e,"x","logSigmoid");return el(e=>({value:tl(nl(tl(e))),gradFunc:t=>Xa(t,Ni(tl(e)))}))(t)}}),rl=ea({sub_:function(e,t){let n=Jr(e,"a","sub"),s=Jr(t,"b","sub");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(Gn,r)}}),al=ea({logSoftmax_:function(e,t=-1){const n=Jr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return el((e,n)=>{const s=$o(e,t,!0),r=rl(e,s),a=rl(Va(r,"float32"),Jo(Ao(Oo(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=Oo(s);return rl(e,Xa(Ao(e,t,!0),r))}}})(n)}}),il=ea({logSumExp_:function(e,t=null,n=!1){const s=Jr(e,"x","logSumExp"),r=w(t,s.shape),a=$o(s,r,!0),i=rl(s,a),o=Oo(i),l=Ao(o,r),u=Jo(l),c=Ha(vi(a,u.shape),u);if(n){const e=ko(c.shape,r);return vi(c,e)}return c}}),ol=ea({logicalAnd_:function(e,t){const n=Jr(e,"a","logicalAnd","bool"),s=Jr(t,"b","logicalAnd","bool");oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(vt,r)}}),ll=ea({logicalNot_:function(e){const t={x:Jr(e,"x","logicalNot","bool")};return Gr.runKernel(It,t)}}),ul=ea({logicalOr_:function(e,t){const n=Jr(e,"a","logicalOr","bool"),s=Jr(t,"b","logicalOr","bool");oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(Ct,r)}}),cl=ea({logicalXor_:function(e,t){const n=Jr(e,"a","logicalXor","bool"),s=Jr(t,"b","logicalXor","bool");return oo(n.shape,s.shape),ol(ul(e,t),ll(ol(e,t)))}}),hl=ea({maxPool_:function(e,t,n,s,r){const a=Jr(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=vi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),h(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),h(xi(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),wi("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Gr.runKernel(Et,l,u);return o?vi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),dl=ea({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Jr(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=vi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),h("NDHWC"===a,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),wi("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},d=Gr.runKernel(At,u,c);return l?vi(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),pl=ea({maximum_:function(e,t){let n=Jr(e,"a","maximum"),s=Jr(t,"b","maximum");[n,s]=Mr(n,s),"bool"===n.dtype&&(n=Va(n,"int32"),s=Va(s,"int32")),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(Tt,r)}}),fl=ea({mean_:function(e,t=null,n=!1){const s={x:Jr(e,"x","mean")},r={axis:t,keepDims:n};return Gr.runKernel(_t,s,r)}});function gl(e,t="float32"){if(z(e),"complex64"===t){const t=gl(e,"float32"),n=gl(e,"float32");return ta(t,n)}const n=L(f(e),t);return Gr.makeTensor(n,e,t)}function ml(e,t="float32"){if(z(e),"complex64"===t){const t=ml(e,"float32"),n=gl(e,"float32");return ta(t,n)}const n=O(f(e),t);return Gr.makeTensor(n,e,t)}const bl=ea({minimum_:function(e,t){let n=Jr(e,"a","minimum"),s=Jr(t,"b","minimum");[n,s]=Mr(n,s),"bool"===n.dtype&&(n=Va(n,"int32"),s=Va(s,"int32")),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(Lt,r)}}),xl=ea({mirrorPad_:function(e,t,n){h("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const s=Jr(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");h(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===n?1:0;for(let o=0;o<s.rank;o++)h(2===t[o].length,()=>"Invalid number of paddings. Must be length of 2 each."),h(t[o][0]>=0&&t[o][0]<=s.shape[o]-r&&t[o][1]>=0&&t[o][1]<=s.shape[o]-r,()=>`Padding in dimension ${o} cannot be greater than or equal to ${s.shape[o]-r} or less than 0 for input of shape ${s.shape}`);const a={paddings:t,mode:n},i={x:s};return Gr.runKernel(Mt,i,a)}}),yl=ea({mod_:function(e,t){let n=Jr(e,"a","mod"),s=Jr(t,"b","mod");[n,s]=Mr(n,s);const r={a:n,b:s};return Gr.runKernel(zt,r)}}),kl=ea({moments_:function(e,t=null,n=!1){const s=w(t,(e=Jr(e,"x","moments")).shape),r=fl(e,s,n);let a=r.shape;n||(a=ko(r.shape,s));const i=Ro(rl(Va(e,"float32"),vi(r,a)));return{mean:r,variance:fl(i,s,n)}}}),wl=ea({notEqual_:function(e,t){let n=Jr(e,"a","notEqual","string_or_numeric"),s=Jr(t,"b","notEqual","string_or_numeric");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(Ut,r)}}),vl=ea({oneHot_:function(e,t,n=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Jr(e,"indices","oneHot","int32")},i={dtype:r,depth:t,onValue:n,offValue:s};return Gr.runKernel(Kt,a,i)}}),Il=ea({onesLike_:function(e){const t={x:Jr(e,"x","onesLike")};return Gr.runKernel(jt,t)}}),Cl=ea({pad_:function(e,t,n=0){const s=Jr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Gr.runKernel(qt,a,r)}}),$l=ea({spaceToBatchND_:function(e,t,n){const s=Jr(e,"x","spaceToBatchND");h(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),h(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),h(s.shape.reduce((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]===0:e,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const r={x:s},a={blockShape:t,paddings:n};return Gr.runKernel(En,r,a)}}),Sl=ea({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=Jr(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=vi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),h(xi(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const c=li(l.shape,t,a,r,s),d=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),s=n.map(e=>Math.floor(e/2)),r=n.map((e,t)=>e-s[t]);return n.map((e,t)=>[s[t],r[t]])}([c.filterHeight,c.filterWidth],d):[[0,0],[0,0]];const f=1===d[0]&&1===d[1],[g,m]=function(e,t,n){const s=n.map(e=>e[0]),r=n.map(e=>e[1]),a=e.concat(s,r),i=t.map((e,t)=>(e-a[t]%e)%e),o=r.map((e,t)=>e+i[t]);return[t.map((e,t)=>[s[t],o[t]]),t.map((e,t)=>[0,i[t]])]}([c.inHeight,c.inWidth],d,p),b=f?s:"valid",x=f?l:$l(l,d,g),y=("avg"===n?()=>Ii(x,t,a,b,i):()=>hl(x,t,a,b,i))(),k=f?y:Ri(y,d,m);return u?vi(k,[k.shape[1],k.shape[2],k.shape[3]]):k}}),Nl=ea({prelu_:function(e,t){const n={x:Jr(e,"x","prelu"),alpha:Jr(t,"alpha","prelu")};return Gr.runKernel(Zt,n)}}),Tl=ea({prod_:function(e,t=null,n=!1){let s=Jr(e,"x","prod");"bool"===s.dtype&&(s=Va(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Gr.runKernel(Jt,r,a)}});var El={exports:{}};!function(e,t){function n(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function r(e,t){var r=new n(e),a=t&&t.state,i=r.next;return i.int32=function(){return 4294967296*r.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,r),i.state=function(){return s(r,{})}),i}t&&t.exports?t.exports=r:this.alea=r}(0,El);var Rl=El.exports,Al={exports:{}};!function(e,t){function n(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function r(e,t){var r=new n(e),a=t&&t.state,i=function(){return(r.next()>>>0)/4294967296};return i.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=r.next,i.quick=i,a&&("object"==typeof a&&s(a,r),i.state=function(){return s(r,{})}),i}t&&t.exports?t.exports=r:this.xor128=r}(0,Al);var Fl=Al.exports,Dl={exports:{}};!function(e,t){function n(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function r(e,t){var r=new n(e),a=t&&t.state,i=function(){return(r.next()>>>0)/4294967296};return i.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=r.next,i.quick=i,a&&("object"==typeof a&&s(a,r),i.state=function(){return s(r,{})}),i}t&&t.exports?t.exports=r:this.xorwow=r}(0,Dl);var _l=Dl.exports,Ol={exports:{}};!function(e,t){function n(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function r(e,t){null==e&&(e=+new Date);var r=new n(e),a=t&&t.state,i=function(){return(r.next()>>>0)/4294967296};return i.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=r.next,i.quick=i,a&&(a.x&&s(a,r),i.state=function(){return s(r,{})}),i}t&&t.exports?t.exports=r:this.xorshift7=r}(0,Ol);var Ll=Ol.exports,Ml={exports:{}};!function(e,t){function n(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function r(e,t){null==e&&(e=+new Date);var r=new n(e),a=t&&t.state,i=function(){return(r.next()>>>0)/4294967296};return i.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=r.next,i.quick=i,a&&(a.X&&s(a,r),i.state=function(){return s(r,{})}),i}t&&t.exports?t.exports=r:this.xor4096=r}(0,Ml);var zl=Ml.exports,Bl={exports:{}};!function(e,t){function n(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function r(e,t){var r=new n(e),a=t&&t.state,i=function(){return(r.next()>>>0)/4294967296};return i.double=function(){do{var e=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=r.next,i.quick=i,a&&("object"==typeof a&&s(a,r),i.state=function(){return s(r,{})}),i}t&&t.exports?t.exports=r:this.tychei=r}(0,Bl);var Pl=Bl.exports,Wl={exports:{}};const Ul=n(Object.freeze(Object.defineProperty({__proto__:null,default:{}},Symbol.toStringTag,{value:"Module"})));var Vl;Vl=Wl,function(e,t,n){var s,r=256,a="random",i=n.pow(r,6),o=n.pow(2,52),l=2*o,u=255;function c(u,c,m){var b=[],x=f(p((c=1==c?{entropy:!0}:c||{}).entropy?[u,g(t)]:null==u?function(){try{var n;return s&&(n=s.randomBytes)?n=n(r):(n=new Uint8Array(r),(e.crypto||e.msCrypto).getRandomValues(n)),g(n)}catch(q_){var a=e.navigator,i=a&&a.plugins;return[+new Date,e,i,e.screen,g(t)]}}():u,3),b),y=new h(b),k=function(){for(var e=y.g(6),t=i,n=0;e<o;)e=(e+n)*r,t*=r,n=y.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return k.int32=function(){return 0|y.g(4)},k.quick=function(){return y.g(4)/4294967296},k.double=k,f(g(y.S),t),(c.pass||m||function(e,t,s,r){return r&&(r.S&&d(r,y),e.state=function(){return d(y,{})}),s?(n[a]=e,t):e})(k,x,"global"in c?c.global:this==n,c.state)}function h(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=u&a+1],n=n*r+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(p(e[n],t-1))}catch(q_){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return g(t)}function g(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),Vl.exports){Vl.exports=c;try{s=Ul}catch(m){}}else n["seed"+a]=c}("undefined"!=typeof self?self:t,[],Math);var Gl=Rl,Hl=Fl,jl=_l,Kl=Ll,Xl=zl,ql=Pl,Yl=Wl.exports;Yl.alea=Gl,Yl.xor128=Hl,Yl.xorwow=jl,Yl.xorshift7=Kl,Yl.xor4096=Xl,Yl.tychei=ql;var Zl=Yl;class Jl{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Zl.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Ql{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Zl.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const eu=ea({randomNormal_:function(e,t=0,n=1,s,r){if(z(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Jl(t,n,s,!1,r),i=Ua(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),tu=ea({randomUniform_:function(e,t=0,n=1,s="float32",r){z(e);const a=Ua(e,s),i=new Ql(t,n,null,r);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});function nu(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Gr.runKernel(nn,{},r)}const su=ea({real_:function(e){const t={input:Jr(e,"input","real")};return Gr.runKernel(sn,t)}}),ru=ea({reciprocal_:function(e){const t={x:Jr(e,"x","reciprocal")};return Gr.runKernel(rn,t)}}),au=ea({relu_:function(e){const t={x:Jr(e,"x","relu")};return Gr.runKernel(an,t)}}),iu=ea({relu6_:function(e){const t={x:Jr(e,"x","relu6")};return Gr.runKernel(dn,t)}}),ou=ea({reverse_:function(e,t){const n={x:Jr(e,"x","reverse")},s={dims:t};return Gr.runKernel(pn,n,s)}}),lu=ea({round_:function(e){const t={x:Jr(e,"x","round")};return Gr.runKernel(fn,t)}}),uu=ea({rsqrt_:function(e){const t={x:Jr(e,"x","rsqrt","float32")};return Gr.runKernel(gn,t)}}),cu=ea({selu_:function(e){const t={x:Jr(e,"x","selu")};return Gr.runKernel(kn,t)}}),hu=ea({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Jr(e,"x","separableConv2d"),l=Jr(t,"depthwiseFilter","separableConv2d"),u=Jr(n,"pointwiseFilter","separableConv2d");let c=o,d=!1;if(3===o.rank&&(d=!0,c=vi(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");h(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),h(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),h(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),h(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),h(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],f=l.shape[3];h(u.shape[2]===p*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*f}, but got ${u.shape[2]}.`);const g=so(c,l,s,r,i,a),m=Gi(g,u,1,"valid",i);return d?vi(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),du=ea({sign_:function(e){const t={x:Jr(e,"x","sign")};return Gr.runKernel(Cn,t)}}),pu=ea({sin_:function(e){const t={x:Jr(e,"x","sin","float32")};return Gr.runKernel(vn,t)}}),fu=ea({sinh_:function(e){const t={x:Jr(e,"x","sinh")};return Gr.runKernel(In,t)}}),gu=ea({slice1d_:function(e,t,n){const s=Jr(e,"x","slice1d");return h(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Ti(s,[t],[n])}}),mu=ea({slice2d_:function(e,t,n){const s=Jr(e,"x","slice2d");return h(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Ti(s,t,n)}}),bu=ea({slice3d_:function(e,t,n){const s=Jr(e,"x","slice3d");return h(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Ti(s,t,n)}}),xu=ea({slice4d_:function(e,t,n){const s=Jr(e,"x","slice4d");return h(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Ti(s,t,n)}}),yu=ea({softmax_:function(e,t=-1){const n=Jr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Gr.runKernel(An,s,r)}}),ku=ea({fft_:function(e){h("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Gr.runKernel(et,t)}}),wu=ea({ifft_:function(e){h("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Gr.runKernel(ht,t)}}),vu=ea({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=vi(e,[n,t]);s=wu(r)}else{const r=[n,2*(t-1)],a=vi(su(e),[n,t]),i=vi(Go(e),[n,t]),o=ou(Ti(a,[0,1],[n,t-2]),1),l=Xa(ou(Ti(i,[0,1],[n,t-2]),1),To(-1)),u=$i([a,o],1),c=$i([i,l],1),h=vi(ta(u,c),[r[0],r[1]]);s=wu(h)}if(s=su(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=vi(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),Iu=ea({split_:function(e,t,n=0){const s={x:Jr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Gr.runKernel(Rn,s,r)}}),Cu=ea({rfft_:function(e,t){h("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,r=Ti(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map(e=>e);s[e.shape.length-1]=t-n,r=$i([e,gl(s)],e.shape.length-1),n=t}else r=e;const a=co(r),i=vi(ta(r,a),[s,n]),o=ku(i),l=Math.floor(n/2)+1,u=su(o),c=Go(o),d=Iu(u,[l,n-l],u.shape.length-1),p=Iu(c,[l,n-l],c.shape.length-1),f=r.shape.slice();return f[r.shape.length-1]=l,vi(ta(d[0],p[0]),f)}}),$u=ea({squaredDifference_:function(e,t){let n=Jr(e,"a","squaredDifference"),s=Jr(t,"b","squaredDifference");[n,s]=Mr(n,s),oo(n.shape,s.shape);const r={a:n,b:s};return Gr.runKernel(Mn,r,{})}}),Su=ea({squeeze_:function(e,t){const n=Jr(e,"x","squeeze","string_or_numeric");return vi(n,v(n.shape,t).newShape)}}),Nu=ea({stack_:function(e,t=0){const n=Qr(e,"tensors","stack","string_or_numeric");h(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&h(t<=n[0].rank,()=>"Axis must be <= rank of the tensor");const s=n,r={axis:t};return Gr.runKernel(Xt,s,r)}}),Tu=ea({step_:function(e,t=0){const n={x:Jr(e,"x","step")},s={alpha:t};return Gr.runKernel(ts,n,s)}}),Eu=ea({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Jr(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Gr.runKernel(Pn,u,c)}}),Ru=ea({tan_:function(e){const t={x:Jr(e,"x","tan","float32")};return Gr.runKernel(Hn,t)}});function Au(e,t){p(e);const n=qr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return na(e,null,n,t)}function Fu(e,t,n){if(p(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=qr(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return na(e,t,s,n)}function Du(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let i=0;i<r;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-r;++i)if(n.shape[i+r]!==e[i+s])throw new Error(a+` updates.shape[${i+r}] (${n.shape[i+r]}) != shape[${i+r}] (${e[i+r]})`)}function _u(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let l=r;l<a;++l)i*=n[l];const o=r<1?1:r;return{sliceRank:r,numUpdates:f(t.shape)/o,sliceSize:i,strides:[...F(n.slice(0,r)),1],outputSize:f(n)}}const Ou=ea({topk_:function(e,t=1,n=!0){const s=Jr(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Gr.runKernel(Xn,a,i);return{values:o,indices:l}}}),Lu=ea({truncatedNormal_:function(e,t=0,n=1,s,r){if(z(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Jl(t,n,s,!0,r),i=Ua(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}}),Mu=ea({unique_:function(e,t=0){const n=Jr(e,"x","unique","string_or_numeric");h(n.rank>0,()=>"The input tensor must be at least 1D");const s={x:n},r={axis:t},[a,i]=Gr.runKernel(Zn,s,r);return{values:a,indices:i}}}),zu=ea({unsortedSegmentSum_:function(e,t,n){const s=Jr(e,"x","unsortedSegmentSum"),r=Jr(t,"segmentIds","unsortedSegmentSum","int32");h(m(n),()=>"numSegments must be of dtype int");const a={x:s,segmentIds:r},i={numSegments:n};return Gr.runKernel(Qn,a,i)}}),Bu=ea({unstack_:function(e,t=0){const n=Jr(e,"x","unstack","string_or_numeric");h(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);const s={value:n},r={axis:t};return Gr.runKernel(Jn,s,r)}});function Pu(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const s=Ua(e,"int32"),r=Ua([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=s.indexToLoc(n[a]),i=a*e.length;r.values.set(t,i)}return r.toTensor()}const Wu=ea({transpose_:function(e,t,n){const s=Jr(e,"x","transpose");if(null==t&&(t=s.shape.map((e,t)=>t).reverse()),h(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(e=>{h(e>=0&&e<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?oa(()=>{let e=su(s),t=Go(s);return e=Gr.runKernel(Yn,{x:e},a),t=Gr.runKernel(Yn,{x:t},a),n&&(t=tl(t)),ta(e,t)}):Gr.runKernel(Yn,r,a)}}),Uu=ea({dropout_:function(e,t,n,s){const r=Jr(e,"x","dropout");if(h("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),h(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof yr?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(g(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=Ka(Po(Ha(tu(a,0,1,"float32",s),i)),i);return Xa(r,o)}}),Vu=ea({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=vi(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=vi(t,[1,t.shape[0],t.shape[1],t.shape[2]])),h(4===o.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`),h(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),h(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];h(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),h(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),wi("conv2dDerFilter",r,i);const d={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Gr.runKernel(Se,d,p)}});function Gu(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Xa(e,Tu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Hu(e,t){let n=t;const s=io(e.shape,t.shape);return s.length>0&&(n=Ao(n,s)),vi(n,e.shape)}function ju(e,t,n,s){if("linear"===t)return e;if("relu"===t)return au(e);if("elu"===t)return go(e);if("relu6"===t)return iu(e);if("prelu"===t)return Nl(e,n);if("leakyrelu"===t)return Xo(e,s);if("sigmoid"===t)return Ni(e);throw new Error(`Unknown fused activation ${t}.`)}const Ku=(e,t)=>!(e>0)||"linear"===t,Xu=ea({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Ku(Gr.state.gradientDepth,l)){h("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let d=Gi(e,t,n,s,r,a,i);return null!=o&&(d=Ha(d,o)),ju(d,l,u,c)}const d=Jr(e,"x","conv2d","float32"),p=Jr(t,"filter","conv2d","float32");let f=d,g=!1;3===d.rank&&(g=!0,f=vi(d,[1,d.shape[0],d.shape[1],d.shape[2]])),h(4===f.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),h(4===p.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`),wi("fused conv2d",s,i);const m="NHWC"===r?f.shape[3]:f.shape[1];h(p.shape[2]===m,()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`),h(xi(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const b=ci(f.shape,p.shape,n,a,s,i);let x,y;if(null!=o&&(x=Jr(o,"bias","fused conv2d"),[x]=Mr(x,d),"NHWC"===r?oo(b.outShape,x.shape):(h(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),h(0===x.shape.length||x.shape[0]===b.outChannels||1===x.shape[0],()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${b.outChannels})`))),null!=u){const e=u.shape;if(h(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)h(1===e[0]||e[0]===b.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${b.outChannels}).`);else if(3===e.length)try{oo(e,b.outShape)}catch(q_){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${b.outShape}).`;throw Error(n)}y=Jr(u,"prelu weights","fused conv2d")}const k=(e,t)=>{h("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[i,o,u,c]=t,d=Gu(e,u,l);h(bi(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const p=[ji(o.shape,d,i,n,s),Vu(o,d,i.shape,n,s)];if(null!=c){const e=Hu(c,d);p.push(e)}return p},w={x:f,filter:p,bias:x,preluActivationWeights:y},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?el((e,t,n)=>{let s=Gr.runKernel(rs,w,v);return n([t,e,s]),g&&(s=vi(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:k}})(f,p):el((e,t,n,s)=>{let r=Gr.runKernel(rs,w,v);return s([t,e,r,n]),g&&(r=vi(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:k}})(f,p,x)}}),qu=ea({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=vi(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=vi(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Gr.runKernel(Be,u,c)}}),Yu=ea({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=vi(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Gr.runKernel(Pe,u,c);return l?vi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Zu=ea({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===Ku(Gr.state.gradientDepth,a)){let l=Si(e,t,n,s);return null!=r&&(l=Ha(l,r)),ju(l,a,i,o)}let l=Jr(e,"a","fused matMul"),u=Jr(t,"b","fused matMul");[l,u]=Mr(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],d=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],g=s?u.shape[u.rank-2]:u.shape[u.rank-1],m=l.shape.slice(0,-2),b=u.shape.slice(0,-2),x=f(m),y=f(b);h(c===d,()=>`Error in fused matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`);const k=oo(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,g]),w=vi(l,n?[x,c,p]:[x,p,c]),v=vi(u,s?[y,g,d]:[y,d,g]);let I,C;null!=r&&(I=Jr(r,"bias","fused matMul"),[I]=Mr(I,l),oo(k,I.shape)),null!=i&&(C=Jr(i,"prelu weights","fused matMul"));const $=(e,t)=>{const[i,o,l,u]=t,c=Gu(vi(e,l.shape),l,a);let h,d;return n||s?!n&&s?(h=Si(c,o,!1,!1),d=Si(c,i,!0,!1)):n&&!s?(h=Si(o,c,!1,!0),d=Si(i,c,!1,!1)):(h=Si(o,c,!0,!0),d=Si(c,i,!0,!0)):(h=Si(c,o,!1,!0),d=Si(i,c,!0,!1)),null!=r?[h,d,Hu(u,c)]:[h,d]},S={a:w,b:v,bias:I,preluActivationWeights:C},N={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};return null==r?el((e,t,n)=>{const s=Gr.runKernel(ss,S,N);return n([e,t,s]),{value:vi(s,k),gradFunc:$}})(w,v):el((e,t,n,s)=>{const r=Gr.runKernel(ss,S,N);return s([e,t,r,n]),{value:vi(r,k),gradFunc:$}})(w,v,I)}}),Ju=ea({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Jr(e,"image","cropAndResize"),o=Jr(t,"boxes","cropAndResize","float32"),l=Jr(n,"boxInd","cropAndResize","int32"),u=o.shape[0];h(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),h(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),h(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),h(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),h(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),h("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`);const c={image:i,boxes:o,boxInd:l},d={method:r,extrapolationValue:a,cropSize:s};return Gr.runKernel(Oe,c,d)}}),Qu=ea({flipLeftRight_:function(e){const t=Jr(e,"image","flipLeftRight","float32");h(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);const n={image:t};return Gr.runKernel(nt,n,{})}}),ec=ea({grayscaleToRGB_:function(e){const t=Jr(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];h(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),h(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,zo(t,r)}}),tc=ea({rgbToGrayscale_:function(e){const t=Jr(e,"image","RGBToGrayscale"),n=t.rank-1,s=t.shape[n];h(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),h(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,a=Va(t,"float32"),i=Au([.2989,.587,.114]);let o;switch(t.rank){case 2:o=fo("ij,j->i",a,i);break;case 3:o=fo("ijk,k->ij",a,i);break;case 4:o=fo("ijkl,l->ijk",a,i);break;case 5:o=fo("ijklm,m->ijkl",a,i);break;case 6:o=fo("ijklmn,n->ijklm",a,i);break;default:throw new Error("Not a valid tensor rank.")}return o=Lo(o,-1),Va(o,r)}}),nc=ea({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Jr(e,"image","rotateWithOffset","float32");h(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);const a={image:r},i={radians:t,fillValue:n,center:s};return Gr.runKernel(ns,a,i)}});function sc(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),h(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),h(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),h(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),h(1===t.rank,()=>"scores must be a 1D tensor"),h(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),h(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const rc=ea({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Jr(e,"boxes","nonMaxSuppression","float32"),i=Jr(t,"scores","nonMaxSuppression","float32"),o=sc(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Gr.runKernel(Vt,{boxes:a,scores:i},l)}});function ac(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||ic)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function ic(e,t){return e>t?1:e<t?-1:0}function oc(e,t,n,s,r){return cc(e,t,n,s,r,0)}function lc(e,t,n,s,r,a){return cc(e,t,n,s,r,0,!1,a,!0)}function uc(e,t,n,s,r,a){return cc(e,t,n,s,r,a,!0)}function cc(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(pc);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let l=h.length-1;l>=i;--l){const n=hc(e,a,h[l]);if(n>=s){o=!0;break}if(t.score=t.score*dc(s,c,n),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),d.push(t.score)):t.score>r&&ac(u,t,pc))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return i&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function hc(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(o-a)*(l-i),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(a,u),m=Math.max(i,c),b=Math.min(o,h),x=Math.min(l,d),y=Math.max(b-g,0)*Math.max(x-m,0);return y/(p+f-y)}function dc(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function pc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const fc=ea({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Jr(e,"boxes","nonMaxSuppression"),o=Jr(t,"scores","nonMaxSuppression"),l=sc(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Gr.runKernel(Ht,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),gc=ea({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Jr(e,"boxes","nonMaxSuppression"),o=Jr(t,"scores","nonMaxSuppression"),l=sc(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Gr.runKernel(Gt,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),mc=ea({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Jr(e,"images","resizeBilinear");h(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),h(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),h(!1===s||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=r,i=!1;3===r.rank&&(i=!0,a=vi(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Gr.runKernel(cn,o,l);return i?vi(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),bc=ea({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Jr(e,"images","resizeNearestNeighbor");h(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),h(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),h("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),h(!1===s||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=r,i=!1;3===r.rank&&(i=!0,a=vi(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Gr.runKernel(ln,o,l);return i?vi(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});function xc(e,t=!1){return Gr.tidy(()=>{h(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],s=e.shape[1];let r=Bo(n),a=Ga(e);const i=Fu([[1]],[1,1]);let o=Ga(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Gr.tidy(()=>{const t=Ti(a,[e,e],[n-e,1]),l=Do(t),u=Ti(a,[e,e],[1,1]),c=uo(Uo(u,0),Fu([[-1]]),Fu([[1]])),h=rl(u,Xa(c,l)),d=Ka(t,h);o=1===d.shape[0]?Ga(i):$i([i,Ti(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=tl(Ka(Si(c,h),l)),f=Ti(a,[e,0],[n-e,s]),g=Xa(p,o),m=Wu(o);if(0===e)a=rl(f,Si(g,Si(m,f)));else{const t=rl(f,Si(g,Si(m,f)));a=$i([Ti(a,[0,0],[e,s]),t],0)}const b=Wu(g),x=Ti(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=rl(x,Si(Si(x,o),b));else{const t=rl(x,Si(Si(x,o),b));r=$i([Ti(r,[0,0],[n,e]),t],1)}return[o,a,r]}),la([t,l,u])}return!t&&n>s&&(r=Ti(r,[0,0],[n,s]),a=Ti(a,[0,0],[s,s])),[r,a]})}const yc={flipLeftRight:Qu,grayscaleToRGB:ec,resizeNearestNeighbor:bc,resizeBilinear:mc,rgbToGrayscale:tc,rotateWithOffset:nc,cropAndResize:Ju,nonMaxSuppression:rc,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Jr(e,"boxes","nonMaxSuppressionAsync"),i=Jr(t,"scores","nonMaxSuppressionAsync"),o=sc(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=oc(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Au(h,"int32")},nonMaxSuppressionWithScore:fc,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Jr(e,"boxes","nonMaxSuppressionAsync"),o=Jr(t,"scores","nonMaxSuppressionAsync"),l=sc(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=uc(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Au(d,"int32"),selectedScores:Au(p)}},nonMaxSuppressionPadded:gc,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Jr(e,"boxes","nonMaxSuppressionAsync"),o=Jr(t,"scores","nonMaxSuppressionAsync"),l=sc(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:g}=lc(d,p,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Au(f,"int32"),validOutputs:To(g,"int32")}},threshold:ea({threshold_:function(e,t="binary",n=!1,s=.5){const r=Jr(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=Xa(Au([s]),255);if(h(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),h(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),h("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),h("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[i,o,l]=Iu(r,[1,1,1],-1);const e=Xa(i,.2989),t=Xa(o,.587),n=Xa(l,.114);u=Ha(Ha(e,t),n)}else u=e;"otsu"===t&&(c=function(e,t){let n,s,r,a,i,o,l=Au([-1]),u=Au([0]),c=Au([0]);for(let h=0;h<e.size-1;h++){n=Ti(e,0,h+1),s=Ti(e,h+1),i=Ka(Ao(n),t),o=Ka(Ao(s),t);const d=Ao(Xa(n,nu(0,n.size)));r=Ka(d,Ao(n));const p=zi(s.shape,n.size),f=Ha(nu(0,s.size),p),g=Xa(s,f);a=Ka(Ao(g),Ao(s));const m=rl(r,a),b=rl(r,a),x=Xa(i,o);c=Xa(Xa(x,m),b);const y=Uo(c,u);u=uo(y,c,u),l=uo(y,Au([h]),l)}return l}(Oi(Va(lu(u),"int32"),sa([]),256),a));const d=n?Yo(u,c):Uo(u,c);return Va(Xa(d,255),"int32")}}),transform:ea({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Jr(e,"image","transform","float32"),o=Jr(t,"transforms","transform","float32");h(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),h(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),h(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`);const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Gr.runKernel(qn,l,u)}})},kc={bandPart:ea({bandPart_:function(e,t,n){const s=Jr(e,"a","bandPart");h(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,i]=s.shape.slice(-2);let o,l;"number"==typeof t?(h(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),h(t<=a,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`),o=Jr(t<0?a:t,"numLower","bandPart")):(h("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),o=uo(qo(t,0),a,bl(t,a))),"number"==typeof n?(h(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`),h(n<=i,()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`),l=Jr(n<0?i:n,"numUpper","bandPart")):(h("int32"===n.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=uo(qo(n,0),i,bl(n,i)));const u=vi(nu(0,a,1,"int32"),[-1,1]),c=nu(0,i,1,"int32"),d=rl(u,c),p=ol(Yo(d,o),Vo(d,tl(l))),f=gl([a,i],s.dtype);return vi(Nu(Bu(vi(s,[-1,a,i])).map(e=>uo(p,e,f))),r)}}),gramSchmidt:ea({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,h(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)h(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=Iu(e,e.shape[0],0).map(e=>Su(e,[0]));h(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],s=e;for(let r=0;r<e.length;++r)n.push(Gr.tidy(()=>{let e=s[r];if(r>0)for(let t=0;t<r;++t){const s=Xa(Ao(Xa(n[t],e)),n[t]);e=rl(e,s)}return Ka(e,Do(e,"euclidean"))}));return t?Nu(n,0):n}}),qr:ea({qr_:function(e,t=!1){if(h(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return xc(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),s=Bu(vi(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach(e=>{const[n,s]=xc(e,t);r.push(n),a.push(s)}),[vi(Nu(r,0),e.shape),vi(Nu(a,0),e.shape)]}}})},wc=new Map,vc=new Map;class Ic{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Cc{constructor(){this.classNameMap={}}static getMap(){return null==Cc.instance&&(Cc.instance=new Cc),Cc.instance}static register(e){Cc.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function $c(e,t,n){h(null!=e.className,()=>"Class being registered does not have the static className property defined."),h("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),h(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const s=t+">"+n;return Cc.register(e),wc.set(s,e),vc.set(e,s),e}class Sc extends Ic{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:r[e.name]}));this.applyGradients(e)}else this.applyGradients(r);return la(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){h(R(e),()=>"The f passed in variableGrads(f) must be a function"),h(null==t||Array.isArray(t)&&t.every(e=>e instanceof wr),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in Gr.registeredVariables)t.push(Gr.registeredVariables[e])}const s=n?t.filter(e=>!e.trainable):null,r=t.length;h((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=Gr.gradients(e,t,null,!0);h(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),h(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=s&&s.forEach(e=>o[e.name]=null),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&la(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:To(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Sc,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Nc extends Sc{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Gr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Gr.registeredVariables[t],r=!1;null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:oa(()=>co(s).variable(r))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:oa(()=>co(s).variable(r))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;oa(()=>{const e=Ha(Xa(i,this.rho),Xa(Ro(a),1-this.rho)),t=Xa(Ka(Eo(Ha(o,this.epsilon)),Eo(Ha(i,this.epsilon))),a),n=Ha(Xa(o,this.rho),Xa(Ro(t),1-this.rho));i.assign(e),o.assign(n);const r=Ha(Xa(t,-this.learningRate),s);s.assign(r)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(la(this.accumulatedGrads.map(e=>e.variable)),la(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2,n=!1;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}class Tc extends Sc{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Gr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:oa(()=>zi(s.shape,this.initialAccumulatorValue).variable(e))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;oa(()=>{const e=Ha(a,Ro(r));a.assign(e);const t=Ha(Xa(Ka(r,Eo(Ha(e,Gr.backend.epsilon()))),-this.learningRate),s);s.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&la(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}class Ec extends Sc{static get className(){return"Adam"}constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],oa(()=>{this.accBeta1=To(t).variable(),this.accBeta2=To(n).variable()}),null==s&&(this.epsilon=Gr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);oa(()=>{const n=rl(1,this.accBeta1),s=rl(1,this.accBeta2);t.forEach((t,r)=>{const a=Gr.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:oa(()=>co(a).variable(i))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:oa(()=>co(a).variable(i))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const l=this.accumulatedFirstMoment[r].variable,u=this.accumulatedSecondMoment[r].variable,c=Ha(Xa(l,this.beta1),Xa(o,1-this.beta1)),h=Ha(Xa(u,this.beta2),Xa(Ro(o),1-this.beta2)),d=Ka(c,n),p=Ka(h,s);l.assign(c),u.assign(h);const f=Ha(Xa(Ka(d,Ha(Eo(p),this.epsilon)),-this.learningRate),a);a.assign(f)}),this.accBeta1.assign(Xa(this.accBeta1,this.beta1)),this.accBeta2.assign(Xa(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&la(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&la(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),oa(()=>{this.accBeta1.assign(No(this.beta1,this.iterations_+1)),this.accBeta2.assign(No(this.beta2,this.iterations_+1))});const t=e.length/2,n=!1;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}class Rc extends Sc{static get className(){return"Adamax"}constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],oa(()=>{this.iteration=To(0).variable(),this.accBeta1=To(t).variable()}),null==s&&(this.epsilon=Gr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);oa(()=>{const n=rl(1,this.accBeta1),s=Ka(-this.learningRate,Ha(Xa(this.iteration,this.decay),1));t.forEach((t,r)=>{const a=Gr.registeredVariables[t],i=!1;null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:co(a).variable(i)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:co(a).variable(i)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const l=this.accumulatedFirstMoment[r].variable,u=this.accumulatedWeightedInfNorm[r].variable,c=Ha(Xa(l,this.beta1),Xa(o,1-this.beta1)),h=Xa(u,this.beta2),d=qa(o),p=pl(h,d);l.assign(c),u.assign(p);const f=Ha(Xa(Ka(s,n),Ka(c,Ha(p,this.epsilon))),a);a.assign(f)}),this.iteration.assign(Ha(this.iteration,1)),this.accBeta1.assign(Xa(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&la(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&la(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class Ac extends Sc{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Gr.registeredVariables[t];oa(()=>{const e=Ha(Xa(this.c,s),r);r.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ua(To(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Fc extends Ac{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=To(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Gr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:oa(()=>co(s).variable(e))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&oa(()=>{let e;const t=Ha(Xa(this.m,r),a);e=this.useNesterov?Ha(Xa(this.c,Ha(a,Xa(t,this.m))),s):Ha(Xa(this.c,t),s),r.assign(t),s.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&la(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Dc extends Sc{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Gr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const s=Gr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:oa(()=>co(s).variable(r))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:oa(()=>co(s).variable(r))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:oa(()=>co(s).variable(r))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;oa(()=>{const e=Ha(Xa(i,this.decay),Xa(Ro(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Ha(Xa(t,this.decay),Xa(a,1-this.decay)),l=Ka(Xa(a,this.learningRate),Eo(rl(e,Ha(Ro(r),this.epsilon)))),u=Ha(Xa(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=rl(s,u);s.assign(c)}else{const e=Ha(Xa(i,this.decay),Xa(Ro(a),1-this.decay)),t=Ha(Xa(o,this.momentum),Ka(Xa(a,this.learningRate),Eo(Ha(e,this.epsilon))));i.assign(e),o.assign(t);const n=rl(s,t);s.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&la(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&la(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&la(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(n)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const _c=[Nc,Tc,Ec,Rc,Fc,Dc,Ac];function Oc(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===f(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let h=0;h<r.length-1;++h)i*=r[h];const o=e.shape,l=r.slice();l.pop();let u=1;for(let h=a;h<n;++h)u*=o[h],l.push(o[h]);const c=[...F(e.shape).map(e=>e/u),1].slice(0,a);return[l,i,u,c]}function Lc(e,t,n){const s=e.shape.length;h(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),h(s===n.length,()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)h(t[r]+n[r]<=e.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`)}function Mc(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function zc(e,t,n,s){const r=[...e];for(let a=r.length;a<s.length;a++)r.push(1);for(let a=0;a<n;a++)0===a?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Bc(e,t,n){return n<=e?n:n-(t-1)}function Pc(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Wc(e,t,n,s,r){const a=[...r],i=Pc(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const r=Bc(t,n,o);let i=s[r];e&1<<r&&(i=0),a[o]=i}return a}function Uc(e,t,n,s,r){const a=[...r],i=Pc(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const r=Bc(t,n,o);let i=s[r];e&1<<r&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=r[o];a[o]<0&&(a[o]+=e),a[o]=l(0,a[o],r[o])}return a}function Vc(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Gc(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=s[r];return i<0&&(i+=u),i=l(0,i,u-1),i}function Hc(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[r];return i<0&&(i+=u),i=o>0?l(0,i,u):l(-1,i,u-1),i}function jc(e,t,n){let s=n.length;for(let r=0;r<n.length;r++)if(n[r]>1){s=r;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Kc(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Xc(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(e=>{h(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map((t,n)=>t>=0?t:(h(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-s[n])),[s,a]}function qc(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let x=0;x<h.dims;x++)c&&1<<x&o&&h.numAddAxisAfterEllipsis++,1<<x&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,d);let p=!0,f=!0,g=!0;const m=[],b=[];for(let x=0;x<e.length;++x){if(0===d.strides[x])throw Error(`strides[${x}] must be non-zero`);const t=!!(d.shrinkAxisMask&1<<x),n=e[x];if(-1===n){m.push(t?1:-1);continue}const s=[d.beginMask&1<<x,d.endMask&1<<x],r=[d.strides[x]>0?0:-1,d.strides[x]>0?n:n-1];if(t&&d.strides[x]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[x];const a=!!(d.beginMask&1<<x&&d.endMask&1<<x);if(d.beginValid&&d.endValid){if(t){const e=d.begin[x]<0?n+d.begin[x]:d.begin[x];if(d.begin[x]=e,d.end[x]=d.begin[x]+1,e<0||e>=n)throw Error(`slice index ${d.begin[x]} of dimension ${x} out of bounds.`)}else d.begin[x]=Yc(d.begin[x],0,d.strides[x],n,s,r),d.end[x]=Yc(d.end[x],1,d.strides[x],n,s,r);const e=1===d.strides[x]&&0===d.begin[x]&&d.end[x]===n;p=p&&e,f=f&&(0===x&&1===d.strides[x]||e)}else p=p&&1===d.strides[x]&&a,f=f&&(0===x&&1===d.strides[x]||a);let i,o=!1;if(d.beginValid&&d.endValid?(i=d.end[x]-d.begin[x],o=!0):t?(i=1,o=!0):a&&n>=0&&(i=d.strides[x]<0?-n:n,o=!0),o){let e;e=0===i||i<0!=d.strides[x]<0?0:Math.trunc(i/d.strides[x])+(i%d.strides[x]!==0?1:0),m.push(e)}else m.push(-1)}for(let x=0;x<d.finalShapeGatherIndices.length;++x){const e=d.finalShapeGatherIndices[x];e>=0?b.push(m[e]):-2===e&&b.push(1)}return{finalShapeSparse:b.filter((e,t)=>-2!==d.finalShapeGatherIndices[t]),finalShape:b,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function Yc(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const Zc=Object.freeze(Object.defineProperty({__proto__:null,assertParamsValid:Lc,computeFlatOffset:Kc,computeOutShape:Mc,getNormalizedAxes:function(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Wc(i,l,u,s,e),h=Uc(o,l,u,r,e),d=zc(a,l,u,e)}else for(let p=0;p<u;p++)c[p]=Gc(i,s,a,e,p,l),h[p]=Hc(o,r,a,e,p,l),d[p]=Vc(a,p,l);return{begin:c,end:h,strides:d}},isSliceContinous:jc,maskToAxes:function(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t},parseSliceParams:Xc,sliceInfo:qc,startForAxis:Gc,startIndicesWithElidedDims:Wc,stopForAxis:Hc,stopIndicesWithElidedDims:Uc,stridesForAxis:Vc,stridesWithElidedDims:zc},Symbol.toStringTag,{value:"Module"})),Jc=class{static sgd(e){return new Ac(e)}static momentum(e,t,n=!1){return new Fc(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Dc(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Ec(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Nc(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Rc(e,t,n,s,r)}static adagrad(e,t=.1){return new Tc(e,t)}},Qc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function eh(){return new Promise(e=>Qc(()=>e()))}function th(e,t){const n=e[0].length;e.forEach((e,t)=>{h(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),h(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const s=e[0];e.forEach((e,r)=>{for(let a=0;a<n;a++)h(a===t||e[a]===s[a],()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`)})}function nh(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var sh,rh;function ah(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],i=s[s.length-n.length+r],o=s[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${o}`)}else s[i]=a}return s}function ih(e){const t={FIRST_DIM_SIZE:sh.FIRST_DIM_SIZE,VALUE_ROWIDS:sh.VALUE_ROWIDS,ROW_LENGTHS:sh.ROW_LENGTHS,ROW_SPLITS:sh.ROW_SPLITS,ROW_LIMITS:sh.ROW_LIMITS,ROW_STARTS:sh.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function oh(e){return 0===e.length?0:e[0]===sh.FIRST_DIM_SIZE?e.length-1:e.length}function lh(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}function uh(e){return e<=30?e:A(e,Math.floor(Math.sqrt(e)))}function ch(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function hh(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function dh(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function ph(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let a=1;a<e.length;++a)a<=t.length?s?r.push(t[a-1]*e[a]):r.push(e[a]/t[a-1]):r.push(e[a]);return r}function fh(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function gh(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}(rh=sh||(sh={}))[rh.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",rh[rh.VALUE_ROWIDS=1]="VALUE_ROWIDS",rh[rh.ROW_LENGTHS=2]="ROW_LENGTHS",rh[rh.ROW_SPLITS=3]="ROW_SPLITS",rh[rh.ROW_LIMITS=4]="ROW_LIMITS",rh[rh.ROW_STARTS=5]="ROW_STARTS";const mh=1.7580993408473768,bh=1.0507009873554805,xh=.3275911,yh=.254829592,kh=-.284496736,wh=1.421413741,vh=-1.453152027,Ih=1.061405429;function Ch(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function $h(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Sh(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function Nh(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function Th(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Eh(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Rh(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Ah(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Fh=/->/g;function Dh(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Fh,"").length)/2;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split("->");h(-1===s.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let h=0;h<r.length;++h){const e=r[h];if(!a.some(t=>-1!==t.indexOf(e)))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let h=0;h<s.length;++h){const e=s[h];-1===o.indexOf(e)&&","!==e&&o.push(e)}const l=new Array(a.length);for(let h=0;h<i;++h){if(new Set(a[h].split("")).size!==a[h].length)throw new Error(`Found duplicate axes in input component ${a[h]}. Support for duplicate axes in input is not implemented yet.`);l[h]=[];for(let e=0;e<a[h].length;++e)l[h].push(o.indexOf(a[h][e]))}const u=o.length,c=[];for(let h=r.length;h<u;++h)c.push(h);return{allDims:o,summedDims:c,idDims:l}}function _h(e,t){let n=new Array(e);n.fill(-1);for(let r=0;r<t.length;++r)n[t[r]]=r;const s=[];for(let r=0;r<e;++r)-1===n[r]&&s.push(r);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:s}}function Oh(e,t,n){const s=new Array(e);for(let r=0;r<n.length;++r){const e=n[r].shape;for(let n=0;n<t[r].length;++n)void 0===s[t[r][n]]?s[t[r][n]]=e[n]:h(s[t[r][n]]===e[n],()=>`Expected dimension ${s[t[r][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`)}}function Lh(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let i=0;i<r;++i)s.push([]);const a=[];for(let i=0;i<n.length;++i){const e=zh(t,n[i]);for(const t of e)-1===a.indexOf(t)&&(s[i].push(t),a.push(t))}return{path:n,steps:s}}function Mh(e){return e.every((e,t)=>e===t)}function zh(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Bh(e,t,n=0){let s=[];if("number"==typeof t)h(e.shape[n]%t===0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(e.shape[n]/t);else{h(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const r=t.indexOf(-1);if(-1!==r){const s=t.reduce((e,t)=>t>0?e+t:e);t[r]=e.shape[n]-s}h(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function Ph(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Wh(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Uh(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Vh(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Gh(e,t){return`size ${e} must be non-negative, not ${t}`}function Hh(e,t){return`Input to reshape is a SparseTensor with ${f(e)}\n  dense values, but the requested shape requires a multiple of ${f(t)}. inputShape=${e} outputShape= ${t}`}function jh(e,t){return`Input to reshape is a tensor with ${f(e)} dense values, but the requested shape has ${f(t)}. inputShape=${e} outputShape=${t}`}function Kh(){return"segment ids are not increasing"}function Xh(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function qh(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Yh(e,t){let n,s=!1;for(e<=30?(n=e,s=!0):n=A(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=A(e,n+1);return n}function Zh(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function Jh(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let h=0;h<s;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)o.push(e.shape[h]),l*=e.shape[h];for(let h=s;h<n;h++)o.push(e.shape[h]),u*=e.shape[h];for(let h=s;h<r;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}const Qh=Object.freeze(Object.defineProperty({__proto__:null,collectGatherOpShapeInfo:Jh,computeOutShape:Zh,segOpComputeOptimalWindowSize:Yh},Symbol.toStringTag,{value:"Module"}));function ed(e){try{return e.map(e=>ar(e))}catch(Y_){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${Y_}`)}}function td(e){return e.map(e=>rr(e))}const nd=Object.freeze(Object.defineProperty({__proto__:null,ERF_A1:yh,ERF_A2:kh,ERF_A3:wh,ERF_A4:vh,ERF_A5:Ih,ERF_P:xh,PARALLELIZE_THRESHOLD:30,get RowPartitionType(){return sh},SELU_SCALE:bh,SELU_SCALEALPHA:mh,applyActivation:ju,assertAndGetBroadcastShape:oo,assertAxesAreInnerMostDims:wo,assertParamsConsistent:th,assignToTypedArray:Eh,axesAreInnerMostDims:bo,calculateShapes:_u,checkEinsumDimSizes:Oh,checkPadOnDimRoundingMode:wi,combineLocations:xo,combineRaggedTensorToTensorShapes:ah,complexWithEvenIndex:Sh,complexWithOddIndex:Nh,computeConv2DInfo:ci,computeConv3DInfo:hi,computeDefaultPad:di,computeDilation2DInfo:oi,computeOptimalWindowSize:uh,computeOutAndReduceShapes:yo,computeOutShape:nh,computePool2DInfo:li,computePool3DInfo:ui,convertConv2DDataFormat:ki,decodeEinsumEquation:Dh,eitherStridesOrDilationsAreOne:xi,expandShapeToKeepDim:ko,exponent:Ah,exponents:Rh,fromStringArrayToUint8:td,fromUint8ToStringArray:ed,getAxesPermutation:vo,getBroadcastDims:ao,getComplexWithIndex:Th,getEinsumComputePath:Lh,getEinsumPermutation:_h,getFusedBiasGradient:Hu,getFusedDyActivation:Gu,getImageCenter:ch,getInnerMostAxes:Co,getPermuted:dh,getRaggedRank:oh,getReductionAxes:io,getReshaped:hh,getReshapedPermuted:ph,getRowPartitionTypesHelper:ih,getSliceBeginCoords:fh,getSliceSize:gh,getSparseFillEmptyRowsIndicesDenseShapeMismatch:Ph,getSparseFillEmptyRowsNegativeIndexErrorMessage:Wh,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:Uh,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:function(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"},getSparseReshapeInputOutputMismatchErrorMessage:jh,getSparseReshapeInputOutputMultipleErrorMessage:Hh,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:Vh,getSparseReshapeNegativeOutputDimErrorMessage:Gh,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:qh,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:function(){return"segment ids must be >= 0"},getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:Kh,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:Xh,getUndoAxesPermutation:Io,isIdentityPermutation:Mh,log:function(...e){!H().getBool("IS_TEST")&&H().getBool("PROD")},mergeRealAndImagArrays:Ch,prepareAndValidate:Oc,prepareSplitSize:Bh,segment_util:Qh,shouldFuse:Ku,slice_util:Zc,splitRealAndImagArrays:$h,stridesOrDilationsArePositive:yi,tupleValuesAreOne:bi,upcastType:Dr,validateDefaultValueShape:lh,validateInput:function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Du(n,t,e)},validateUpdateShape:Du,warn:is},Symbol.toStringTag,{value:"Module"}));!function(){for(const e of _c)$c(e)}();const sd={kernelName:Y,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,Tu(Va(n,"float32"),-1))}}},rd={kernelName:Z,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ro(Va(n,"float32")),s=Eo(rl(To(1),t));return tl(Ka(e,s))}}}},ad={kernelName:J,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Eo(rl(Ro(Va(n,"float32")),1));return Ka(e,t)}}}},id={kernelName:Q,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{let t=e;const s=io(n.shape,r);return s.length>0&&(t=Ao(t,s)),vi(t,n.shape)},b:()=>{let t=e;const n=io(s.shape,r);return n.length>0&&(t=Ao(t,n)),vi(t,s.shape)}}}},od={kernelName:ee,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,s)=>{n[s]=()=>e.clone()}),n}},ld={kernelName:se,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(n)}}},ud={kernelName:re,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>co(n)}}},cd={kernelName:ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,Eo(rl(To(1),Ro(Va(n,"float32")))))}}},hd={kernelName:ie,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Eo(Ha(To(1),Ro(Va(n,"float32"))));return Ka(e,t)}}}},dd={kernelName:ue,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{const t=Ha(Ro(n),Ro(s));let a=Xa(e,Ka(s,t));const i=io(n.shape,r);return i.length>0&&(a=Ao(a,i)),vi(a,n.shape)},b:()=>{const t=Ha(Ro(n),Ro(s));let a=tl(Xa(e,Ka(n,t)));const i=io(s.shape,r);return i.length>0&&(a=Ao(a,i)),vi(a,s.shape)}}}},pd={kernelName:oe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,Ha(Ro(Va(n,"float32")),1))}}},fd={kernelName:le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,rl(To(1),Ro(Va(n,"float32"))))}}},gd=ea({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Jr(e,"dy","avgPool3dGrad"),o=Jr(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=vi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=vi(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),h(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),h(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),wi("avgPool3dGrad",r,a);const d={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},f=Gr.runKernel(pe,d,p);return c?vi(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),md={kernelName:de,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>gd(e,s,r,a,i,o)}}},bd=ea({avgPoolGrad_:function(e,t,n,s,r){const a=Jr(e,"dy","avgPoolGrad"),i=Jr(t,"input","avgPoolGrad");h(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=vi(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=vi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),h(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),h(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);const c={dy:l,input:o},d={filterSize:n,strides:s,pad:r},p=Gr.runKernel(he,c,d);return u?vi(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),xd={kernelName:ce,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>bd(e,s,r,a,i)}}},yd={kernelName:fe,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Si(e,r,!1,!1),b:()=>Si(e,s,!0,!1)}:a&&!i?{a:()=>Si(r,e,!1,!0),b:()=>Si(s,e,!1,!1)}:{a:()=>Si(r,e,!0,!0),b:()=>Si(e,s,!0,!0)}:{a:()=>Si(e,r,!1,!0),b:()=>Si(s,e,!0,!1)}}},kd={kernelName:ge,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>$l(e,s,r)}}},wd={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let l=r.length-1;l>=0;l--)if(r[l]===a[l])i[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let l=0;l<i.length;l++)i[l]>1&&o.push(l);return{x:()=>Ao(e,o,!0)}}},vd={kernelName:ye,gradFunc:e=>({x:()=>e.clone()})},Id={kernelName:ke,gradFunc:e=>({x:()=>co(e)})},Cd={kernelName:we,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>uo(ol(Vo(s,r),Yo(s,a)),e,co(e))}}},$d={kernelName:Ie,inputsToSave:["x"],gradFunc:sd.gradFunc},Sd={kernelName:Ce,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map(e=>e.shape),{axis:r}=n,a=w(r,t[0].shape)[0],i=s.map(e=>e[a]);return Iu(e,i,a).map(e=>()=>e)}},Nd={kernelName:$e,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return h(bi(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>ji(s.shape,e,r,i,o,l),filter:()=>Vu(s,e,r.shape,i,o,l)}}},Td={kernelName:Ne,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Gi(e,r,a,i,o,1,l),filter:()=>Vu(e,s,r.shape,a,i,o,l)}}},Ed=ea({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=vi(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=vi(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),h(5===a.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`),h(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),h(5===n.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`),h(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),h(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Gr.runKernel(Ee,o,l)}}),Rd={kernelName:Te,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;h(bi(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=t;return{x:()=>qi(i.shape,e,o,r,a),filter:()=>Ed(i,e,o.shape,r,a)}}},Ad={kernelName:Ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(tl(pu(Va(n,"float32"))),e)}}},Fd={kernelName:Fe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(fu(Va(n,"float32")),e)}}},Dd={kernelName:_e,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=vo([r],s.rank);let n=eo(e,r,a,!i);return null!=t&&(n=Wu(n,t)),n}}}},_d={kernelName:ze,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;h(bi(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=t;return h(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),h(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),h(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),h(xi(r,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`),wi("depthwiseConv2d",a,i),{x:()=>Yu(l.shape,e,u,r,a,o,i),filter:()=>qu(l,e,u.shape,r,a,o,i)}}},Od={kernelName:Ue,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Gr.runKernel(Ve,a,n),filter:()=>Gr.runKernel(Ge,i,n)}}},Ld={kernelName:Ke,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Gr.runKernel(Xe,s)}}},Md={kernelName:qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Xa(Oo(tl(Ro(n))),2/Math.sqrt(Math.PI));return{x:()=>Xa(e,s)}}},zd={kernelName:Ze,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,n)}}},Bd={kernelName:Je,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>vi(e,n.shape)}}},Pd={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,Oo(n))}}},Wd={kernelName:st,gradFunc:e=>({x:()=>co(e)})},Ud={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{const t=Ka(e,Va(s,"float32")),a=io(n.shape,r);return a.length>0?vi(Ao(t,a),n.shape):t},b:()=>{let t=Xa(e,Va(n,"float32"));const a=io(s.shape,r);a.length>0&&(t=vi(Ao(t,a),s.shape));const i=Ro(s);return tl(Ka(t,Va(i,"float32")))}}}},Vd={kernelName:at,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?To(1):o,u=io(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=rl(r,a),d=Xa(e,l),p=uu(Ha(i,To(s))),f=Xa(Xa(Xa(p,p),p),To(-.5));return{x:()=>1===a.rank?vi(Xa(Xa(e,zo(vi(p,[1,1,1,a.shape[0]]),c)),l),r.shape):vi(Xa(Xa(e,p),l),r.shape),mean:()=>{let e=Xa(Xa(p,To(-1)),d);return 1===a.rank&&(e=Ao(e,u)),vi(e,a.shape)},variance:()=>{let e=Xa(Xa(f,h),d);return 1===a.rank&&(e=Ao(e,u)),vi(e,a.shape)},scale:()=>{const t=Xa(h,p);let n=Xa(e,t);return 1===a.rank&&(n=Ao(n,u)),vi(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ao(t,u)),vi(t,a.shape)}}}},Gd={kernelName:it,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a,batchDims:i}=n,o=w(a,s.shape)[0],l=(e,t,n)=>()=>{const s=e.shape,r=t.size,i=s.slice(0,o),l=i.length,u=s.slice(a,s.length).slice(1),c=u.length,h=Hd(0,l),d=Hd(l+1,l+1+c),p=jd([i,[r],u]),f=vi(n,p),g=vi(t,[r]),m=jd([[l],h,d]),b=Wu(f,m);let x=zu(b,g,e.shape[o]);const y=Io(m);return x=Wu(x,y),x};if(1===i){const t=s.shape[0],n=s.split(t,0);return{x:()=>Nu(n.map((t,n)=>l(t,r.slice(n,1),e.slice(n,1))())).reshape(s.shape),indices:()=>r}}return{x:l(s,r,e),indices:()=>r}}};function Hd(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function jd(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Kd={kernelName:ut,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>co(n),b:()=>co(s)}}},Xd={kernelName:ct,gradFunc:e=>({x:()=>Va(e,"float32")})},qd={kernelName:pt,gradFunc:e=>({x:()=>co(e)})},Yd={kernelName:ft,gradFunc:e=>({x:()=>co(e)})},Zd={kernelName:gt,gradFunc:e=>({x:()=>co(e)})},Jd={kernelName:mt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Uo(s,0);return{x:()=>uo(a,e,Xa(e,r))}}},Qd={kernelName:wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,Ha(n,1))}}},ep={kernelName:kt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,Va(n,"float32"))}}},tp={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=Oo(s);return rl(e,Xa(Ao(e,r,!0),t))}}}},np=ea({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Gr.runKernel(St,o,l)}}),sp={kernelName:$t,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>np(s,r,e,a,i,o,l)}}};function rp(e,t,n,s){return t.rank<n.rank&&(t=vi(t,ko(t.shape,s))),e.rank<n.rank&&(e=vi(e,ko(e.shape,s))),{x:()=>Xa(e,Va(lo(n,t),e.dtype))}}const ap={kernelName:Nt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=rp(e,t[1],a,w(r,a.shape));return{x:()=>i.x()}}},ip={kernelName:Tt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Xa(e,Va(Vo(n,s),"float32")),b:()=>Xa(e,Va(qo(n,s),"float32"))}}},op=ea({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Jr(e,"dy","maxPool3dGrad"),l=Jr(t,"input","maxPool3dGrad"),u=Jr(n,"output","maxPool3dGrad");let c=o,d=l,p=u,f=!1;4===l.rank&&(f=!0,c=vi(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),d=vi(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=vi(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),h(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),h(5===d.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`),h(5===p.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`),wi("maxPool3dGrad",a,i);const g={dy:c,input:d,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},b=Gr.runKernel(Ft,g,m);return f?vi(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}}),lp={kernelName:At,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>op(e,s,r,a,i,o,l)}}},up=ea({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Jr(e,"dy","maxPoolGrad"),l=Jr(t,"input","maxPoolGrad"),u=Jr(n,"output","maxPoolGrad");h(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),h(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),h(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),wi("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},d={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Gr.runKernel(Rt,c,d)}}),cp={kernelName:qt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>Ti(e,a,s.shape)}}};const hp={kernelName:En,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Ri(e,s,r)}}},dp={kernelName:Rn,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>$i(e,s)}}},pp=[sd,rd,ad,id,od,ld,ud,cd,hd,dd,pd,fd,md,xd,yd,kd,wd,vd,Id,Cd,$d,Sd,Td,Nd,Rd,Ad,Fd,Dd,_d,Od,{kernelName:He,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{const t=Ka(e,Va(s,"float32")),a=io(n.shape,r);return a.length>0?vi(Ao(t,a),n.shape):t},b:()=>{let t=Xa(e,Va(n,"float32"));const a=io(s.shape,r);a.length>0&&(t=vi(Ao(t,a),s.shape));const i=Ro(s);return tl(Ka(t,Va(i,"float32")))}}}},Ld,Md,zd,Bd,Pd,Ud,Wd,Vd,Gd,Kd,Xd,qd,Yd,Zd,Jd,Qd,ep,tp,sp,ap,ap,ip,lp,{kernelName:Et,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>up(e,s,r,a,i,o)}}},{kernelName:_t,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=w(r,s.shape),i=f(yo(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach(e=>{t[e]=1});const n=vi(e,t);return Ka(Xa(n,ml(s.shape,"float32")),i)}}}},{kernelName:Ot,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=rp(e,i,a,w(r,a.shape));return{x:()=>o.x()}}},{kernelName:Lt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Xa(e,Va(Yo(n,s),"float32")),b:()=>Xa(e,Va(Uo(n,s),"float32"))}}},{kernelName:Mt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map(e=>e[0]);return{x:()=>Ti(e,a,s.shape)}}},{kernelName:zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{const t=io(n.shape,r);return t.length>0?vi(Ao(e,t),n.shape):e},b:()=>{const t=Xa(e,tl(Po(Ka(n,s)))),a=io(s.shape,r);return a.length>0?vi(Ao(t,a),s.shape):t}}}},{kernelName:Pt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{const t=Xa(e,Va(s,"float32")),a=io(n.shape,r);return a.length>0?vi(Ao(t,a),n.shape):t},b:()=>{const t=Xa(e,Va(n,"float32")),a=io(s.shape,r);return a.length>0?vi(Ao(t,a),s.shape):t}}}},{kernelName:Wt,gradFunc:e=>({x:()=>tl(e)})},{kernelName:Kt,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>gl(n.shape,"float32")}}},{kernelName:jt,gradFunc:e=>({x:()=>co(e)})},{kernelName:Xt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Bu(e,s).map(e=>()=>e)}},cp,cp,{kernelName:Yt,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=oo(a.shape,i.shape);return{a:()=>{const t=Va(i,"float32");let n=Xa(e,Xa(t,No(a,rl(t,To(1)))));const s=io(a.shape,o);return s.length>0&&(n=Ao(n,s)),vi(n,a.shape)},b:()=>{const t=Uo(a,0),n=uo(t,Jo(a),co(a));let s=Xa(e,Xa(r,n));const l=io(i.shape,o);return l.length>0&&(s=Ao(s,l)),vi(s,i.shape)}}}},{kernelName:Zt,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Uo(n,0);return{x:()=>uo(r,e,Xa(e,s)),alpha:()=>{let t=uo(r,co(e),Xa(e,n));const a=io(s.shape,e.shape);return a.length>0&&(t=Ao(t,a)),vi(t,s.shape)}}}},{kernelName:Jt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map((e,t)=>t):"number"==typeof r?[r]:r,{x:()=>function(e,t,n){const s=e.shape.length,r=s-n.length,a=vo(n,s);let i=e;null!=a&&(i=Wu(e,a));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce((e,t)=>e*t,1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=vi(t,s),a=Qi(e,n,!0,!1),i=Qi(e,n,!0,!0),o=Xa(a,i);return Xa(r,o)}(i.reshape(o),t,r);if(u=u.reshape(i.shape),null!=a){const e=Io(a);u=Wu(u,e)}return u}(s,e,a)}}},{kernelName:rn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,tl(Ro(n)))}}},{kernelName:dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Xa(Yo(n,6),Tu(n));return{x:()=>Xa(e,Va(s,"float32"))}}},{kernelName:an,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,Va(Tu(n),"float32"))}}},{kernelName:on,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vi(e,n.shape)}}},{kernelName:cn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Gr.runKernel(hn,r,n)}}},{kernelName:ln,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Gr.runKernel(un,r,n)}}},{kernelName:pn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=w(s,e.shape);return{x:()=>ou(e,r)}}},{kernelName:fn,gradFunc:e=>({x:()=>co(e)})},{kernelName:gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>tl(Ka(e,Xa(No(n,1.5),2)))}}},{kernelName:yn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Va(co(n),"float32"),t:()=>Xa(e,Va(n,e.dtype)),e:()=>Xa(e,Va(ll(n),e.dtype))}}},{kernelName:kn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Uo(n,To(0)),s=To(mh),r=To(bh),a=Xa(e,r),i=Xa(Xa(e,s),Oo(Va(n,"float32")));return uo(t,a,i)}}}},{kernelName:$n,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,Xa(n,rl(To(1),n)))}}},{kernelName:Cn,gradFunc:e=>({x:()=>co(e)})},{kernelName:vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(Zi(Va(n,"float32")),e)}}},{kernelName:In,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(Ji(Va(n,"float32")),e)}}},{kernelName:wn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Xc(s,r,a),u=[];for(let c=0;c<e.rank;c++)u.push([o[c],i[c]-o[c]-l[c]]);return{x:()=>Cl(e,u)}}},{kernelName:An,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Xa(e,s);return{logits:()=>rl(a,Xa(Ao(a,[r],!0),s))}}},{kernelName:Sn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,Ni(n))}}},hp,hp,dp,dp,{kernelName:Nn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,Xa(Eo(Va(n,"float32")),2))}}},{kernelName:Mn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=To(2);return{a:()=>Xa(e,Xa(r,rl(n,s))),b:()=>Xa(e,Xa(r,rl(s,n)))}}},{kernelName:zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(e,Xa(Va(n,"float32"),2))}}},{kernelName:ts,gradFunc:e=>({x:()=>co(e)})},{kernelName:Gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=oo(n.shape,s.shape);return{a:()=>{let t=e;const s=io(n.shape,r);return s.length>0&&(t=Ao(t,s)),vi(t,n.shape)},b:()=>{let t=e;const n=io(s.shape,r);return n.length>0&&(t=Ao(t,n)),vi(tl(t),s.shape)}}}},{kernelName:Tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;w(a,s.shape).forEach(e=>{r[e]=1});const i=vi(e,r),o=Xa(i,ml(s.shape,"float32"));return{x:()=>o}}},{kernelName:Hn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ka(e,Ro(Zi(n)))}}},{kernelName:jn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Xa(rl(To(1),Ro(n)),e)}}},{kernelName:Kn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=co(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=Ha(t,Ti(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=Ha(t,Ti(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=Ha(t,Ti(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=Ha(t,Ti(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Yn,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Io(r);return{x:()=>Wu(e,a)}}},{kernelName:Jn,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>Nu(e,r)}}},{kernelName:Qn,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=pl(t,co(t)),s=Wo(e,n);let r=Vo(t,To(0,"int32"));const a=s.rank-r.rank;for(let o=0;o<a;++o)r=Lo(r,o+1);r=ol(r,ml(s.shape,"bool"));const i=co(s);return uo(r,s,i)}(e,n)}}},{kernelName:es,gradFunc:e=>({x:()=>co(e)})}];for(const Z_ of pp)ps(Z_);kr().prototype.abs=function(){return this.throwIfDisposed(),qa(this)},kr().prototype.acos=function(){return this.throwIfDisposed(),Ya(this)},kr().prototype.acosh=function(){return this.throwIfDisposed(),Za(this)},kr().prototype.add=function(e){return this.throwIfDisposed(),Ha(this,e)},kr().prototype.all=function(e,t){return this.throwIfDisposed(),Ja(this,e,t)},kr().prototype.any=function(e,t){return this.throwIfDisposed(),Qa(this,e,t)},kr().prototype.argMax=function(e){return this.throwIfDisposed(),ei(this,e)},kr().prototype.argMin=function(e){return this.throwIfDisposed(),ti(this,e)},kr().prototype.asScalar=function(){return this.throwIfDisposed(),h(1===this.size,()=>"The array must have only 1 element."),vi(this,[])},kr().prototype.asType=function(e){return this.throwIfDisposed(),Va(this,e)},kr().prototype.as1D=function(){return this.throwIfDisposed(),vi(this,[this.size])},kr().prototype.as2D=function(e,t){return this.throwIfDisposed(),vi(this,[e,t])},kr().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),vi(this,[e,t,n])},kr().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),vi(this,[e,t,n,s])},kr().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),vi(this,[e,t,n,s,r])},kr().prototype.asin=function(){return this.throwIfDisposed(),ni(this)},kr().prototype.asinh=function(){return this.throwIfDisposed(),si(this)},kr().prototype.atan=function(){return this.throwIfDisposed(),ri(this)},kr().prototype.atan2=function(e){return this.throwIfDisposed(),ai(this,e)},kr().prototype.atanh=function(){return this.throwIfDisposed(),ii(this)},kr().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Ii(this,e,t,n,s)},kr().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Ri(this,e,t)},kr().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),Ai(this,e,t,n,s,r)},kr().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Li(this,e)},kr().prototype.cast=function(e){return this.throwIfDisposed(),Va(this,e)},kr().prototype.ceil=function(){return this.throwIfDisposed(),Mi(this)},kr().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Bi(this,e,t)},kr().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof yr&&(e=[e]),$i([this,...e],t)},kr().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Hi(this,e,t,n,s,r,a)},kr().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Ki(this,e,t,n,s,r)},kr().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Gi(this,e,t,n,s,r,a)},kr().prototype.cos=function(){return this.throwIfDisposed(),Zi(this)},kr().prototype.cosh=function(){return this.throwIfDisposed(),Ji(this)},kr().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Qi(this,e,t,n)},kr().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),eo(this,e,t,n)},kr().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),no(this,e,t)},kr().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),so(this,e,t,n,s,r,a)},kr().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),ro(this,e,t,n,s,r)},kr().prototype.divNoNan=function(e){return this.throwIfDisposed(),ho(this,e)},kr().prototype.div=function(e){return this.throwIfDisposed(),Ka(this,e)},kr().prototype.dot=function(e){return this.throwIfDisposed(),po(this,e)},kr().prototype.elu=function(){return this.throwIfDisposed(),go(this)},kr().prototype.equal=function(e){return this.throwIfDisposed(),lo(this,e)},kr().prototype.erf=function(){return this.throwIfDisposed(),mo(this)},kr().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),_o(this,e,t)},kr().prototype.exp=function(){return this.throwIfDisposed(),Oo(this)},kr().prototype.expandDims=function(e){return this.throwIfDisposed(),Lo(this,e)},kr().prototype.expm1=function(){return this.throwIfDisposed(),Mo(this)},kr().prototype.fft=function(){return this.throwIfDisposed(),ku(this)},kr().prototype.flatten=function(){return this.throwIfDisposed(),vi(this,[this.size])},kr().prototype.floor=function(){return this.throwIfDisposed(),Po(this)},kr().prototype.floorDiv=function(e){return this.throwIfDisposed(),ja(this,e)},kr().prototype.gather=function(e,t,n){return this.throwIfDisposed(),Wo(this,e,t,n)},kr().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Vo(this,e)},kr().prototype.greater=function(e){return this.throwIfDisposed(),Uo(this,e)},kr().prototype.ifft=function(){return this.throwIfDisposed(),wu(this)},kr().prototype.irfft=function(){return this.throwIfDisposed(),vu(this)},kr().prototype.isFinite=function(){return this.throwIfDisposed(),Ho(this)},kr().prototype.isInf=function(){return this.throwIfDisposed(),jo(this)},kr().prototype.isNaN=function(){return this.throwIfDisposed(),Ko(this)},kr().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Xo(this,e)},kr().prototype.lessEqual=function(e){return this.throwIfDisposed(),Yo(this,e)},kr().prototype.less=function(e){return this.throwIfDisposed(),qo(this,e)},kr().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Zo(this,e,t,n,s)},kr().prototype.logSigmoid=function(){return this.throwIfDisposed(),sl(this)},kr().prototype.logSoftmax=function(e){return this.throwIfDisposed(),al(this,e)},kr().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),il(this,e,t)},kr().prototype.log=function(){return this.throwIfDisposed(),Jo(this)},kr().prototype.log1p=function(){return this.throwIfDisposed(),Qo(this)},kr().prototype.logicalAnd=function(e){return this.throwIfDisposed(),ol(this,e)},kr().prototype.logicalNot=function(){return this.throwIfDisposed(),ll(this)},kr().prototype.logicalOr=function(e){return this.throwIfDisposed(),ul(this,e)},kr().prototype.logicalXor=function(e){return this.throwIfDisposed(),cl(this,e)},kr().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Si(this,e,t,n)},kr().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),hl(this,e,t,n,s)},kr().prototype.max=function(e,t){return this.throwIfDisposed(),$o(this,e,t)},kr().prototype.maximum=function(e){return this.throwIfDisposed(),pl(this,e)},kr().prototype.mean=function(e,t){return this.throwIfDisposed(),fl(this,e,t)},kr().prototype.min=function(e,t){return this.throwIfDisposed(),So(this,e,t)},kr().prototype.minimum=function(e){return this.throwIfDisposed(),bl(this,e)},kr().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),xl(this,e,t)},kr().prototype.mod=function(e){return this.throwIfDisposed(),yl(this,e)},kr().prototype.mul=function(e){return this.throwIfDisposed(),Xa(this,e)},kr().prototype.neg=function(){return this.throwIfDisposed(),tl(this)},kr().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Do(this,e,t,n)},kr().prototype.notEqual=function(e){return this.throwIfDisposed(),wl(this,e)},kr().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),vl(this,e,t,n)},kr().prototype.onesLike=function(){return this.throwIfDisposed(),Il(this)},kr().prototype.pad=function(e,t){return this.throwIfDisposed(),Cl(this,e,t)},kr().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),Sl(this,e,t,n,s,r,a)},kr().prototype.pow=function(e){return this.throwIfDisposed(),No(this,e)},kr().prototype.prelu=function(e){return this.throwIfDisposed(),Nl(this,e)},kr().prototype.prod=function(e,t){return this.throwIfDisposed(),Tl(this,e,t)},kr().prototype.reciprocal=function(){return this.throwIfDisposed(),ru(this)},kr().prototype.relu=function(){return this.throwIfDisposed(),au(this)},kr().prototype.relu6=function(){return this.throwIfDisposed(),iu(this)},kr().prototype.reshapeAs=function(e){return this.throwIfDisposed(),vi(this,e.shape)},kr().prototype.reshape=function(e){return this.throwIfDisposed(),vi(this,e)},kr().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),mc(this,e,t,n)},kr().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),bc(this,e,t,n)},kr().prototype.reverse=function(e){return this.throwIfDisposed(),ou(this,e)},kr().prototype.rfft=function(){return this.throwIfDisposed(),Cu(this)},kr().prototype.round=function(){return this.throwIfDisposed(),lu(this)},kr().prototype.rsqrt=function(){return this.throwIfDisposed(),uu(this)},kr().prototype.selu=function(){return this.throwIfDisposed(),cu(this)},kr().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),hu(this,e,t,n,s,r,a)},kr().prototype.sigmoid=function(){return this.throwIfDisposed(),Ni(this)},kr().prototype.sign=function(){return this.throwIfDisposed(),du(this)},kr().prototype.sin=function(){return this.throwIfDisposed(),pu(this)},kr().prototype.sinh=function(){return this.throwIfDisposed(),fu(this)},kr().prototype.slice=function(e,t){return this.throwIfDisposed(),Ti(this,e,t)},kr().prototype.softmax=function(e){return this.throwIfDisposed(),yu(this,e)},kr().prototype.softplus=function(){return this.throwIfDisposed(),nl(this)},kr().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),$l(this,e,t)},kr().prototype.split=function(e,t){return this.throwIfDisposed(),Iu(this,e,t)},kr().prototype.sqrt=function(){return this.throwIfDisposed(),Eo(this)},kr().prototype.square=function(){return this.throwIfDisposed(),Ro(this)},kr().prototype.squaredDifference=function(e){return this.throwIfDisposed(),$u(this,e)},kr().prototype.squeeze=function(e){return this.throwIfDisposed(),Su(this,e)},kr().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof yr?[this,e]:[this,...e];return Nu(n,t)},kr().prototype.step=function(e){return this.throwIfDisposed(),Tu(this,e)},kr().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),Eu(this,e,t,n,s,r,a,i,o)},kr().prototype.sub=function(e){return this.throwIfDisposed(),rl(this,e)},kr().prototype.sum=function(e,t){return this.throwIfDisposed(),Ao(this,e,t)},kr().prototype.tan=function(){return this.throwIfDisposed(),Ru(this)},kr().prototype.tanh=function(){return this.throwIfDisposed(),Ei(this)},kr().prototype.tile=function(e){return this.throwIfDisposed(),zo(this,e)},kr().prototype.toBool=function(){return this.throwIfDisposed(),Va(this,"bool")},kr().prototype.toFloat=function(){return this.throwIfDisposed(),Va(this,"float32")},kr().prototype.toInt=function(){return this.throwIfDisposed(),Va(this,"int32")},kr().prototype.topk=function(e,t){return this.throwIfDisposed(),Ou(this,e,t)},kr().prototype.transpose=function(e){return this.throwIfDisposed(),Wu(this,e)},kr().prototype.unique=function(e){return this.throwIfDisposed(),Mu(this,e)},kr().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),zu(this,e,t)},kr().prototype.unstack=function(e){return this.throwIfDisposed(),Bu(this,e)},kr().prototype.where=function(e,t){return this.throwIfDisposed(),uo(e,this,t)},kr().prototype.zerosLike=function(){return this.throwIfDisposed(),co(this)};class fp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fp.prototype)}}class gp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,gp.prototype)}}class mp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,mp.prototype)}}class bp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,bp.prototype)}}class xp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,xp.prototype)}}class yp{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function kp(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function wp(e,t){if(!e)throw new xp(t)}function vp(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Ip(e){return 1===e.length?e[0]:e}function Cp(e){return Array.isArray(e)?e:[e]}function $p(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Sp(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let Np={};function Tp(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Ep(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>Ep(e));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Ep(t):e[n]=t.value)}}}function Rp(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Np)a=Np[r];else if(a=t[r],null==a)throw new mp(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new mp(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Np?[o,l]=Np.className:i in t&&([o,l]=t[i]),null==o)throw new mp(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const n of Object.keys(Np))e[n]=Np[n];for(const r of Object.keys(n))e[r]=n[r];a.config.customObjects=e;const t=Object.assign({},Np);for(const r of Object.keys(n))Np[r]=n[r];Ep(a.config);const s=l(o,a.config,n,r);return Np=Object.assign({},t),s}{const e=Object.assign({},Np);for(const s of Object.keys(n))Np[s]=n[s];const t=new o(a.config);return Np=Object.assign({},e),t}}}function Ap(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Fp(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Dp(e){if(null==e)throw new mp(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function _p(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new mp(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Op(e,t,n=0,s=1/0){return wp(n>=0),wp(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every(e=>typeof e===t)}function Lp(e,t){Array.isArray(e)?(h(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>Lp(e,`element ${n+1} of ${t}`))):h(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${Mp(e)}.`)}function Mp(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>Mp(e)).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function zp(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Bp=0;function Pp(){return Bp++}const Wp={};function Up(e=""){return e in Wp||(Wp[e]=0),Wp[e]+=1,e+Wp[e].toString()}const Vp=["channelsFirst","channelsLast"],Gp=["nearest","bilinear"],Hp=["valid","same","causal"],jp=["max","avg"],Kp=["sum","mul","concat","ave"],Xp=new Map;function qp(e){_p(Vp,"DataFormat",e)}function Yp(e){_p(Hp,"PaddingMode",e)}function Zp(e){_p(jp,"PoolMode",e)}const Jp=[];function Qp(e,t){Jp.push(e);try{const e=t();return Jp.pop(),e}catch(q_){throw Jp.pop(),q_}}function ef(e){if(!sf(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Jp.length?"":Jp.join("/")+"/")+e}function tf(e){if(!sf(e))throw new Error("Not a valid tensor name: '"+e+"'");Xp.has(e)||Xp.set(e,0);const t=Xp.get(e);if(Xp.set(e,Xp.get(e)+1),t>0){const n=`${e}_${t}`;return Xp.set(n,1),n}return e}const nf=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function sf(e){return!!e.match(nf)}function rf(e){return e===parseInt(e.toString(),10)}function af(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function of(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function lf(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function uf(e,t){if(t<e)throw new mp(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let cf;function hf(){return null==cf&&(cf=Gr.backend.epsilon()),cf}function df(e,t){return Va(e,t)}function pf(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),vi(e,n)}function ff(e,t,n){return oa(()=>{switch(e.rank){case 1:return gu(e,t,n);case 2:return mu(e,[t,0],[n,e.shape[1]]);case 3:return bu(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return xu(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ti(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ti(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new mp(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function gf(e,t,n){return oa(()=>{switch(e.rank){case 1:return gu(e,t,n);case 2:return mu(e,[0,t],[e.shape[0],n]);case 3:return bu(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return xu(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new mp(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function mf(e,t,n,s){return oa(()=>{switch(e.rank){case 1:return gu(e,t,n);case 2:switch(s){case 1:return ff(e,t,n);case 2:return gf(e,t,n);default:throw new mp(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return ff(e,t,n);case 2:return bu(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return gf(e,t,n);default:throw new mp(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return ff(e,t,n);case 2:return xu(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return xu(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return gf(e,t,n);default:throw new mp(`The axis is not within the rank of the tensor ${s}`)}default:throw new mp(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function bf(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),$i(e,t)}function xf(e,t){switch(e.rank){case 1:return Pi([e,t]);case 2:return Wi([e,t],0);case 3:return Ui([e,t],0);case 4:return Vi([e,t],0);default:throw new mp(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function yf(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new mp(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return zo(e,t)}function kf(e,t=0,n=1,s,r){return eu(e,t,n,s,r)}function wf(e,t,n,s){if(e.rank<2||t.rank<2)throw new bp(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new bp(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Zu({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Cf(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=vi(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=vi(Wu(t,c),[l,-1]);const h=[...r,...u];return vi(Zu({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Cf(e.rank,s,"channelsLast"):null,activation:n}),h)}}function vf(e,t,n){return oa(()=>(t=Array.isArray(t)?Au(t,"int32"):Va(t,"int32"),Wo(e,t,n)))}function If(e){return Xa(e,e)}function Cf(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new mp(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?vi(t,[1,s[0],1,1,1]):vi(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?vi(t,[1,1,1,1,s[0]]):vi(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?vi(t,[1,s[0],1,1]):vi(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?vi(t,[1,1,1,s[0]]):vi(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?vi(t,[1,s[0],1]):vi(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?vi(t,[1,1,s[0]]):vi(t,[1].concat(s))}else if(e<3)return t;throw new mp(`Unsupported input rank by biasAdd: ${t.rank}`)}function $f(e,t,n){return oa(()=>(null==n&&(n="channelsLast"),qp(n),Ha(e,Cf(e.rank,t,n))))}function Sf(e,t,n,s){return oa(()=>Uu(e,t,n,s))}function Nf(e,t,n=!1){return n?e():t()}const Tf=["fanIn","fanOut","fanAvg"],Ef=["normal","uniform","truncatedNormal"];class Rf extends Ic{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Af extends Rf{apply(e,t){return gl(e,t)}}Af.className="Zeros",$c(Af);class Ff extends Rf{apply(e,t){return ml(e,t)}}Ff.className="Ones",$c(Ff);class Df extends Rf{constructor(e){if(super(),"object"!=typeof e)throw new mp(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new mp(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return oa(()=>Xa(To(this.value),ml(e,t)))}getConfig(){return{value:this.value}}}Df.className="Constant",$c(Df);class _f extends Rf{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return tu(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}_f.className="RandomUniform",$c(_f);class Of extends Rf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new bp(`randomNormal does not support dType ${t}.`);return kf(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Of.className="RandomNormal",$c(Of);class Lf extends Rf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new bp(`truncatedNormal does not support dType ${t}.`);return Lu(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Lf.className="TruncatedNormal",$c(Lf);class Mf extends Rf{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return oa(()=>{if(2!==e.length||e[0]!==e[1])throw new mp("Identity matrix initializer can only be used for 2D square matrices.");return Xa(this.gain,Bo(e[0]))})}getConfig(){return{gain:this.gain}}}Mf.className="Identity",$c(Mf);class zf extends Rf{constructor(e){if(super(),e.scale<0)throw new mp(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,_p(Tf,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){_p(Ef,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(qp(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=af(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=af(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=af(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new bp(`${this.getClassName()} does not support dType ${t}.`);return Lu(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return tu(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}zf.className="VarianceScaling",$c(zf);class Bf extends zf{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return zf.className}}Bf.className="GlorotUniform",$c(Bf);class Pf extends zf{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return zf.className}}Pf.className="GlorotNormal",$c(Pf);class Wf extends zf{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return zf.className}}Wf.className="HeNormal",$c(Wf);class Uf extends zf{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return zf.className}}Uf.className="HeUniform",$c(Uf);class Vf extends zf{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return zf.className}}Vf.className="LeCunNormal",$c(Vf);class Gf extends zf{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return zf.className}}Gf.className="LeCunUniform",$c(Gf);class Hf extends Rf{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return oa(()=>{if(e.length<2)throw new bp("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=f(e.slice(0,-1)),s=e[e.length-1];this.ELEMENTS_WARN_SLOW;const r=kf([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),a=kc.qr(r,!1);let i=a[0];const o=a[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return i=Xa(i,o.sign()),n<s&&(i=i.transpose()),Xa(To(this.gain),i.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}Hf.className="Orthogonal",$c(Hf);const jf={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Kf(e,t={}){return Rp(e,Cc.getMap().classNameMap,t,"initializer")}function Xf(e){return Tp(e)}function qf(e){if("string"==typeof e){const t=e in jf?jf[e]:e;if("GlorotNormal"===t)return new Pf;if("GlorotUniform"===t)return new Bf;if("HeNormal"===t)return new Wf;if("HeUniform"===t)return new Uf;if("LeCunNormal"===t)return new Vf;if("LeCunUniform"===t)return new Gf;{const e={};return e.className=t,e.config={},Kf(e)}}return e instanceof Rf?e:Kf(e)}function Yf(e){return Array.isArray(e)&&Array.isArray(e[0])}function Zf(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Jf(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new mp(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Qf(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new mp(`Expected exactly 1 Shape; got ${e.length}`)}return e}function eg(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce((e,t)=>e*t);return t}const tg="Variable";class ng{constructor(e,t="float32",n=tg,s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Pp(),n=null==n?tg:n,this.originalName=ef(n),this.name=tf(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return Gr.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function sg(e){return e.map(e=>e.read())}function rg(e){e.forEach(e=>{e[0].write(e[1])})}class ag{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class ig{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Pp(),null!=a&&(this.originalName=ef(a),this.name=tf(this.originalName)),this.rank=t.length}}let og=0;class lg{constructor(e,t){this.callArgs=t,this.id=og++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let ug=0;class cg extends Ic{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=ug++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=$p(e)+"_"+Up(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new gp(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new mp(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Ip(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Ip(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new fp(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new fp(`Layer ${this.name} is not connected, no input to return.`);return Ip(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new fp(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new fp(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Ip(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=Cp(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=Cp(this.inputSpec);if(t.length!==n.length)throw new mp(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let s=0;s<t.length;s++){const e=t[s],r=n[s];if(null==r)continue;const a=e.rank;if(null!=r.ndim&&a!==r.ndim)throw new mp(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new mp(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new mp(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&e.dtype!==r.dtype)throw new mp(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${e.dtype}.`);if(r.axes){const t=e.shape;for(const e in r.axes){const n=Number(e),a=r.axes[e],i=n>=0?t[n]:t[t.length+n];if(null!=a&&-1===[a,null].indexOf(i))throw new mp(`Input ${s} is incompatible with layer ${this.name}: expected axis ${n} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const n=r.shape[t],a=e.shape[t];if(null!=n&&null!=a&&n!==a)throw new mp(`Input ${s} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${e.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Cp(e),s=function(e){let t=!0;for(const n of Cp(e))if(!(n instanceof ig)){t=!1;break}return t}(e),r=function(e){let t=!0;for(const n of Cp(e))if(n instanceof ig){t=!1;break}return t}(e);if(s===r)throw new mp("Arguments to apply() must be all SymbolicTensors or all Tensors");return Qp(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Cp(e))t.push(n.shape);this.build(Ip(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,s);const r=Cp(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Ip(a),null!=this.activityRegularizer)throw new bp("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Cp(e);const t=[];for(const n of e)t.push(n.shape);return Ip(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new ig(a,n,this,Cp(e),t,this.name,s)):new ig(a,s,this,Cp(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new bp("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length);else{let t=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new fp(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new fp(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new gp(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return eg(this.weights)}build(e){this.built=!0}getWeights(e=!1){return sg(e?this.trainableWeights:this.weights)}setWeights(e){oa(()=>{const t=this.weights;if(t.length!==e.length)throw new mp(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=sg(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!g(a.shape,o.shape))throw new mp(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}rg(n)})}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new mp(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():qf("zeros"));const l=s.apply(t,n),u=new ng(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss(()=>r.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Cp(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach(e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const s=this.computeMask(e,n),r=Cp(t),a=Cp(s);if(r.length!==a.length)throw new Error(`${this.name} outputs ${r.length} tensors but ${r.length} masks for those tensors`);for(let i=0;i<r.length;i++)r[i].kerasMask=a[i]}addInboundNode(e,t,n,s,r,a,i=null){const o=Cp(e);t=Cp(t),n=Cp(n),s=Cp(s),r=Zf(r),a=Zf(a);const l=[],u=[],c=[];for(const h of o)l.push(h.sourceLayer),u.push(h.nodeIndex),c.push(h.tensorIndex);new lg({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0===--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function hg(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=hg(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class dg extends cg{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Up("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new mp("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new mp("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new mp("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new ig(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new lg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new mp(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}dg.className="InputLayer",$c(dg);class pg{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof pg)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new mp(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Va(t,e.dtype)}catch(Y_){throw new mp(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof ig){if(null==this.id2Value[e.id])throw new mp(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new mp(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof ig){if(null==this.id2Value[e.id])throw new mp(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new mp(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&la(this.id2Mask)}}const fg=new yp,gg=new yp;function mg(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map(e=>e.name),l=[],u=t.names();for(const h of o)-1!==u.indexOf(h)?l.push(t.getValue(h)):l.push(null);const c=o.join(",")+"|"+t.names().sort().join(",");let d,p=fg.get(c);if(null==p){const e=function(e,t){h(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===e.length){const r=xg(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=xg(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach(e=>s[t].add(e))}}return{sorted:n,recipientCounts:bg(s)}}(i,t);p=e.sorted,d=e.recipientCounts,fg.put(c,p),gg.put(c,d)}d={},r||Object.assign(d,gg.get(c));const f=new pg(t);for(let h=0;h<p.length;++h){const e=p[h],s=e.sourceLayer;if(s instanceof dg)continue;const a=[],i=[],u=[];let c=!1;for(const n of e.inputs){const e=f.getValue(n),s=f.getMask(n);a.push(e),i.push(s),null!=s&&(c=!0),r||(d[n.name]--,0!==d[n.name]||t.hasKey(n)||-1!==o.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||u.push(e))}c&&((n=n||{}).mask=i[0]);const g=Cp(s.apply(a,n));let m=null;s.supportsMasking&&(m=s.computeMask(a,i));const b=yg(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(m)?m[0]:m);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}r||la(u)}return f.disposeMasks(),a?l:l[0]}function bg(e){const t={};for(const n in e)t[n]=e[n].size;return t}function xg(e,t){const n=new Set,s=[],r={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function yg(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function kg(e,t){return oa(()=>Eo(Ao(Xa(e,e),t,!0)))}H().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function(e){null!=fg&&fg.setMaxEntries(e),null!=gg&&gg.setMaxEntries(e)});class wg extends Ic{getConfig(){return{}}}class vg extends wg{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return oa(()=>{const t=kg(e,this.axis),n=Bi(t,0,this.maxValue);return Xa(e,Ka(n,Ha(hf(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}vg.className="MaxNorm",$c(vg);class Ig extends wg{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return oa(()=>Ka(e,Ha(hf(),kg(e,this.axis))))}getConfig(){return{axis:this.axis}}}Ig.className="UnitNorm",$c(Ig);class Cg extends wg{apply(e){return au(e)}}Cg.className="NonNeg",$c(Cg);class $g extends wg{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return oa(()=>{const t=kg(e,this.axis),n=Ha(Xa(this.rate,Bi(t,this.minValue,this.maxValue)),Xa(1-this.rate,t));return Xa(e,Ka(n,Ha(hf(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}$g.className="MinMaxNorm",$c($g);const Sg={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Ng(e){return Tp(e)}function Tg(e,t={}){return Rp(e,Cc.getMap().classNameMap,t,"constraint")}function Eg(e){return null==e?null:"string"==typeof e?Tg({className:e in Sg?Sg[e]:e,config:{}}):e instanceof wg?e:Tg(e)}async function Rg(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];la(s)}}function Ag(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Fg,Dg;(Dg=Fg||(Fg={}))[Dg.SILENT=0]="SILENT",Dg[Dg.VERBOSE=1]="VERBOSE";class _g{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Og{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Lg extends _g{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const s in t){const e=t[s];if("number"==typeof e)this.totals.hasOwnProperty(s)||(this.totals[s]=0),this.totals[s]=this.totals[s]+e*n;else{let t;s in this.totals?t=this.totals[s]:this.totals[s]=0;const r=oa(()=>Ha(this.totals[s],Xa(e,n)));this.totals[s]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const n of this.params.metrics)null!=this.totals[n]&&("number"==typeof this.totals[n]?t[n]=this.totals[n]/this.seen:oa(()=>{const e=Xa(Ka(1,this.seen),this.totals[n]);t[n]=e,this.totals[n].dispose(),ua(t[n])}))}}class Mg extends _g{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const n in t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const s=await Promise.all(e);for(let r=0;r<s.length;++r)this.history[t[r]][n[r]].dispose(),this.history[t[r]][n[r]]=s[r][0]}}class zg extends _g{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||eh,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");T(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():sr();return(...a)=>{const i=null!=n?n():sr();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Rg(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Rg(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Rg(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Rg(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Rg(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):T(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Rg(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Rg(e),await this.trainEnd(e))}}function Bg(e,t){return null==e&&(e={}),e instanceof _g?[e]:Array.isArray(e)&&e[0]instanceof _g?e:Cp(e).map(e=>new zg(e,t))}class Pg{constructor(){}static registerCallbackConstructor(e,t){h(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),Pg.checkForDuplicate(t),null==Pg.constructors[e]&&(Pg.constructors[e]=[]),Pg.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Pg.constructors)Pg.constructors[+t].forEach(t=>{if(t===e)throw new mp("Duplicate callback constructor.")})}static clear(){Pg.constructors={}}static createCallbacks(e){const t=[];for(const n in Pg.constructors){const s=+n;e>=s&&t.push(...Pg.constructors[s])}return t.map(e=>new e)}}function Wg(e,t,n,s,r,a,i,o,l){const u=new Mg,c=[new Lg,...Pg.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Og(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Ug(e,t={},n=!1){return Rp(e,Cc.getMap().classNameMap,t,"layer",n)}function Vg(e,t){return oa(()=>{"float32"!==e.dtype&&(e=Va(e,"float32"));const n=Ao(If(e),t,!0),s=zi(n.shape,hf()),r=Eo(pl(n,s));return Ka(e,r)})}function Gg(e,t){return oa(()=>fl(If(rl(t,e)),-1))}function Hg(e,t){return oa(()=>fl(qa(rl(t,e)),-1))}function jg(e,t){return oa(()=>{const n=rl(e,t),s=Bi(qa(e),hf(),Number.MAX_VALUE),r=qa(Ka(n,s));return Xa(100,fl(r,-1))})}function Kg(e,t,n=!1){return oa(()=>{if(n)t=yu(t);else{const e=Ao(t,t.shape.length-1,!0);t=Ka(t,e)}return t=Bi(t,hf(),1-hf()),tl(Ao(Xa(Va(e,"float32"),Jo(t)),t.shape.length-1))})}function Xg(e,t,n=!1){return oa(()=>{const s=Va(Po(function(e){const t=[af(e.shape)];return vi(e,t)}(e)),"int32"),r=(t=Bi(t,hf(),1-hf())).shape;return Kg(vi(vl(s,r[r.length-1]),r),t,n)})}function qg(e,t){return oa(()=>{let n;return n=Bi(t,hf(),1-hf()),n=Jo(Ka(n,rl(1,n))),fl(function(e,t){if(!g(e.shape,t.shape))throw new mp(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return oa(()=>{const n=au(t),s=tl(qa(t));return Ha(rl(n,Xa(t,e)),Qo(Oo(s)))})}(e,n),-1)})}function Yg(e,t){return oa(()=>{const n=Vg(e,-1),s=Vg(t,-1),r=Xa(n,s);return tl(Ao(r,-1))})}Pg.constructors={};const Zg={meanSquaredError:Gg,meanAbsoluteError:Hg,meanAbsolutePercentageError:jg,meanSquaredLogarithmicError:function(e,t){return oa(()=>{const n=Bi(t,hf(),Number.MAX_VALUE),s=Jo(Ha(1,n)),r=Bi(e,hf(),Number.MAX_VALUE),a=Jo(Ha(1,r));return fl(If(rl(s,a)),-1)})},squaredHinge:function(e,t){return oa(()=>{const n=pl(0,rl(1,Xa(e,t)));return fl(If(n),-1)})},hinge:function(e,t){return oa(()=>{const n=pl(0,rl(1,Xa(e,t)));return fl(n,-1)})},categoricalHinge:function(e,t){return oa(()=>{const n=Ao(Xa(e,t),-1),s=$o(Xa(rl(1,e),t),-1);return pl(0,Ha(1,rl(s,n)))})},logcosh:function(e,t){return oa(()=>{const n=Math.log(2),s=rl(t,e),r=rl(Ha(s,nl(Xa(-2,s))),n);return fl(r,-1)})},categoricalCrossentropy:Kg,sparseCategoricalCrossentropy:Xg,binaryCrossentropy:qg,kullbackLeiblerDivergence:function(e,t){return oa(()=>{const n=Bi(e,hf(),1),s=Bi(t,hf(),1);return Ao(Xa(e,Jo(Ka(n,s))),-1)})},poisson:function(e,t){return oa(()=>{const n=Jo(Ha(hf(),t));return fl(rl(t,Xa(e,n)),-1)})},cosineProximity:Yg};function Jg(e){if("string"==typeof e){if(e in Zg)return Zg[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new mp(t)}return e}function Qg(e,t){return oa(()=>{const n=Xa(.5,Il(t)),s=df(Uo(t,n),e.dtype);return fl(lo(e,s),-1)})}function em(e,t){return oa(()=>df(lo(ei(e,-1),ei(t,-1)),"float32"))}function tm(e,t){return qg(e,t)}function nm(e,t){return e.rank===t.rank&&(e=Su(e,[e.rank-1])),(t=ei(t,-1)).dtype!==e.dtype&&(t=Va(t,e.dtype)),Va(lo(e,t),"float32")}const sm=Kg,rm=Xg,am={binaryAccuracy:Qg,categoricalAccuracy:em,precision:function(e,t){return oa(()=>{const n=function(e,t){return oa(()=>Va(Ao(ol(lo(e,1),lo(t,1))),"float32"))}(e,t),s=function(e,t){return oa(()=>Va(Ao(ol(lo(e,0),lo(t,1))),"float32"))}(e,t),r=Ha(n,s);return Va(uo(Uo(r,0),Ka(n,r),0),"float32")})},categoricalCrossentropy:sm,sparseCategoricalCrossentropy:rm,mse:Gg,MSE:Gg,mae:Hg,MAE:Hg,mape:jg,MAPE:jg,cosine:Yg};function im(e){if("string"==typeof e&&e in am)return am[e];if("string"!=typeof e&&null!=e)return e;throw new mp(`Unknown metric ${e}`)}function om(e){if(wp(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Zg))if(Zg[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(am))if(am[n]===e){t=n;break}return void 0!==t?t:e.name}}function lm(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!um(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");n&&JSON.stringify(e).length}function um(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!um(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!um(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function cm(e,t,n=console.log){let s="";for(let r=0;r<e.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=e[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);n(s)}function hm(e,t,n){let s,r;try{r=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(Y_){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(Y_){s="multiple"}cm([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function dm(e,t,n,s){let r,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(Y_){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(Y_){r="multiple"}const i=[];for(const c of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(c)))for(let e=0;e<c.inboundLayers.length;++e){const t=c.inboundLayers[e].name,n=c.nodeIndices[e],s=c.tensorIndices[e];i.push(`${t}[${n}][${s}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];cm([`${o} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let c=1;c<i.length;++c)cm(["","","","",i[c]],t,s)}function pm(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function fm(e,t){if(null===e)return null;if("string"==typeof e)return Sp(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];pm(t,r,s)?n.push(s):n.push(fm(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=Sp(n);t[e]=fm(s,e)}}return t}}function gm(e,t){if(null==e)return null;if("string"==typeof e)return $p(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];pm(t,r,s)?n.push(s):n.push(gm(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[$p(n)]="name"!==n&&"className"!==n||"string"!=typeof s?gm(s,n):s}return t}}const mm="4.22.0";class bm extends cg{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Up(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Fp(this.inputs).length!==this.inputs.length)throw new mp(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);Fp(this.outputs).length,this.outputs.length,this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const b of this.outputs){const e=b.sourceLayer,t=b.nodeIndex,n=b.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(t),this.outputLayersTensorIndices.push(n)}for(const b of this.inputs){const e=b.sourceLayer,t=b.nodeIndex,n=b.tensorIndex;wp(0===t,"input layer has >1 nodes"),wp(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){const t=this.inputLayers[b];if(!(t instanceof dg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new gp(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(bm.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let a=0;a<c;a++){const e=u.inputTensors[a],s=u.inboundLayers[a],r=u.nodeIndices[a],i=u.tensorIndices[a];o(e,t,n,s,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const b of this.outputs)o(b,l,u);const c=i.slice().reverse();for(const b of c){n[b.id]=b,b.id in t||(t[b.id]=0);let e=t[b.id];const a=null==s[b.outboundLayer.id]?0:s[b.outboundLayer.id];e=Math.max(e,a),s[b.outboundLayer.id]=e,r[b.outboundLayer.id]=b.outboundLayer,t[b.id]=e;for(let s=0;s<b.inboundLayers.length;s++){const r=b.inboundLayers[s],a=b.nodeIndices[s],i=r.inboundNodes[a],o=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(e+1,o),n[i.id]=i}}const h={};for(const b in t){const e=t[b];e in h||(h[e]=[]),h[e].push(n[b])}const d={};for(const b in s){const e=s[b];e in d||(d[e]=[]),d[e].push(r[b])}let p=Object.keys(d).map(e=>parseInt(e,10)).sort(Ap);this.layers=[];for(const b of p){const e=d[b];e.sort((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0});for(const t of e)t instanceof bm&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map(e=>parseInt(e,10)).sort(Ap);const f=this.inputs.slice(),g=[];for(const b of p)for(const e of h[b]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new gp(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${t.name}". The following previous layers were accessed without issue: ${g}`);for(const t of e.outputTensors)f.push(t);g.push(t.name)}}this.nodesByDepth=h;const m=this.layers.map(e=>e.name);for(const b of m){const e=m.filter(e=>e===b).length;if(1!==e)throw new gp(`The name "${b}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(m))}this.outboundNodes=[],this.inboundNodes=[],new lg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0===--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new mp("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;const r=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);r&&this.parseWeights(e);for(const i of this.layers)for(const[e,t]of i.weights.entries()){const a=r?`${t.name.split("/").slice(0,-1).join("/")+"/"}${e}`:t.originalName;if(null!=n[a])throw new mp(`Duplicate weight name: ${a}`);n[a]=t,s++}const a=[];for(const i in e){let s=i;if(null==n[i]){const e=i.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])a.push([n[s],e[i]]);else if(t)throw new mp(`Provided weight data has no target variable: ${i}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new mp(`${e.length} of ${s} weights are not set: ${e}`)}rg(a)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),s=["vars","layer_checkpoint_dependencies"],r=n.map(e=>e.startsWith("_")?e.slice(1):e).filter(e=>!s.includes(e)).join("/");r!==t&&(e[r]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${mm}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=gm(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return oa(()=>{e=Cp(e);const n=new pg;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return mg(this.outputs,n,t)})}computeMask(e,t){return oa(()=>{let n;return e=Cp(e),n=null==t?kp(null,e.length):Cp(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){const t=Zf(e);if(t.length!==this.inputLayers.length)throw new mp(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++){const e=this.inputLayers[i],s=t[i];n[e.name+"_0_0"]=s}const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Ap);if(s.length>1)for(const i of s){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(e.id))continue;const s=[];for(let i=0;i<t.inboundLayers.length;i++){const e=t.inboundLayers[i],r=t.nodeIndices[i],a=t.tensorIndices[i],o=n[`${e.name}_${r}_${a}`];s.push(o)}const r=Zf(e.computeOutputShape(Ip(s))),a=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++)n[`${e.name}_${a}_${t}`]=r[t]}}const r=[],a=[];for(let i=0;i<this.outputLayers.length;i++){const e=this.outputLayers[i],t=this.outputLayersNodeIndices[i],n=this.outputLayersTensorIndices[i],s=`${e.name}_${t}_${n}`;a.push(s)}for(let i=0;i<a.length;i++){const e=a[i];wp(e in n),r.push(n[e])}return Ip(r)}runInternalGraph(e,t){null==t&&(t=kp(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o){const s=this.inputs[o],r=e[o],a=t[o];n[s.id]=[r,a]}const s=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(Ap);for(const o of s){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,a=new Array;for(const t of s)t.id in n&&a.push(n[t.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=Cp(e.call(t,u)),l=Cp(e.computeMask(t,n)),s=[t],i=[n]}else s=a.map(e=>e[0]),i=a.map(e=>e[1]),null==u.mask&&(u.mask=i),o=Cp(e.call(s,u)),l=Cp(e.computeMask(s,i));if(e.activityRegularizer)throw new bp("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const o of this.outputs){wp(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),r.push(e),a.push(t)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const s of this.layers){n=s instanceof bm?1:0;for(let e=0;e<s.inboundNodes.length;e++){const r=bm.nodeKey(s,e);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new mp("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(const n of this.layers)if(n.name===e)return n;throw new mp(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new mp(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return oa(()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=bm.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e})}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),s=a.getConfig(),r=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],s=bm.nodeKey(a,n);let i={};if(this.containerNodes.has(s)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(Y_){i={}}if(e.inboundLayers.length>0){const n=[];for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],a=e.nodeIndices[s],o=e.tensorIndices[s];let l=t[bm.nodeKey(r,a)];null==l&&(l=0),n.push([r.name,l,o,i])}r.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=s,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=this.inputLayersNodeIndices[a],r=bm.nodeKey(e,n);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[a];s.push([e.name,i,o])}e.inputLayers=s;const r=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=this.outputLayersNodeIndices[a],s=bm.nodeKey(e,n);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);const o=this.outputLayersTensorIndices[a];r.push([e.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Ip(n),s)}function l(e){const n=e.name,a=Ug(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach(e=>{if(!(e instanceof Array))throw new mp(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)})}const u=t.name,c=t.layers;for(const g of c)l(g);for(;!Dp(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],d=[],p=t.inputLayers;for(const g of p){const e=g[0],t=g[1],n=g[2];wp(e in r);const s=r[e].inboundNodes[t].outputTensors;h.push(s[n])}const f=t.outputLayers;for(const g of f){const e=g[0],t=g[1],n=g[2];wp(e in r);const s=r[e].inboundNodes[t].outputTensors;d.push(s[n])}return new e({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new mp("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){oa(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function xm(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach(t=>{t in e?n.push(e[t]):n.push(null)}),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function ym(e,t,n,s){if(null!=n){const t=oa(()=>{if(1===e.shape.length)return Ga(e);if(2===e.shape.length){if(e.shape[1]>1)return ei(e,1);if(1===e.shape[1])return vi(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await t.data());la(t);const r=[];return s.forEach(e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])}),Au(r,"float32")}return null}function km(e,t){return Xa(e,t)}function wm(e,t){let n,s;const r=t;n=r.xs,s=r.ys,h(null!=n&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const a=vm("input",e.inputNames,n),i=vm("output",e.outputNames,s),o=a[0].shape[0];h(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),h(i.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let l=0;l<a.length;l++)h(a[l].shape[0]===o,()=>`Batch size mismatch: input ${e.inputNames[l]} has ${a[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);for(let l=0;l<i.length;l++)h(i[l].shape[0]===o,()=>`Batch size mismatch: output ${e.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`);return{xs:a,ys:i}}function vm(e,t,n){if(n instanceof yr)return[n];if(Array.isArray(n))return h(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{const s=[];for(const r of t){if(null==n[r])throw new mp(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function Im(e){return"function"==typeof e.iterator}function Cm(e){h(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function $m(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>ff(e,t,n-t)):ff(e,t,n-t)}function Sm(e,t){return oa(()=>null==e?null:Array.isArray(e)?e.map(e=>Sm(e,t)):vf(e,"int32"===t.dtype?t:Va(t,"int32")))}function Nm(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function Tm(e){const t=[];e instanceof yr&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(pf(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Em(e,t){if(null==e)return;const n=[];if(t instanceof yr)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(const r in t){const e=t[r];n.push(e.id)}const s=[];if(e instanceof yr)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&s.push(e)});else if(null!=e)for(const r in e){const t=e[r];-1===n.indexOf(t.id)&&s.push(t)}s.forEach(e=>{e.isDisposed||e.dispose()})}function Rm(e){return Array.isArray(e)}function Am(e){return!function(e){return e instanceof yr}(e)&&!Rm(e)}function Fm(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Rm(e)&&e.length>0)t=!0;else if(Am(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new mp(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);let a;if(Am(e)){a=[];for(const n of t){if(null==e[n])throw new mp(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(Rm(e)){if(e.length!==t.length)throw new mp(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new mp(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Tm(a),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new mp(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape ${e.shape}`);for(let t=0;t<n[i].length;++t){if(0===t&&!s)continue;const a=e.shape[t],o=n[i][t];if(null!=o&&o>=0&&a!==o)throw new mp(`${r} expected a batch of elements where each example has shape [${n[i].slice(1,n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1,n[i].length)}]) but the ${r} received an input with ${e.shape[0]} examples, each with shape [${e.shape.slice(1,e.shape.length)}] (tensor shape [${e.shape}])`)}}return a}function Dm(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new mp(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new mp(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new mp(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(e.shape)}`);for(let a=0;a<n[i].length;++a){if(0===a&&!s)continue;const o=e.shape[a],l=n[i][a];if(null!=l&&l!==o)throw new mp(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(e.shape)}.`)}}}class _m extends bm{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new mp("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const r in e.nodesByDepth)n.push(e.nodesByDepth[r]);for(const r of n){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of e.layers){let e=!1;for(const n of r.inboundNodes)if(-1!==s.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),cm(a,n,s),s("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)r?hm(o[c],n,s):dm(o[c],n,i,s),s((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?eg(e.collectedTrainableWeights):eg(e.trainableWeights),t}(e),u=eg(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Jc.adagrad(.01),Adadelta:()=>Jc.adadelta(1,.95,hf()),Adam:()=>Jc.adam(.001,.9,.999,hf()),Adamax:()=>Jc.adamax(.002,.9,.999,hf(),0),RMSProp:()=>Jc.rmsprop(.001,.9,0,hf()),SGD:()=>Jc.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new mp(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Sc))throw new mp("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new mp(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map(e=>Jg(e))}else{const n=Jg(e.loss);this.outputs.forEach(e=>{t.push(n)})}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new mp(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)e.loss[n],t.push(Jg(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a],t=this.outputNames[a];this.feedOutputNames.push(t),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Qp("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map(e=>n);{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Qp("metric",()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===qg?-1!==["accuracy","acc"].indexOf(i)?s=Qg:-1!==["crossentropy","ce"].indexOf(i)&&(s=tm):this.lossFunctions[e]===Xg?-1!==["accuracy","acc"].indexOf(i)?s=nm:-1!==["crossentropy","ce"].indexOf(i)&&(s=rm):-1!==["accuracy","acc"].indexOf(i)?s=em:-1!==["crossentropy","ce"].indexOf(i)&&(s=sm),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=im(i);a=e,n=""+om(i)}let t;Qp(n,()=>{t=a}),r(e,n,t)}})(s[e])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&(this.trainableWeights.length,this.collectedTrainableWeights.length)}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Cm(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return Ip(this.testLoop(t,e,s,n.verbose,n.steps))}finally{Em(r[0],e),Em(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new bp("Verbose mode is not implemented yet.");h(!s||n.batches>0&&Number.isInteger(n.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=oa(()=>{if(t.value){const{xs:n,ys:s}=wm(e,t.value),i=n.concat(s),u=oa(()=>r(i));if(la(i),0===l)for(let e=0;e<u.length;++e)a.push(To(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=oa(()=>Ha(a[e],Xa(c,t))),l>0&&la(n)}la(u),o+=c,++l}return a}),t.done)break}for(let u=0;u<a.length;++u){const e=a[u];a[u]=Ka(a[u],o),la(e)}return Ip(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new mp(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new mp(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new mp("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new pg;if(e instanceof yr&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new mp(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const o of this.inputs){const t=e[o.name];if(null==t)throw new mp(`No value is provided for the model's input ${o.name}`);a.add(o,t)}const i=mg(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=kp(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map(e=>e.name);for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach((t,s)=>{null==t&&n.push(e[s])}),new mp(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return oa(()=>{const s=this.checkNumSamples(e);if(n)throw new bp("Verbose predictLoop() is not implemented yet.");const r=Nm(s,t),a=this.outputs.map(e=>[]);for(let t=0;t<r.length;++t)oa(()=>{const n=r[t][0],s=r[t][1],a=$m(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new pg(i);return mg(this.outputs,o)}).forEach((e,t)=>a[t].push(e));return Ip(a.map(e=>$i(e,0)))})}predict(e,t={}){const n=Tm(e);Dm(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return Cm(e),this.predictLoop(n,e)}finally{Em(n,e)}}predictOnBatch(e){Dm(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new gp("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let a=0;a<this.feedOutputShapes.length;++a){const e=this.feedOutputShapes[a];this.feedLossFns[a]===Xg?r.push(e.slice(0,e.length-1).concat([1])):r.push(e)}if(function(e,t){const n=Fp(e.map(e=>e.shape[0]));n.sort();const s=Fp(t.map(e=>e.shape[0]));if(s.sort(),n.length>1)throw new mp(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(e=>e.shape))}`);if(s.length>1)throw new mp(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(e=>e.shape))}`);if(n.length>0&&s.length>0&&!g(n,s))throw new mp(`Input Tensors should have the same number of samples as target Tensors. Found ${n[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=Fm(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Fm(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[Gg,qg,Kg];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===Kg&&1===a.shape[a.shape.length-1])throw new mp(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new mp(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!==0)throw new mp(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=xm(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await ym(o[t],0,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return oa(()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new bp("Verbose mode is not implemented yet.");if(null!=r)throw new bp("steps mode in testLoop() is not implemented yet");{const s=Nm(a,n),r=Au(uf(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=ff(r,a,o-a),u=Sm(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(To(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Ha(i[e],Xa(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=Ka(i[e],a)}return i})}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;vp(e,s)>1&&(r+=`_${vp(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(e=>e.read());return[this.optimizer_.minimize(()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new pg(e),o=mg(this.outputs,i,{training:!0});let l;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(s[n],o[n]);null!=r[n]&&(e=km(e,r[n]));const a=fl(e);t.push(a),l=0===n?e:Ha(l,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][0],r=this.metricsTensors[n][1];e=fl(t(s[r],o[r]))}ua(e),a.push(e)}return l=fl(l),this.calculateLosses().forEach(e=>{l=Ha(l,e)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>oa(()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new pg(a),o=mg(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=fl(s(r[e],o[e]));n=0===e?a:Ha(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=fl(n(r[s],o[s]));t.push(a)}return t})}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,r,a,i,o,l,u,c,h;this.isTraining=!0;try{const d=null==n.batchSize?32:n.batchSize;Cm(d);const p=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,p,d);s=f[0],r=f[1],h=f[2];let g,m=!1;if(null!=n.validationData&&n.validationData.length>0){if(m=!0,2!==n.validationData.length)throw 3===n.validationData.length?new bp("validationData including sample weights is not supported yet."):new mp(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);o=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(o,l,null,null,e,d);u=t[0],c=t[1],g=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){m=!0;const e=Math.floor(s[0].shape[0]*(1-n.validationSplit)),t=s[0].shape[0];u=$m(s,e,t),a=s,s=$m(s,0,e),c=$m(r,e,t),i=r,r=$m(r,0,e),g=u.concat(c)}else null!=n.validationSteps&&(m=!0);const b=s.concat(r).concat(h);this.checkTrainableWeightsConsistency();const x=this.makeTrainFunction(),y=this.getDedupedMetricsNames();let k,w;m?(this.makeTestFunction(),k=this.testFunction,w=y.slice().concat(y.map(e=>"val_"+e))):(k=null,g=[],w=y.slice());const v=Bg(n.callbacks,n.yieldEvery);return await this.fitLoop(x,b,y,d,n.epochs,n.verbose,v,k,g,n.shuffle,w,n.initialEpoch,null,null)}finally{this.isTraining=!1,Em(s,e),Em(r,t),Em(a,e),Em(i,t),Em(u,o),Em(c,l),null!=h&&la(h)}}async fitLoop(e,t,n,s,r,a,i,l,u,c,h,d,p,f){null==s&&(s=32),null==r&&(r=1),null==c&&(c=!0),null==d&&(d=0);let g=!1;if(null!=l&&null!=u&&(g=!0),null!=f&&(g=!0,null==p))throw new mp("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,s,p,"steps_per_epoch");let b;null!=m&&(b=uf(0,m)),null==a&&(a=1);const{callbackList:x,history:y}=Wg(i,a,r,d,m,p,s,g,h);x.setModel(this),this.history=y,await x.onTrainBegin(),this.stopTraining_=!1;for(let k=d;k<r;++k){await x.onEpochBegin(k);const r={};if(null!=p)throw new bp("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new bp("batch shuffling is not implemneted yet");c&&o(b);const a=Au(b),i=Nm(m,s);for(let o=0;o<i.length;++o){const c={};if(await x.onBatchBegin(o,c),oa(()=>{const h=i[o][0],d=i[o][1],p=ff(a,h,d-h);c.batch=o,c.size=d-h;const f=Sm(t,p),m=e(f);for(let e=0;e<n.length;++e){const t=n[e],s=m[e];c[t]=s,ua(s)}if(o===i.length-1&&g){const e=this.testLoop(l,u,s);for(let t=0;t<n.length;++t){const s=n[t],a=e[t];ua(a),r["val_"+s]=a}}}),await x.onBatchEnd(o,c),Ag(c),this.stopTraining_)break}a.dispose()}if(await x.onEpochEnd(k,r),this.stopTraining_)break}return await x.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(h(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),h(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),h(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`),h(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`),h(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(Im(n.validationData))h(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);else{const e=function(e){if(3===e.length)throw new bp("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(e=>"val_"+e)):l.slice();const c=Bg(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:p,history:f}=Wg(c,d,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);p.setModel(e),e.history=f,await p.onTrainBegin(),e.stopTraining_=!1;let g=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;g<n.epochs;){const u={};await p.onEpochBegin(g);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done)break;if(null!=t.value){const{xs:s,ys:r}=wm(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=xm(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await ym(r[e],0,t[e]))}const u=s.concat(r).concat(i),d=o(u);la(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,ua(n)}await p.onBatchEnd(h,a),Ag(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=Im(n.validationData)?Cp(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Cp(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(g,u),g++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const o of a){const e=await o.data();i.push(e[0])}return la(a),Em(n[0],e),Em(n[1],t),Ip(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let a=0;a<s.length;++a)n&&!s[a].trainable||t.push({name:s[a].originalName,tensor:r[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=ia().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-ia().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=$p(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>$p(e))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=$p(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[$p(om(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>$p(om(e)));{const e={};for(const t in this.metrics)e[t]=$p(om(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Ug(fm(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=Sp(e.loss);else if(Array.isArray(e.loss))n=e.loss.map(e=>Sp(e));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Sp(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map(e=>Sp(e));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Sp(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=(n=e,ba.getSaveHandlers(n));if(0===t.length)throw new mp(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new mp(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}var n;if(null==e.save)throw new mp("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await da(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${mm}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:n}=await da(await this.optimizer.getWeights(),e);s.specs.push(...n),s.data=(a=[s.data,t],ra.join(a))}var a;if(null!=this.userDefinedMetadata){const e=!0;lm(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=s.data,r.weightSpecs=s.specs,e.save(r)}setUserDefinedMetadata(e){lm(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}_m.className="Model",$c(_m);class Om extends _m{}Om.className="Functional",$c(Om);class Lm extends _m{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Up("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(e=>e<0))throw new mp(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Lm||e instanceof _m;let n;if(t){if(n=e,1!==n.outputs.length)throw new mp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new mp("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new mp("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new mp("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new dg({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new mp(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new mp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=hg(this.outputs[0])}this.inboundNodes=[],new lg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:kp(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Qf(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new _m({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new gp("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new gp("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new gp("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new gp("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new mp("Legacy serialization format not supported yet.");r=t}else h(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Lm))throw new bp(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const o of r){const e=Ug(o,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(e){if(null==this.model)throw new mp("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new mp("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Lm.className="Sequential",$c(Lm);let Mm=class extends Ic{getConfig(){return{}}};class zm extends Mm{apply(e,t=1){return function(e,t=1){if(1!==t)throw new bp(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return go(e)}(e,t)}}zm.className="elu",$c(zm);class Bm extends Mm{apply(e){return cu(e)}}Bm.className="selu",$c(Bm);class Pm extends Mm{apply(e){return au(e)}}Pm.className="relu",$c(Pm);class Wm extends Mm{apply(e){return oa(()=>bl(6,au(e)))}}Wm.className="relu6",$c(Wm);class Um extends Mm{apply(e){return e}}Um.className="linear",$c(Um);class Vm extends Mm{apply(e){return Ni(e)}}Vm.className="sigmoid",$c(Vm);class Gm extends Mm{apply(e){return function(e){return oa(()=>{const t=Ha(.5,Xa(.2,e));return Bi(t,0,1)})}(e)}}Gm.className="hardSigmoid",$c(Gm);class Hm extends Mm{apply(e){return nl(e)}}Hm.className="softplus",$c(Hm);class jm extends Mm{apply(e){return function(e){return oa(()=>Ka(e,Ha(qa(e),1)))}(e)}}jm.className="softsign",$c(jm);class Km extends Mm{apply(e){return Ei(e)}}Km.className="tanh",$c(Km);let Xm=class extends Mm{apply(e,t=-1){return yu(e,t)}};Xm.className="softmax",$c(Xm);class qm extends Mm{apply(e,t=-1){return al(e,t)}}qm.className="logSoftmax",$c(qm);class Ym extends Mm{apply(e){return oa(()=>oa(()=>{const t=Math.sqrt(2),n=Xa(.5,Ha(1,mo(Ka(e,t))));return Xa(e,n)}))}}Ym.className="gelu",$c(Ym);class Zm extends Mm{apply(e){return oa(()=>Xa(.5,Xa(e,Ha(1,Ei(Xa(Eo(Ka(2,Math.PI)),Ha(e,Xa(.044715,No(e,3)))))))))}}Zm.className="gelu_new",$c(Zm);class Jm extends Mm{apply(e){return oa(()=>Xa(e,Ei(nl(e))))}}Jm.className="mish",$c(Jm);class Qm extends Mm{apply(e,t=1){return oa(()=>Xa(Ni(Xa(e,t)),e))}}function eb(e){return e.getClassName()}function tb(e,t={}){return Rp(e,Cc.getMap().classNameMap,t,"activation")}function nb(e){if(null==e){return tb({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},tb(t)}return e instanceof Mm?e:tb(e)}Qm.className="swish",$c(Qm);class sb extends Ic{}class rb extends sb{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return oa(()=>{let t=gl([1]);return this.hasL1&&(t=Ha(t,Ao(Xa(this.l1,qa(e))))),this.hasL2&&(t=Ha(t,Ao(Xa(this.l2,If(e))))),vi(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}rb.className="L1L2",$c(rb);const ab={l1l2:"L1L2"};function ib(e){return Tp(e)}function ob(e,t={}){return Rp(e,Cc.getMap().classNameMap,t,"regularizer")}function lb(e){return null==e?null:"string"==typeof e?ob({className:e in ab?ab[e]:e,config:{}}):e instanceof sb?e:ob(e)}class ub extends cg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Jf(e);let n=au(e);return null!=this.maxValue&&(n=Bi(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}ub.className="ReLU",$c(ub);class cb extends cg{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Jf(e);return Xo(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}cb.className="LeakyReLU",$c(cb);class hb extends cg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=qf(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=lb(e.alphaRegularizer),this.alphaConstraint=Eg(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new mp(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Qf(e)).slice(1);if(null!=this.sharedAxes)for(const s of this.sharedAxes)t[s-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let s=1;s<e.length;++s)n[s]=e[s];this.inputSpec=[new ag({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Jf(e),Nl(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Xf(this.alphaInitializer),alphaRegularizer:ib(this.alphaRegularizer),alphaConstraint:Ng(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}hb.className="PReLU",$c(hb);let db=class extends cg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new bp(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Jf(e);return go(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}};db.className="ELU",$c(db);class pb extends cg{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Jf(e);return Xa(n,Va(Uo(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}pb.className="ThresholdedReLU",$c(pb);class fb extends cg{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Xm).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return oa(()=>{let n=Jf(e);const s=t.mask;if(null!=s){const e=Xa(rl(ml(n.shape),Va(s,n.dtype)),To(-1e9));n=Ha(n,e)}return this.axis instanceof Array?this.axis.length>1?Oo(rl(n,il(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function gb(e,t,n){if("number"==typeof e)return kp(e,t);if(e.length!==t)throw new mp(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const r=e[s];if(!rf(r))throw new mp(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e}function mb(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function bb(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+lf([n-t,0]);else{if("same"!==s)throw new mp(`Unsupport padding mode: ${s}.`);e*=t}return e}function xb(e,t){return oa(()=>(qp(t),"channelsFirst"===t?Wu(e,[0,2,3,1]):e))}function yb(e,t){return oa(()=>(qp(t),"channelsFirst"===t?Wu(e,[0,2,3,4,1]):e))}function kb(e,t,n,s=[1,1],r="valid",a,i,o=null){return oa(()=>{if(null==a&&(a="channelsLast"),qp(a),3!==e.rank&&4!==e.rank)throw new mp(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new mp(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=xb(e,a);if("causal"===r)throw new bp("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Xu({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Wu(l,[0,3,1,2])),l})}fb.className="Softmax",$c(fb);class wb extends cg{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",wb.verifyArgs(t),this.rank=e,Lp(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new bp(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=gb(t.kernelSize,e,"kernelSize"),this.strides=gb(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Yp(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,qp(this.dataFormat),this.activation=nb(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=qf(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Eg(t.biasConstraint),this.biasRegularizer=lb(t.biasRegularizer),this.activityRegularizer=lb(t.activityRegularizer),this.dilationRate=gb(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new mp(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new mp(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new mp(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(wp("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Op(e.kernelSize,"number",1,3))throw new mp(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:eb(this.activation),useBias:this.useBias,biasInitializer:Xf(this.biasInitializer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),biasConstraint:Ng(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class vb extends wb{constructor(e,t){super(e,t),this.kernel=null,vb.verifyArgs(t),this.filters=t.filters,Lp(this.filters,"filters"),this.kernelInitializer=qf(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Eg(t.kernelConstraint),this.kernelRegularizer=lb(t.kernelRegularizer)}build(e){e=Qf(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new mp(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return oa(()=>{let t;e=Jf(e);const n=null==this.bias?null:this.bias.read(),s=zp(this.activation.getClassName());if(null!=s&&2===this.rank)t=kb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return oa(()=>{if(null==a&&(a="channelsLast"),qp(a),3!==e.shape.length)throw new mp(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new mp(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new mp(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===a&&(e=Wu(e,[0,2,1])),"causal"===r)throw new bp("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Hi(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=$f(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=kb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new bp("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return oa(()=>{if(null==a&&(a="channelsLast"),qp(a),4!==e.rank&&5!==e.rank)throw new mp(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new mp(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=yb(e,a);if("causal"===r)throw new bp("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Xi(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=$f(o,n)),"channelsFirst"===a&&(o=Wu(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=Qf(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let r=0;r<n.length;++r){const e=mb(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);t.push(e)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Xf(this.kernelInitializer),kernelRegularizer:ib(this.kernelRegularizer),kernelConstraint:Ng(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new mp(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Ib extends vb{constructor(e){super(2,e),Ib.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Op(e.kernelSize,"number",1,2))throw new mp(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Ib.className="Conv2D",$c(Ib);class Cb extends vb{constructor(e){super(3,e),Cb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new mp(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Cb.className="Conv3D",$c(Cb);class $b extends Ib{constructor(e){if(super(e),this.inputSpec=[new ag({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new mp(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Qf(e)).length)throw new mp("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new mp("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ag({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return oa(()=>{let t=Jf(e);if(4!==t.shape.length)throw new mp(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[s,bb(i,c,l,this.padding),bb(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Wu(t,[0,2,3,1]));let p=Ki(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=Wu(p,[0,3,1,2])),null!=this.bias&&(p=$f(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p})}computeOutputShape(e){const t=(e=Qf(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=bb(t[s],o,a,this.padding),t[r]=bb(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}$b.className="Conv2DTranspose",$c($b);class Sb extends Cb{constructor(e){if(super(e),this.inputSpec=[new ag({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new mp(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Qf(e)).length)throw new mp("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new mp("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ag({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return oa(()=>{let t=Jf(e);if(5!==t.shape.length)throw new mp(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],g=this.strides[2],m=[s,bb(o,p,c,this.padding),bb(l,f,h,this.padding),bb(u,g,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Wu(t,[0,2,3,4,1]));let b=Yi(t,this.kernel.read(),m,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=Wu(b,[0,4,1,2,3])),null!==this.bias&&(b=$f(b,this.bias.read(),this.dataFormat)),null!==this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){const t=(e=Qf(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=bb(t[s],u,i,this.padding),t[r]=bb(t[r],c,o,this.padding),t[a]=bb(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Sb.className="Conv3DTranspose",$c(Sb);class Nb extends vb{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new mp("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new mp("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new mp(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=qf(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=lb(t.depthwiseRegularizer),this.depthwiseConstraint=Eg(t.depthwiseConstraint),this.pointwiseInitializer=qf(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=lb(t.pointwiseRegularizer),this.pointwiseConstraint=Eg(t.pointwiseConstraint)}build(e){if((e=Qf(e)).length<this.rank+2)throw new mp(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new mp(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let i=0;i<this.rank;++i)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new ag({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return oa(()=>{let t;if(e=Jf(e),1===this.rank)throw new bp("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Wu(e,[0,2,3,1])),t=hu(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=$f(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Wu(t,[0,3,1,2])),t})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Xf(this.depthwiseInitializer),e.pointwiseInitializer=Xf(this.pointwiseInitializer),e.depthwiseRegularizer=ib(this.depthwiseRegularizer),e.pointwiseRegularizer=ib(this.pointwiseRegularizer),e.depthwiseConstraint=Ng(this.depthwiseConstraint),e.pointwiseConstraint=Ng(this.pointwiseConstraint),e}}Nb.className="SeparableConv";class Tb extends Nb{constructor(e){super(2,e)}}Tb.className="SeparableConv2D",$c(Tb);class Eb extends vb{constructor(e){super(1,e),Eb.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Op(e.kernelSize,"number",1,1))throw new mp(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Eb.className="Conv1D",$c(Eb);class Rb extends cg{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return oa(()=>{if(e=Jf(e),"channelsLast"===this.dataFormat){const t=mf(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return mf(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=mf(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return mf(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Rb.className="Cropping2D",$c(Rb);class Ab extends cg{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,qp(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,_p(Gp,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return oa(()=>{let t=Jf(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Wu(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?yc.resizeNearestNeighbor(t,[e,s]):yc.resizeBilinear(t,[e,s]);return Wu(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?yc.resizeNearestNeighbor(t,[e,s]):yc.resizeBilinear(t,[e,s])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Ab.className="UpSampling2D",$c(Ab);class Fb extends wb{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=qf(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Eg(e.depthwiseConstraint),this.depthwiseRegularizer=lb(e.depthwiseRegularizer)}build(e){if((e=Qf(e)).length<4)throw new mp(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new mp(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return oa(()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return oa(()=>{null==r&&(r="channelsLast"),qp(r);let i=xb(e,r);if(4!==e.rank)throw new mp(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new mp(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=so(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=Wu(i,[0,3,1,2])),i})}(e=Jf(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=$f(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=Qf(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=mb(t,this.kernelSize[0],this.padding,this.strides[0]),a=mb(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Xf(this.depthwiseInitializer),e.depthwiseRegularizer=ib(this.depthwiseRegularizer),e.depthwiseConstraint=Ng(this.depthwiseRegularizer),e}}function Db(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new mp("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function _b(e,t,n,s=!1,r,a,i=!1,o=!1){return oa(()=>{const a=t.shape.length;if(a<3)throw new mp(`Input should be at least 3D, but is ${a}D.`);const i=[1,0].concat(uf(2,a));t=Wu(t,i),null!=r&&((r=Va(Va(r,"bool"),"float32")).rank===a-1&&(r=Lo(r,-1)),r=Wu(r,i)),s&&(t=ou(t,0),null!=r&&(r=ou(r,0)));const l=[];let u,c=n;const h=t.shape[0],d=Bu(t);let p,f;null!=r&&(p=Bu(r));for(let t=0;t<h;++t){const n=d[t],s=oa(()=>e(n,c));if(null==r)u=s[0],c=s[1];else{const e=oa(()=>{const e=p[t],n=rl(Il(e),e);return{output:Ha(Xa(s[0],e),Xa(c[0],n)),newStates:c.map((t,r)=>Ha(Xa(s[1][r],e),Xa(t,n)))}});u=e.output,c=e.newStates}o&&l.push(u)}return o&&(f=Nu(l,1)),[u,f,c]})}Fb.className="DepthwiseConv2D",$c(Fb);class Ob extends cg{constructor(e){let t;if(super(e),null==e.cell)throw new mp("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Vb({cells:e.cell}):e.cell,null==t.stateSize)throw new mp("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new ag({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?uf(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(e=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Yf(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return oa(()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map(e=>null);return[e].concat(t)}return e})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new bp("Constants support is not implemented in RNN yet.");Yf(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new ag({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!g(this.stateSpec.map(e=>e.shape[e.shape.length-1]),r))throw new mp(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map(e=>new ag({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){oa(()=>{if(!this.stateful)throw new fp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new mp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>gl([n,e])):this.states_=[gl([n,this.cell.stateSize])];else if(null==e)la(this.states_),null!=this.keptStates&&(la(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>gl([n,e])):this.states_[0]=gl([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new mp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):la(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!g(s.shape,a))throw new mp(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map(e=>ua(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Db(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new ag({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof ig){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return oa(()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=Jf(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new mp(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll;const i={training:s},o=_b((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,r,this.goBackwards,n,0,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(e){return oa(()=>{let t=gl(e.shape);return t=Ao(t,[1,2]),t=pf(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(e=>e>1?yf(t,[1,e]):t):this.cell.stateSize>1?[yf(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Ob.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=Ug(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Ob.className="RNN",$c(Ob);class Lb extends cg{}class Mb extends Lb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Lp(this.units,"units"),this.activation=nb(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=qf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=qf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=qf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=lb(e.kernelRegularizer),this.recurrentRegularizer=lb(e.recurrentRegularizer),this.biasRegularizer=lb(e.biasRegularizer),this.kernelConstraint=Eg(e.kernelConstraint),this.recurrentConstraint=Eg(e.recurrentConstraint),this.biasConstraint=Eg(e.biasConstraint),this.dropout=of([1,lf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=of([1,lf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Qf(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return oa(()=>{if(2!==e.length)throw new mp(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Gb({ones:()=>Il(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Gb({ones:()=>Il(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=wf(null!=a?Xa(e,a):e,this.kernel.read()),null!=this.bias&&(r=$f(r,this.bias.read())),null!=i&&(n=Xa(n,i));let o=Ha(r,wf(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:eb(this.activation),useBias:this.useBias,kernelInitializer:Xf(this.kernelInitializer),recurrentInitializer:Xf(this.recurrentInitializer),biasInitializer:Xf(this.biasInitializer),kernelRegularizer:ib(this.kernelRegularizer),recurrentRegularizer:ib(this.recurrentRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:Ng(this.kernelConstraint),recurrentConstraint:Ng(this.recurrentConstraint),biasConstraint:Ng(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}Mb.className="SimpleRNNCell",$c(Mb);class zb extends Ob{constructor(e){e.cell=new Mb(e),super(e)}call(e,t){return oa(()=>{null!=this.cell.dropoutMask&&(la(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(la(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}static fromConfig(e,t){return new e(t)}}zb.className="SimpleRNN",$c(zb);class Bb extends Lb{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new mp("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Lp(this.units,"units"),this.activation=nb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=nb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=qf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=qf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=qf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=lb(e.kernelRegularizer),this.recurrentRegularizer=lb(e.recurrentRegularizer),this.biasRegularizer=lb(e.biasRegularizer),this.kernelConstraint=Eg(e.kernelConstraint),this.recurrentConstraint=Eg(e.recurrentConstraint),this.biasConstraint=Eg(e.biasConstraint),this.dropout=of([1,lf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=of([1,lf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Qf(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return oa(()=>{if(2!==e.length)throw new mp(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Gb({ones:()=>Il(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Gb({ones:()=>Il(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Xa(e,r[0]));let u=wf(e,this.kernel.read());this.useBias&&(u=$f(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Xa(s,a[0]));const c=this.recurrentKernel.read(),[h,d]=Iu(c,[2*this.units,this.units],c.rank-1),p=wf(s,h),[f,g,m]=Iu(u,3,u.rank-1),[b,x]=Iu(p,2,p.rank-1);i=this.recurrentActivation.apply(Ha(f,b)),o=this.recurrentActivation.apply(Ha(g,x));const y=wf(Xa(o,s),d);l=this.activation.apply(Ha(m,y));const k=Ha(Xa(i,s),Xa(Ha(1,tl(i)),l));return[k,k]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:eb(this.activation),recurrentActivation:eb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xf(this.kernelInitializer),recurrentInitializer:Xf(this.recurrentInitializer),biasInitializer:Xf(this.biasInitializer),kernelRegularizer:ib(this.kernelRegularizer),recurrentRegularizer:ib(this.recurrentRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:Ng(this.kernelConstraint),recurrentConstraint:Ng(this.recurrentConstraint),biasConstraint:Ng(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}Bb.className="GRUCell",$c(Bb);class Pb extends Ob{constructor(e){e.implementation,e.cell=new Bb(e),super(e)}call(e,t){return oa(()=>{null!=this.cell.dropoutMask&&(la(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(la(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Pb.className="GRU",$c(Pb);class Wb extends Lb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Lp(this.units,"units"),this.activation=nb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=nb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=qf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=qf(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=qf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=lb(e.kernelRegularizer),this.recurrentRegularizer=lb(e.recurrentRegularizer),this.biasRegularizer=lb(e.biasRegularizer),this.kernelConstraint=Eg(e.kernelConstraint),this.recurrentConstraint=Eg(e.recurrentConstraint),this.biasConstraint=Eg(e.biasConstraint),this.dropout=of([1,lf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=of([1,lf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Qf(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Rf{apply(t,s){const r=e.apply([n]),a=(new Ff).apply([n]),i=e.apply([2*n]);return xf(xf(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return oa(()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new mp(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Gb({ones:()=>Il(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Gb({ones:()=>Il(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Xa(e,a[0]));let h=wf(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Xa(s,i[0])),h=Ha(h,wf(s,this.recurrentKernel.read())),this.useBias&&(h=$f(h,this.bias.read()));const[d,p,f,g]=Iu(h,4,h.rank-1);o=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=Ha(Xa(l,r),Xa(o,this.activation.apply(f))),c=this.recurrentActivation.apply(g);const m=Xa(c,this.activation.apply(u));return[m,m,u]})}getConfig(){const e=super.getConfig(),t={units:this.units,activation:eb(this.activation),recurrentActivation:eb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xf(this.kernelInitializer),recurrentInitializer:Xf(this.recurrentInitializer),biasInitializer:Xf(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ib(this.kernelRegularizer),recurrentRegularizer:ib(this.recurrentRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:Ng(this.kernelConstraint),recurrentConstraint:Ng(this.recurrentConstraint),biasConstraint:Ng(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}Wb.className="LSTMCell",$c(Wb);class Ub extends Ob{constructor(e){e.implementation,e.cell=new Wb(e),super(e)}call(e,t){return oa(()=>{null!=this.cell.dropoutMask&&(la(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(la(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Ub.className="LSTM",$c(Ub);class Vb extends Lb{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return oa(()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)})}build(e){let t;Yf(e)&&(e=e[0]),this.cells.forEach((n,s)=>{Qp(`RNNCell_${s}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const r of t.cells)s.push(Ug(r,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return sg(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}rg(t)}}function Gb(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):Sf(t(),n),o=()=>Nf(i,t,s);return!r||r<=1?ua(o().clone()):Array(r).fill(void 0).map(o).map(e=>ua(e.clone()))}Vb.className="StackedRNNCells",$c(Vb);class Hb extends Ob{constructor(e){if(e.unroll)throw new bp("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new bp("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new ag({ndim:5})]}call(e,t){return oa(()=>{if(null!=this.cell.dropoutMask&&(la(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(la(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new mp("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return oa(()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=gl([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]})}resetStates(e,t=!1){oa(()=>{if(!this.stateful)throw new fp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new mp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>gl(r)):this.states_=[gl(r)];else if(null==e)la(this.states_),null!=this.keptStates&&(la(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>gl(r)):this.states_[0]=gl(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new mp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):la(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!g(n.shape,s))throw new mp(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>ua(e.clone()))})}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=mb(l,s[0],r,a[0],i[0]),h=mb(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Hb.className="ConvRNN2D";class jb extends Wb{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,Lp(this.filters,"filters"),this.kernelSize=gb(n,2,"kernelSize"),this.kernelSize.forEach(e=>Lp(e,"kernelSize")),this.strides=gb(s||1,2,"strides"),this.strides.forEach(e=>Lp(e,"strides")),this.padding=r||"valid",Yp(this.padding),this.dataFormat=a||"channelsLast",qp(this.dataFormat),this.dilationRate=gb(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>Lp(e,"dilationRate"))}build(e){var t;e=Qf(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new mp(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Rf{apply(e,t){return bf([n.apply([s]),ml([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return oa(()=>{if(3!==e.length)throw new mp(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Gb({ones:()=>Il(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Xa(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Gb({ones:()=>Il(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let p=o(r,d,0),f=o(r,d,1),g=o(r,d,2),m=o(r,d,3);const[b,x,y,k]=Iu(this.kernel.read(),4,3),[w,v,I,C]=this.useBias?Iu(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,b,w,this.padding),u=this.inputConv(u,x,v,this.padding),c=this.inputConv(c,y,I,this.padding),h=this.inputConv(h,k,C,this.padding);const[$,S,N,T]=Iu(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,$),f=this.recurrentConv(f,S),g=this.recurrentConv(g,N),m=this.recurrentConv(m,T);const E=this.recurrentActivation.apply(Ha(l,p)),R=this.recurrentActivation.apply(Ha(u,f)),A=Ha(Xa(R,a),Xa(E,this.activation.apply(Ha(c,g)))),F=Xa(this.recurrentActivation.apply(Ha(h,m)),this.activation.apply(A));return[F,F,A]})}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,t,n,s){const r=Gi(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?$f(r,n,this.dataFormat):r}recurrentConv(e,t){return Gi(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}jb.className="ConvLSTM2DCell",$c(jb);class Kb extends Hb{constructor(e){const t=new jb(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}Kb.className="ConvLSTM2D",$c(Kb);class Xb extends cg{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let s=0;s<this.noiseShape.length;++s)n.push(null==this.noiseShape[s]?t[s]:this.noiseShape[s]);return n}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Nf(()=>Sf(n,this.rate,s,this.seed),()=>n,e)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Xb.className="Dropout",$c(Xb);class qb extends Xb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}qb.className="SpatialDropout1D",$c(qb);class Yb extends cg{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Lp(this.units,"units"),this.activation=nb(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=qf(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=qf(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Eg(e.kernelConstraint),this.biasConstraint=Eg(e.biasConstraint),this.kernelRegularizer=lb(e.kernelRegularizer),this.biasRegularizer=lb(e.biasRegularizer),this.activityRegularizer=lb(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Qf(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Qf(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e),s=zp(this.activation.getClassName());let r;return null!=s?r=wf(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=wf(n,this.kernel.read()),null!=this.bias&&(r=$f(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){const e={units:this.units,activation:eb(this.activation),useBias:this.useBias,kernelInitializer:Xf(this.kernelInitializer),biasInitializer:Xf(this.biasInitializer),kernelRegularizer:ib(this.kernelRegularizer),biasRegularizer:ib(this.biasRegularizer),activityRegularizer:ib(this.activityRegularizer),kernelConstraint:Ng(this.kernelConstraint),biasConstraint:Ng(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Yb.className="Dense",$c(Yb);class Zb extends cg{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Qf(e);for(const t of e.slice(1))if(null==t)throw new mp(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],af(e,1)]}call(e,t){return oa(()=>{this.invokeCallHook(e,t);let n=Jf(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Wu(n,e)}return function(e){if(e.rank<=1)throw new mp(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],af(e.shape,1)];return vi(e,t)}(n)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Zb.className="Flatten",$c(Zb);class Jb extends cg{constructor(e){super(e),this.supportsMasking=!0,this.activation=nb(e.activation)}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e);return this.activation.apply(n)})}getConfig(){const e={activation:eb(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Jb.className="Activation",$c(Jb);class Qb extends cg{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return oa(()=>{return e=Jf(e),t=e,n=this.n,oa(()=>{if(2!==t.shape.length)throw new mp(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return yf(pf(t,1),[1,n,1])});var t,n})}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Qb.className="RepeatVector",$c(Qb);class ex extends cg{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let o=0;o<s.length;++o){const e=s[o];if(this.isUnknown(e)){if(null!==a)throw new mp("Can only specifiy one unknown dimension.");a=o}else r*=e}const i=af(e);if(null!==a){if(0===r||i%r!==0)throw new mp(n);s[a]=i/r}else if(i!==r)throw new mp(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return vi(n,r)})}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}ex.className="Reshape",$c(ex);class tx extends cg{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=uf(1,e.dims.length+1);if(!g(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ag({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Qf(e)).slice();return this.dims.forEach((n,s)=>{t[s+1]=e[n]}),t}call(e,t){return Wu(Jf(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}tx.className="Permute",$c(tx);class nx extends cg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Jf(e);return Qa(wl(n,this.maskValue),-1)}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e),s=Qa(wl(n,this.maskValue),-1,!0);return Xa(n,Va(s,n.dtype))})}}nx.className="Masking",$c(nx);class sx extends cg{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Cp(e.inputLength))}this.inputDim=e.inputDim,Lp(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Lp(this.outputDim,"outputDim"),this.embeddingsInitializer=qf(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=lb(e.embeddingsRegularizer),this.activityRegularizer=lb(e.activityRegularizer),this.embeddingsConstraint=Eg(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return oa(()=>this.maskZero?(e=Jf(e),wl(e,co(e))):null)}computeOutputShape(e){if(e=Qf(e),null==this.inputLength)return[...e,this.outputDim];const t=Cp(this.inputLength);if(t.length!==e.length-1)throw new mp(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new mp(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return oa(()=>{this.invokeCallHook(e,t);let n=Jf(e);"int32"!==n.dtype&&(n=df(n,"int32"));const s=vf(this.embeddings.read(),vi(n,[n.size]));return vi(s,Qf(this.computeOutputShape(n.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Xf(this.embeddingsInitializer),embeddingsRegularizer:ib(this.embeddingsRegularizer),activityRegularizer:ib(this.activityRegularizer),embeddingsConstraint:Ng(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}sx.className="Embedding",$c(sx);class rx extends cg{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new bp}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new mp("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Qf(e)]),e.length<2)throw new mp(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const r of e)null!=r&&null!==r[0]&&t.push(r[0]);if(t=Fp(t),t.length>1)throw new mp(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const t=null==e[r]?null:e[r].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const s=e.map(e=>e.length);-1===e.indexOf(null)&&1===Fp(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return oa(()=>{if(this.reshapeRequired){const t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){const s=lf(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=pf(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,s=e[0],r=e.slice(1).concat([s]);let i=vi(a,[s].concat(af(e.slice(1))));i=Wu(i,[1,0]),i=vi(i,r),t.push(i),n=!0}else if(e>1){const s=uf(1,e).concat([0]);t.push(Wu(a,s)),n=!0}else t.push(a)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=vi(Wu(vi(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(uf(0,r-1));s=Wu(s,e)}return s}}return this.mergeFunction(e)})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const n=null==e[s]?null:e[s].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const s of e)null!=s&&null!==s[0]&&n.push(s[0]);return n=Fp(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return oa(()=>{if(null==t)return null;if(!Array.isArray(t))throw new mp("`mask` should be an Array");if(!Array.isArray(e))throw new mp("`inputs` should be an Array");if(t.length!==e.length)throw new mp(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:Lo(e,0)))[0];for(let e=1;e<t.length-1;++e)n=ol(n,t[e]);return n})}}class ax extends rx{constructor(e){super(e)}mergeFunction(e){return oa(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ha(t,e[n]);return t})}}ax.className="Add",$c(ax);class ix extends rx{constructor(e){super(e)}mergeFunction(e){return oa(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Xa(t,e[n]);return t})}}ix.className="Multiply",$c(ix);class ox extends rx{constructor(e){super(e)}mergeFunction(e){return oa(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ha(t,e[n]);return Xa(1/e.length,t)})}}ox.className="Average",$c(ox);class lx extends rx{constructor(e){super(e)}mergeFunction(e){return oa(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=pl(t,e[n]);return t})}}lx.className="Maximum",$c(lx);class ux extends rx{constructor(e){super(e)}mergeFunction(e){return oa(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=bl(t,e[n]);return t})}}ux.className="Minimum",$c(ux);class cx extends rx{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new mp("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const s of e)if(null!=s){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let r=!1;for(const e of n)if(g(e,t)){r=!0;break}r||n.push(t)}if(n.length>1)throw new mp("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return oa(()=>bf(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new mp("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const r of t.slice(1)){if(null==n[s]||null==r[s]){n[s]=null;break}n[s]+=r[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new mp("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new mp("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new mp(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return oa(()=>{let n=!0;if(t.forEach(e=>{null==e||(n=!1)}),n)return null;const s=[];for(let a=0;a<e.length;++a)null==t[a]?s.push(Va(Il(e[a]),"bool")):t[a].rank<e[a].rank?s.push(Lo(t[a],-1)):s.push(t[a]);const r=$i(s,this.axis);return Ja(r,-1,!1)})}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function hx(e,t){for(;e<0;)e+=t;return e}cx.className="Concatenate",$c(cx);class dx extends rx{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){h(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new bp("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new mp(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new mp(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>hx(t,e[n].shape.length)):[hx(this.axes,n.shape.length),hx(this.axes,s.shape.length)],this.normalize&&(n=Vg(n,t[0]),s=Vg(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new bp("batchDot is not implemented for tensors of 4D or higher rank yet");if(h(e.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`),h(e.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new bp("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return oa(()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=vi(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=vi(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?Ao(Xa(e,t),a[0]):Ao(Xa(Wu(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=Si(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=Su(i,t)}return 1===i.shape.length&&(i=Lo(i,1)),i})}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[hx(this.axes,e.length),hx(this.axes,t.length)],n}computeOutputShape(e){h(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new bp("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}dx.className="Dot",$c(dx);class px extends cg{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e);return Nf(()=>Ha(kf(n.shape,0,this.stddev),n),()=>n,t.training||!1)})}}px.className="GaussianNoise",$c(px);class fx extends cg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return oa(()=>{this.invokeCallHook(e,t);const n=Jf(e);return this.rate>0&&this.rate<1?Nf(()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Xa(n,kf(n.shape,1,e))},()=>n,t.training||!1):n})}}fx.className="GaussianDropout",$c(fx);class gx extends cg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Jf(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return oa(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Nf(()=>{const t=Jf(e),s=-1.7580993408473766;let r=Vo(tu(n),this.rate);r=df(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=Ha(Xa(t,r),Xa(Ha(r,-1),s));return Ha(Xa(o,a),i)},()=>Jf(e),t.training||!1)}return e})}}function mx(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=Fi(e,t,n,s,r,a);else if(3===e.rank)i=Di(e,t,n,s,r,a);else{if(4!==e.rank)throw new bp(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=_i(e,t,n,s,r,a)}return i}gx.className="AlphaDropout",$c(gx);class bx extends cg{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=qf(e.betaInitializer||"zeros"),this.gammaInitializer=qf(e.gammaInitializer||"ones"),this.movingMeanInitializer=qf(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=qf(e.movingVarianceInitializer||"ones"),this.betaConstraint=Eg(e.betaConstraint),this.gammaConstraint=Eg(e.gammaConstraint),this.betaRegularizer=lb(e.betaRegularizer),this.gammaRegularizer=lb(e.gammaRegularizer)}build(e){e=Qf(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new mp(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new ag({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return oa(()=>{const n=null!=t.training&&t.training,s=Jf(e),r=s.shape,a=r.length,i=uf(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=kp(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!g(u,uf(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=vi(this.movingMean.read(),l),t=vi(this.movingVariance.read(),l),n=this.center?vi(this.beta.read(),l):null,r=this.scale?vi(this.gamma.read(),l):null;return mx(s,e,t,n,r,this.epsilon)}return mx(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=function(e,t,n,s,r=.001){return g(s.slice().sort(),uf(0,e.rank-1))?function(e,t,n,s,r=.001){return oa(()=>{const a=kl(e,s),i=a.mean,o=a.variance;return[mx(e,i,o,n,t,r),i,o]})}(e,t,n,s,r):function(e,t,n,s,r=.001){return oa(()=>{const a=kl(e,s),i=a.mean,o=a.variance,l=[];for(const t of uf(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=vi(i,l),c=vi(o,l),h=null==t?null:vi(t,l),d=null==n?null:vi(n,l);return[mx(e,u,c,d,h,r),i,o]})}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{oa(()=>{const s=1-n,r=e.read(),a=Xa(rl(r,t),s);e.write(rl(r,a))})};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xf(this.betaInitializer),gammaInitializer:Xf(this.gammaInitializer),movingMeanInitializer:Xf(this.movingMeanInitializer),movingVarianceInitializer:Xf(this.movingVarianceInitializer),betaRegularizer:ib(this.betaRegularizer),gammaRegularizer:ib(this.gammaRegularizer),betaConstraint:Ng(this.betaConstraint),gammaConstraint:Ng(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}bx.className="BatchNormalization",$c(bx);class xx extends cg{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=qf(e.betaInitializer||"zeros"),this.gammaInitializer=qf(e.gammaInitializer||"ones"),this.betaRegularizer=lb(e.betaRegularizer),this.gammaRegularizer=lb(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Qf(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let r=0;r<this.axis.length;++r)this.axis[r]<0&&(this.axis[r]+=t);for(const r of this.axis)if(r<0||r>=t)throw new Error(`Invalid axis: ${r}`);if(this.axis.length!==Fp(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map(t=>e[t]),s=!0;this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,s):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,s):this.beta=null,this.built=!0}call(e,t){const n=Jf(e),s=n.shape,r=s.length;return oa(()=>{let{mean:e,variance:t}=kl(n,this.axis,!0);const a=kp(1,r);for(const n of this.axis)a[n]=s[n];const i=e=>null!=e&&e.shape.length!==r?vi(e,a):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let n=0;n<r;++n)-1!==this.axis.indexOf(n)?(u.push(s[n]),c.push(1)):(u.push(1),c.push(s[n]));return e=zo(e,u),t=zo(t,u),null!=o&&(o=zo(o,c)),null!=l&&(l=zo(l,c)),mx(n,e,t,l,o,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xf(this.betaInitializer),gammaInitializer:Xf(this.gammaInitializer),betaRegularizer:ib(this.betaRegularizer),gammaRegularizer:ib(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}xx.className="LayerNormalization",$c(xx);class yx extends cg{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new mp(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new mp(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new mp(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new ag({ndim:4})]}computeOutputShape(e){let t,n;return e=Qf(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return oa(()=>{return t=Jf(e),n=this.padding,s=this.dataFormat,oa(()=>{if(4!==t.rank)throw new mp(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new mp("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new mp(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Cl(t,e)});var t,n,s})}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function kx(e,t,n,s,r,a){return oa(()=>{let i;qp(r),Zp(a),Yp(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=xb(e,r);const o="same"===s?"same":"valid";return i="max"===a?hl(e,t,n,o):Ii(e,t,n,o),"channelsFirst"===r&&(i=Wu(i,[0,3,1,2])),i})}function wx(e,t,n,s,r,a){return oa(()=>{let i;qp(r),Zp(a),Yp(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=yb(e,r);const o="same"===s?"same":"valid";return i="max"===a?dl(e,t,n,o):Ci(e,t,n,o),"channelsFirst"===r&&(i=Wu(i,[0,4,1,2,3])),i})}yx.className="ZeroPadding2D",$c(yx);class vx extends cg{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new mp(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Lp(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new mp(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Lp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Yp(this.padding),this.inputSpec=[new ag({ndim:3})]}computeOutputShape(e){const t=mb((e=Qf(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return oa(()=>{this.invokeCallHook(e,t),e=pf(Jf(e),2);const n=this.poolingFunction(Jf(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Su(n,[2])})}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Ix extends vx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return qp(r),Yp(s),kx(e,t,n,s,r,"max")}}Ix.className="MaxPooling1D",$c(Ix);class Cx extends vx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return qp(r),Yp(s),kx(e,t,n,s,r,"avg")}}Cx.className="AveragePooling1D",$c(Cx);class $x extends cg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new mp(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Lp(this.poolSize,"poolSize"),Lp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,qp(this.dataFormat),Yp(this.padding),this.inputSpec=[new ag({ndim:4})]}computeOutputShape(e){e=Qf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=mb(t,this.poolSize[0],this.padding,this.strides[0]),n=mb(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return oa(()=>(this.invokeCallHook(e,t),this.poolingFunction(Jf(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Sx extends $x{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return qp(r),Yp(s),kx(e,t,n,s,r,"max")}}Sx.className="MaxPooling2D",$c(Sx);class Nx extends $x{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return qp(r),Yp(s),kx(e,t,n,s,r,"avg")}}Nx.className="AveragePooling2D",$c(Nx);class Tx extends cg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new mp(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Lp(this.poolSize,"poolSize"),Lp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,qp(this.dataFormat),Yp(this.padding),this.inputSpec=[new ag({ndim:5})]}computeOutputShape(e){e=Qf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=mb(t,this.poolSize[0],this.padding,this.strides[0]),n=mb(n,this.poolSize[1],this.padding,this.strides[1]),s=mb(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return oa(()=>(this.invokeCallHook(e,t),this.poolingFunction(Jf(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ex extends Tx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return qp(r),Yp(s),wx(e,t,n,s,r,"max")}}Ex.className="MaxPooling3D",$c(Ex);class Rx extends Tx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return qp(r),Yp(s),wx(e,t,n,s,r,"avg")}}Rx.className="AveragePooling3D",$c(Rx);class Ax extends cg{constructor(e){super(e),this.inputSpec=[new ag({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new bp}}class Fx extends Ax{constructor(e){super(e||{})}call(e,t){return oa(()=>{const t=Jf(e);return fl(t,1)})}}Fx.className="GlobalAveragePooling1D",$c(Fx);class Dx extends Ax{constructor(e){super(e||{})}call(e,t){return oa(()=>{const t=Jf(e);return $o(t,1)})}}Dx.className="GlobalMaxPooling1D",$c(Dx);class _x extends cg{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,qp(this.dataFormat),this.inputSpec=[new ag({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new bp}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ox extends _x{call(e,t){return oa(()=>{const t=Jf(e);return"channelsLast"===this.dataFormat?fl(t,[1,2]):fl(t,[2,3])})}}Ox.className="GlobalAveragePooling2D",$c(Ox);class Lx extends _x{call(e,t){return oa(()=>{const t=Jf(e);return"channelsLast"===this.dataFormat?$o(t,[1,2]):$o(t,[2,3])})}}Lx.className="GlobalMaxPooling2D",$c(Lx);class Mx extends cg{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Ug(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class zx extends Mx{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Qf(e)).length<3)throw new mp(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Qf(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return oa(()=>_b((e,n)=>[Jf(this.layer.call(e,t)),[]],e=Jf(e),[],!1,null,0,!1,!0)[1])}}zx.className="TimeDistributed",$c(zx);class Bx extends Mx{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Ug(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Ug(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,_p(Kp,"BidirectionalMergeMode",r),e.weights)throw new bp("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Ip(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Db(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new mp("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map(e=>new ag({shape:e.shape}));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new bp("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof ig;for(const l of a)if(l instanceof ig!==o)throw new mp("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return oa(()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=ou(r,1)),"concat"===this.mergeMode?i=bf([s,r]):"sum"===this.mergeMode?i=Ha(s,r):"ave"===this.mergeMode?i=Xa(.5,Ha(s,r)):"mul"===this.mergeMode?i=Xa(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Qp(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Qp(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map(e=>null);return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Ug(t.layer);if(delete t.layer,null!=t.numConstants)throw new bp("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}Bx.className="Bidirectional",$c(Bx);class Px extends cg{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return oa(()=>("float32"!==(e=Jf(e)).dtype&&(e=df(e,"float32")),Ha(Xa(e,this.scale),this.offset)))}}Px.className="Rescaling",$c(Px);const{resizeBilinear:Wx,cropAndResize:Ux}=yc;class Vx extends cg{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,r,a,i,o){return oa(()=>{let l,u=!1;const c=[t/a,n/i,(s+t)/a,(r+n)/i],h=[];3===e.rank?(u=!0,l=Nu([e])):l=e;for(let e=0;e<l.shape[0];e++)h.push(c);const d=sa(h,[h.length,4]),p=nu(0,h.length,1,"int32"),f=Ux(l,d,p,[s,r],"nearest");return df(u?Jf(Bu(f)):f,o)})}upsize(e,t,n,s){return oa(()=>df(Wx(e,[t,n]),s))}call(e,t){return oa(()=>{const t=Jf(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let i=0;r!==this.height&&(i=Math.floor((r-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)})}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=Qf(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}Vx.className="CenterCrop",$c(Vx);class Gx extends cg{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=Qf(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return oa(()=>{let n;if("int32"!==(e=Jf(e)).dtype&&(e=df(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new mp(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=Jf(t.countWeights)}const s=$o(e),r=So(e),a=Uo(this.numTokens,s).bufferSync().get(0),i=Vo(r,0).bufferSync().get(0);if(!a||!i)throw new mp(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let r=Jf(e);if("int32"!==r.dtype&&(r=df(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=Lo(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=Lo(r,-1)),r.rank>2)throw new mp(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(t);let o;if(o=to(r,void 0!==s&&"count"===t?s:[],n,i),"tfIdf"!==t)return o;if(s)return Xa(o,s);throw new mp("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)})}}Gx.className="CategoryEncoding",$c(Gx);const Hx=new Set(["bilinear","nearest"]);class jx extends cg{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!Hx.has(e.interpolation))throw new mp(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=Qf(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return oa(()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return yc.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return yc.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...Hx]} are supported`)})}}jx.className="Resizing",$c(jx);class Kx{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}Kx.className="RandomSeed";class Xx extends cg{constructor(e){super(e),this.randomGenerator=new Kx(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}Xx.className="BaseRandomLayer";const qx=new Set(["bilinear","nearest"]);class Yx extends Xx{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new mp(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new mp(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new mp(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!qx.has(n))throw new mp(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=Qf(e))[2];return[this.imgHeight,-1,t]}call(e,t){return oa(()=>{const t=Jf(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=tu([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const r=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return yc.resizeBilinear(e,r);case"nearest":return yc.resizeNearestNeighbor(e,r);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...qx]} are supported`)}})}}var Zx,Jx,Qx,ey,ty,ny,sy;function ry(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&h("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}Yx.className="RandomWidth",$c(Yx),H().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{}),(Jx=Zx||(Zx={}))[Jx.DT_INVALID=0]="DT_INVALID",Jx[Jx.DT_FLOAT=1]="DT_FLOAT",Jx[Jx.DT_DOUBLE=2]="DT_DOUBLE",Jx[Jx.DT_INT32=3]="DT_INT32",Jx[Jx.DT_UINT8=4]="DT_UINT8",Jx[Jx.DT_INT16=5]="DT_INT16",Jx[Jx.DT_INT8=6]="DT_INT8",Jx[Jx.DT_STRING=7]="DT_STRING",Jx[Jx.DT_COMPLEX64=8]="DT_COMPLEX64",Jx[Jx.DT_INT64=9]="DT_INT64",Jx[Jx.DT_BOOL=10]="DT_BOOL",Jx[Jx.DT_QINT8=11]="DT_QINT8",Jx[Jx.DT_QUINT8=12]="DT_QUINT8",Jx[Jx.DT_QINT32=13]="DT_QINT32",Jx[Jx.DT_BFLOAT16=14]="DT_BFLOAT16",Jx[Jx.DT_QINT16=15]="DT_QINT16",Jx[Jx.DT_QUINT16=16]="DT_QUINT16",Jx[Jx.DT_UINT16=17]="DT_UINT16",Jx[Jx.DT_COMPLEX128=18]="DT_COMPLEX128",Jx[Jx.DT_HALF=19]="DT_HALF",Jx[Jx.DT_RESOURCE=20]="DT_RESOURCE",Jx[Jx.DT_VARIANT=21]="DT_VARIANT",Jx[Jx.DT_UINT32=22]="DT_UINT32",Jx[Jx.DT_UINT64=23]="DT_UINT64",Jx[Jx.DT_FLOAT_REF=101]="DT_FLOAT_REF",Jx[Jx.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",Jx[Jx.DT_INT32_REF=103]="DT_INT32_REF",Jx[Jx.DT_UINT8_REF=104]="DT_UINT8_REF",Jx[Jx.DT_INT16_REF=105]="DT_INT16_REF",Jx[Jx.DT_INT8_REF=106]="DT_INT8_REF",Jx[Jx.DT_STRING_REF=107]="DT_STRING_REF",Jx[Jx.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",Jx[Jx.DT_INT64_REF=109]="DT_INT64_REF",Jx[Jx.DT_BOOL_REF=110]="DT_BOOL_REF",Jx[Jx.DT_QINT8_REF=111]="DT_QINT8_REF",Jx[Jx.DT_QUINT8_REF=112]="DT_QUINT8_REF",Jx[Jx.DT_QINT32_REF=113]="DT_QINT32_REF",Jx[Jx.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",Jx[Jx.DT_QINT16_REF=115]="DT_QINT16_REF",Jx[Jx.DT_QUINT16_REF=116]="DT_QUINT16_REF",Jx[Jx.DT_UINT16_REF=117]="DT_UINT16_REF",Jx[Jx.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",Jx[Jx.DT_HALF_REF=119]="DT_HALF_REF",Jx[Jx.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",Jx[Jx.DT_VARIANT_REF=121]="DT_VARIANT_REF",Jx[Jx.DT_UINT32_REF=122]="DT_UINT32_REF",Jx[Jx.DT_UINT64_REF=123]="DT_UINT64_REF",(ty=(ey=Qx||(Qx={})).CheckpointFormatVersion||(ey.CheckpointFormatVersion={}))[ty.LEGACY=0]="LEGACY",ty[ty.V1=1]="V1",ty[ty.V2=2]="V2",(sy=ny||(ny={}))[sy.FAIL=0]="FAIL",sy[sy.SHORTEST=1]="SHORTEST",sy[sy.LONGEST=2]="LONGEST";const ay=Pu;class iy extends a{nextDataId(){return iy.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r(this,aa())}write(e,t,n){this.firstUse&&(this.firstUse=!1,H().get("IS_NODE")&&is());const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&N(n[0])){const r=n.map(e=>rr(e));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?Ch(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):function(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>ar(e));return Ua(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ua(e.shape,e.dtype,t)}makeOutput(e,t,n){return aa().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=sr();return e(),{kernelMs:sr()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ry([e],"where");const t=this.readSync(e.dataId);return ay(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function oy(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}iy.nextDataId=0;const ly={kernelName:Y,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;ry(t,"abs");let s=new Float32Array(f(t.shape));return s=oy(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}};function uy(e){return(t,n,s,r,a)=>{const i=oo(t,n),o=i.length,l=F(i),u=I(a,f(i)),c=t.length,h=n.length,d=F(t),p=F(n),g=ao(t,i),m=ao(n,i);if(g.length+m.length===0)for(let f=0;f<u.length;++f)u[f]=e(s[f%s.length],r[f%r.length]);else for(let f=0;f<u.length;++f){const t=P(f,o,l),n=t.slice(-c);g.forEach(e=>n[e]=0);const a=B(n,c,d),i=t.slice(-h);m.forEach(e=>i[e]=0);const b=B(i,h,p);u[f]=e(s[a],r[b])}return[u,i]}}function cy(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const hy={kernelName:ve,backendName:"cpu",kernelFunc:cy};function dy(e,t,n="float32"){if("complex64"===n)return cy({inputs:{real:dy(e,t,"float32"),imag:dy(e,t,"float32")},backend:e});const s=L(f(t),n);return e.makeTensorInfo(t,n,s)}function py(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const fy={kernelName:ct,backendName:"cpu",kernelFunc:py};function gy(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const my={kernelName:sn,backendName:"cpu",kernelFunc:gy};function by(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=nr([0],n),[r,a]=uy((e,t)=>e!==t?1:0)(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function xy(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return py({inputs:{x:r},backend:n});const e=dy(n,r.shape,r.dtype),t=xy({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=cy({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=gy({inputs:{input:r},backend:n}),t=xy({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!$(r.dtype,a)){const e=py({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(r.dataId).values,[o,l,u]=by(i,r.shape,r.dtype,a);return n.makeTensorInfo(o,l,u)}const yy={kernelName:ye,backendName:"cpu",kernelFunc:xy};function ky(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;ry([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?ed(l):l,h="string"===a.dtype?ed(u):u,d=s||a.dtype,[p,f]=t(a.shape,i.shape,c,h,d);return o.makeTensorInfo(f,d,p)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=xy({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=xy({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=o.data.get(d.dataId).values,g=o.data.get(p.dataId).values,[m,b,x]=n(a.shape,i.shape,l,u,f,g),y=o.makeTensorInfo(x,"float32",m),k=o.makeTensorInfo(x,"float32",b),w=cy({inputs:{real:y,imag:k},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(y),o.disposeIntermediateTensorInfo(k),w}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function wy(e){return(t,n,s,r,a,i)=>{const o=oo(t,n),l=f(o),u=o.length,c=F(o),h=I("float32",l),d=I("float32",l),p=ao(t,o),g=ao(n,o),m=Ch(s,r),b=Ch(a,i),x=t.length,y=F(t),k=n.length,w=F(n);if(p.length+g.length===0)for(let f=0;f<h.length;f++){const t=f%m.length,n=f%b.length,s=e(m[2*t],m[2*t+1],b[2*n],b[2*n+1]);h[f]=s.real,d[f]=s.imag}else for(let f=0;f<h.length;f++){const t=P(f,u,c),n=t.slice(-x);p.forEach(e=>n[e]=0);const s=B(n,x,y),r=t.slice(-k);g.forEach(e=>r[e]=0);const a=B(r,k,w),i=e(m[2*s],m[2*s+1],b[2*a],b[2*a+1]);h[f]=i.real,d[f]=i.imag}return[h,d,o]}}const vy=uy((e,t)=>e+t),Iy=wy((e,t,n,s)=>({real:e+n,imag:t+s})),Cy=ky(Q,vy,Iy),$y={kernelName:Q,backendName:"cpu",kernelFunc:Cy};function Sy(e,t,n,s,r){const a=f(s),i=L(r,n);for(let o=0;o<e.length;o++){const n=e[o];if(n<0)throw new Error("Input x must be non-negative!");n>=r||(i[n]+=a>0?t[o]:1)}return i}function Ny(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Ua([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const Ty=uy((e,t)=>e&t),Ey={kernelName:be,backendName:"cpu",kernelFunc:ky(be,Ty)};function Ry(e){return(t,n,s)=>{const r=C(n,t.length);for(let a=0;a<t.length;++a)r[a]=e(t[a],s);return r}}function Ay(e,t,n){return Fy(e,Ry(t),n)}function Fy(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;ry(i,e);const o=a,l=o.data.get(i.dataId).values;let u;if("string"===i.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=ed(l)}else u=l;const c=n||i.dtype,h=t(u,c,r);return o.makeTensorInfo(i.shape,c,h)}}const Dy=Ry(e=>Math.ceil(e)),_y=Fy(ke,Dy),Oy={kernelName:ke,backendName:"cpu",kernelFunc:_y};function Ly(e,t,n,s){const r=C(n,f(t));if(s&&"string"!==n){let t=0;e.forEach(e=>{const n=f(e.shape);r.set(e.vals,t),t+=n})}else{let s=0;e.forEach(e=>{const a="string"===n?ed(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]})}return r}const My=uy((e,t)=>e===t?1:0),zy=ky(Ye,My,null,"bool"),By={kernelName:Ye,backendName:"cpu",kernelFunc:zy},Py=Ry(e=>Math.exp(e)),Wy=Fy(Ze,Py,"float32"),Uy={kernelName:Ze,backendName:"cpu",kernelFunc:Wy},Vy=Ry(e=>Math.expm1(e)),Gy=Fy(Qe,Vy),Hy={kernelName:Qe,backendName:"cpu",kernelFunc:Gy},jy=Ry(e=>Math.floor(e)),Ky=Fy(st,jy),Xy={kernelName:st,backendName:"cpu",kernelFunc:Ky},qy=uy((e,t)=>Math.floor(e/t)),Yy=ky(rt,qy,null,"int32"),Zy={kernelName:rt,backendName:"cpu",kernelFunc:Yy};function Jy(e,t,n,s,r,a,i,o,l){const u=Ua([s,a],n);for(let c=0;c<s;c++){const n=[];let s=0;for(let t=0;t<r;t++){const a=e[c*r+t];s+=a*i[t],n.push(a)}if(s<0||s>=l/a)throw new Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<a;e++)u.values[c*a+e]=t.get(...t.indexToLoc(s*a+e))}return u}function Qy(e,t,n){const s=Ua(n,e.dtype);for(let r=0;r<s.size;++r){const n=s.indexToLoc(r).slice(),a=n[0],i=n[2],o=t.locToIndex([a,i]);n[2]=t.values[o];const l=e.locToIndex(n);0<=l&&l<e.values.length&&(s.values[r]=e.values[l])}return s}const ek=uy((e,t)=>e>t?1:0),tk=ky(lt,ek,null,"bool"),nk={kernelName:lt,backendName:"cpu",kernelFunc:tk},sk=uy((e,t)=>e>=t?1:0),rk=ky(ut,sk,null,"bool"),ak={kernelName:ut,backendName:"cpu",kernelFunc:rk},ik=uy((e,t)=>e<t?1:0),ok=ky(bt,ik,null,"bool"),lk={kernelName:bt,backendName:"cpu",kernelFunc:ok},uk=uy((e,t)=>e<=t?1:0),ck=ky(xt,uk,null,"bool"),hk={kernelName:xt,backendName:"cpu",kernelFunc:ck};function dk(e,t,n){const s=(t-e)/(n-1),r=L(n,"float32");r[0]=e;for(let a=1;a<r.length;a++)r[a]=r[a-1]+s;return r}const pk=Ry(e=>Math.log(e)),fk=Fy(kt,pk),gk={kernelName:kt,backendName:"cpu",kernelFunc:fk};function mk(e,t,n,s){const r=I(s,f(n));for(let a=0;a<r.length;++a){const n=a*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];(Number.isNaN(t)||t>s)&&(s=t)}r[a]=s}return r}const bk=uy((e,t)=>Math.max(e,t)),xk=ky(Tt,bk),yk={kernelName:Tt,backendName:"cpu",kernelFunc:xk},kk=uy((e,t)=>Math.min(e,t)),wk=ky(Lt,kk),vk={kernelName:Lt,backendName:"cpu",kernelFunc:wk},Ik=uy((e,t)=>e*t),Ck=wy((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n})),$k=ky(Pt,Ik,Ck),Sk={kernelName:Pt,backendName:"cpu",kernelFunc:$k};function Nk(e,t,n){const s=tr(-1,n);return Ik([],t,s,e,n)}const Tk={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;ry(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=Nk(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},Ek=uy((e,t)=>e!==t?1:0),Rk=ky(Ut,Ek,null,"bool"),Ak={kernelName:Ut,backendName:"cpu",kernelFunc:Rk};function Fk(e,t,n,s,r){const a=t.length,i=f(t),o=F(t),l=F(r),u=I(n,f(r));for(let c=0;c<i;++c){const t=P(c,a,o),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];u[B(n,a,l)]=e[c]}return u}function Dk(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;ry(r,"transpose");const i=r.shape.length,o=new Array(i);for(let u=0;u<o.length;u++)o[u]=r.shape[a[u]];const l=Fk(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const _k={kernelName:Yn,backendName:"cpu",kernelFunc:Dk};function Ok(e,t,n,s){const[r,a]=yo(e,s),i=Dr(t,"int32"),o=L(f(r),i),l=f(a);for(let u=0;u<o.length;++u){const e=u*l;let t=1;for(let s=0;s<l;++s)t*=n[e+s];o[u]=t}return{outVals:o,outShape:r,outDtype:i}}const Lk={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ry(r,"prod");const o=r.shape.length,l=w(a,r.shape),u=vo(l,o);let c=l,h=r;const d=[];null!=u&&(h=Dk({inputs:{x:r},backend:n,attrs:{perm:u}}),d.push(h),c=Co(c.length,o));const p=n.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=Ok(h.shape,h.dtype,p,c);let b=g;return i&&(b=ko(g,l)),d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(b,m,f)}};function Mk(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function zk(e,t,n,s,r,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach((e,s)=>{if(e<0||e>=n){const r=P(s,t.length,F(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}})}(a,i,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=function(e,t,n,s){const r=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const e=t[u+1];for(let t=1;t<l+1;++t)o[u].push(t*e)}for(let u=0;u<e.length;++u){let s=e[u],i=e[u]+1;for(let e=0;e<n.length;++e){const r=n[e],a=e+t.length-1;if(a>=0){const e=o[a],t=e[e.length-1]-r[s];for(let n=s;n<i;++n)o[a].push(r[n+1]+t)}s=r[s],i=r[i]}i!==s&&(r.push([s,i]),a+=i-s)}return{outSplits:o,valueSlices:r,numValues:a}}(a,i,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=C("int32",e[n].length);t.push(s),e[n].forEach((e,t)=>s[t]=e)}return t}(u),p=function(e,t,n,s,r){const a=t.slice();a[0]=r;const i=C(n,f(a)),o=e.length;return function(e,t,n,s,r,a){const i=Mk(t,2)[1],o=Mk(a,2)[1];let l=0;for(const u of n)for(let t=u[0];t<u[1];++t){for(let n=0;n<s;++n)r[l*o+n]=e[t*i+n];++l}}(e,t,s,0===o?0:o/t[0],i,a),[i,a]}(n,s,r,c,h);return[d,p[0],p[1]]}function Bk(e,t,n,s,r,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,l=0===r.length,u=0===i.length,c=[];o||c.push(t[0]),l||c.push(r[0]),u||c.push(i[0]);for(let g=1;g<c.length;++g)if(c[g]!==c[g-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=C("int32",h+1);d[0]=0;for(let g=0;g<h;++g){const t=o?e[0]:e[g],n=l?s[0]:s[g],r=u?a[0]:a[g];if(0===r)throw new Error("Requires delta != 0");let i;if(r>0&&n<t||r<0&&n>t)i=0;else if(i=Math.ceil(Math.abs((n-t)/r)),i>2147483647)throw new Error("Requires ((limit - start) / delta) <= 2147483647");d[g+1]=d[g]+i}const p=C(n,d[h]);let f=0;for(let g=0;g<h;++g){const t=d[g+1]-d[g];let n=o?e[0]:e[g];const s=u?a[0]:a[g];for(let e=0;e<t;++e)p[f++]=n,n+=s}return[d,p]}var Pk=sh;class Wk{constructor(e,t,n,s,r,a,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=ih(u),this.raggedRank=oh(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Pk.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Pk.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Pk.VALUE_ROWIDS:return Wk.getMaxWidthValueRowID(t);case Pk.ROW_SPLITS:return Wk.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Pk[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Vk(e,n)}calculateOutputSize(e){const t=this.valuesShape;lh(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=ah(this.raggedRank,n,t);s[0]<0&&(s[0]=e);for(let r=1;r<=this.raggedRank;++r)s[r]<0&&(s[r]=this.getMaxWidth(r));return s}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let i=0;i<s;++i,a+=t)r.push(a);for(let i=s;i<e;++i)r.push(-1);return h(r.length===e,()=>"Final length of result must be equal to firstDimension."),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(s,r),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)a.push(l),l+=n;for(let e=0;e<r-o;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===o)l>=0&&(++i,i<s?l+=n:l=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Pk.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case Pk.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${Pk[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Pk.FIRST_DIM_SIZE:return e[0];case Pk.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Pk.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Pk[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let a=n.length-2;a>=0;--a)n[a]=n[a+1]*t[a+1];const s=Vk(t,!1),r=C(this.valuesDType,f(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let i=s.slice();i=i.slice(e+1);const o=f(i),l=t.length;let u=this.defaultValue;if(u.length!==o&&1!==u.length){const e=this.defaultValueShape;oa(()=>{const t=vi(u,e),n=Li(t,i);u=n.dataSync()})}let c=0,h=0,d=0;for(let p=0;p<=l;++p){let e=p<l?t[p]:-1;if(e!==d){if(h<d){const e=r.subarray(c*o);Uk(a.subarray(h*o),e,(d-h)*o)}if(p>=l){const t=n.length;e=Math.floor(t/o)}if(e>d)if(1===this.defaultValue.length)a.subarray(d*o,e*o).fill(this.defaultValue[0]),d=e;else for(;e>d;)Uk(a.slice(d*o),u,o),++d;e<0?(c=p+1,h=d):(c=p,h=d,d=h+1)}else++d}}}function Uk(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function Vk(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function Gk(e,t,n,s,r,a,i,o,l,u){return new Wk(e,t,n,s,r,a,i,o,l,u).compute()}function Hk(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return L(0,s);const r=L(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let a=1;a<r.length;a++)r[a]=r[a-1]+n;return r}const jk=Ry(e=>1/Math.sqrt(e)),Kk=Fy(gn,jk),Xk={kernelName:gn,backendName:"cpu",kernelFunc:Kk};function qk(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,d=t.values;if(0===s)return Ua(n,t.dtype);const p=l instanceof mr?l:Ua(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=s/r)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<r;n++)u?p.values[a*r+n]+=d[f*r+n]:p.values[a*r+n]=0===t.rank?d[0]:d[f*r+n]}return p}const Yk=Ry(e=>1/(1+Math.exp(-e))),Zk=Ay($n,e=>1/(1+Math.exp(-e))),Jk={kernelName:$n,backendName:"cpu",kernelFunc:Zk};function Qk(e,t,n,s,r){const a=jc(s,t,n),i=f(n),o=F(s);if(a){const n=Kc(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Ua(s,r,"string"===r?ed(e):e),u=Ua(n,r);for(let c=0;c<u.size;++c){const e=u.indexToLoc(c),n=e.map((e,n)=>e+t[n]);u.set(l.get(...n),...e)}return"string"===r?td(u.values):u.values}function ew(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;ry(r,"slice");const[o,l]=Xc(r,a,i);Lc(r,o,l);const u=Qk(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const tw={kernelName:wn,backendName:"cpu",kernelFunc:ew};function nw(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Ph(o));return[C(n,0),[0,h],C(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<o;++m){const t=e[m*h];if(t<0)throw new Error(Wh(m,t));if(t>=l)throw new Error(Uh(m,t,l));++f[t],d=d&&t>=p,p=t}let g=!0;for(let m=0;m<l;++m){const e=0===f[m];u[m]=e,g=g&&!e,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=C(n,t*h),d=C(r,t),p=new Array(l).fill(0);for(let n=0;n<o;++n){const t=e[n*h],r=p[t],i=(0===t?0:f[t-1])+r;p[t]++;for(let s=0;s<h;++s)a[i*h+s]=e[n*h+s];d[i]=s[n],c[n]=i}for(let e=0;e<l;++e)if(0===p[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;d[t]=i}return[a,[t,h],d,u,c]}}function sw(e,t,n,s,r){const a=f(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let f=0;f<o;++f){const e=r[f];if(-1===e){if(-1!==c)throw new Error(Vh(c,f));c=f,l.push(1)}else{if(e<0)throw new Error(Gh(f,e));u*=e,l.push(e)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Hh(s,l));l[c]=e}if(f(l)!==a)throw new Error(jh(s,l));const h=s.length,d=[];if(h>0){d[h-1]=1;for(let e=h-2;e>=0;--e)d[e]=d[e+1]*s[e+1]}const p=[];if(o>0){p[o-1]=1;for(let e=o-2;e>=0;--e)p[e]=p[e+1]*l[e+1]}const g=C(n,i*o);for(let f=0;f<i;++f){let t=0;for(let n=0;n<h;++n)t+=e[f*h+n]*d[n];for(let e=0;e<o;++e)g[f*o+e]=Math.trunc(t/p[e]),t%=p[e]}return[g,[i,o],l]}function rw(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=C(n,h.reduce((e,t)=>e*t,1));if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,g=0,m=r[p];for(;;){let t=0;if(f<o){if(t=r[f],m===t){++f;continue}if(m>=t)throw new Error(Kh())}if(m<0||m>=c)throw new Error(Xh(m,c));m>g&&d.fill(i,g*u,m*u);for(let n=p;n<f;++n){const t=s[n];if(t<0||t>=l[0])throw new Error(qh(n,s[n],l[0]));for(let n=0;n<u;n++)d[m*u+n]+=e[t*u+n]}if(a)for(let e=0;e<u;e++)d[m*u+e]/=f-p;if(p=f,++f,g=m+1,m=t,f>o)break}return g<c&&d.fill(i,g*u,c*u),[d,h]}const aw=Ry(e=>Math.sqrt(e)),iw=Ay(Nn,e=>Math.sqrt(e)),ow={kernelName:Nn,backendName:"cpu",kernelFunc:iw},lw=uy((e,t)=>{const n=e-t;return n*n}),uw=ky(Mn,lw),cw={kernelName:Mn,backendName:"cpu",kernelFunc:uw},hw=Ry((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:r}=t;return e.replace(new RegExp(n,s?"g":""),r)}),dw={kernelName:Bn,backendName:"cpu",kernelFunc:Fy(Bn,hw)};function pw(e,t,n,s){const r=Ua(e,t.dtype);for(let a=0;a<r.size;a++){const e=r.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+s[t];r.set(t.get(...i),...e)}return r}class fw{constructor(e,t,n,s,r,a){this.separator=rr(e),this.nGramWidths=t,this.leftPad=rr(n),this.rightPad=rr(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length,d+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(d);const p=n[s+i];let f=0;const g=e=>e.forEach(e=>p[f++]=e);for(let e=0;e<l;++e)g(this.leftPad),g(this.separator);for(let t=0;t<c-1;++t)g(e[h+t]),g(this.separator);if(c>0){g(e[h+c-1]);for(let e=0;e<u;++e)g(this.separator),g(this.rightPad)}else{for(let e=0;e<u-1;++e)g(this.rightPad),g(this.separator);g(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=C("int32",s);if(0===n||0===s){const e=new Array(n);for(let t=0;t<=r;++t)a[t]=0;return[e,a]}a[0]=0;for(let o=1;o<=r;++o){const e=t[o]-t[o-1];let n=0;this.nGramWidths.forEach(t=>{n+=this.getNumNGrams(e,t)}),this.preserveShort&&e>0&&0===n&&(n=1),a[o]=a[o-1]+n}const i=new Array(a[r]);for(let o=0;o<r;++o){const n=t[o];let s=a[o];if(this.nGramWidths.forEach(r=>{const a=t[o+1]-t[o],l=this.getNumNGrams(a,r);this.createNGrams(e,n,i,s,l,r),s+=l}),this.preserveShort&&s===a[o]){const r=t[o+1]-t[o];if(0===r)continue;const a=r+2*this.padWidth,l=1;this.createNGrams(e,n,i,s,l,a)}}return[i,a]}}function gw(e,t,n,s,r,a,i,o){return new fw(n,s,r,a,i,o).compute(e,t)}function mw(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function bw(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let d=0;d<s;++d){const s=r.length;mw(e[d],t,n,r);const l=r.length-s;o[d]=l,a+=l,i=Math.max(i,l)}const l=C("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let d=0;d<s;++d)for(let e=0;e<o[d];++e)l[2*h]=d,l[2*h+1]=e,u[h]=r[h],++h;return[l,u,c]}function xw(e,t){const n=C("int32",e.length);for(let s=0;s<e.length;++s)n[s]=er(e[s]).modulo(t).getLowBitsUnsigned();return n}const yw=uy((e,t)=>e-t),kw=wy((e,t,n,s)=>({real:e-n,imag:t-s})),ww=ky(Gn,yw,kw),vw={kernelName:Gn,backendName:"cpu",kernelFunc:ww};function Iw(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const s=Ua(n,e.dtype);for(let r=0;r<s.values.length;++r){const t=s.indexToLoc(r),n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=t[s]%e.shape[s];const a=e.locToIndex(n);s.values[r]=e.values[a]}return s}const Cw=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function $w(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);$w(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(c(e,n,t),Cw(e[s],r)>0&&c(e,n,s);a<i;){for(c(e,a,i),a++,i--;Cw(e[a],r)<0;)a+=1;for(;Cw(e[i],r)>0;)i-=1}0===Cw(e[n],r)?c(e,n,i):(i+=1,c(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function Sw(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=I(n,i*s),u=I("int32",i*s);for(let h=0;h<i;h++){const t=h*o,n=e.subarray(t,t+o);let a=new Array(n.length);n.forEach((e,t)=>a[t]={value:e,index:t}),s<a.length&&($w(a,s),a=a.slice(0,s)),r&&a.sort(Cw);const i=h*s,c=l.subarray(i,i+s),d=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,d[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[Ua(c,n,l),Ua(c,"int32",u)]}function Nw(e,t,n,s){const r=w(t,n)[0],a=[1,n[0],1];for(let f=0;f<r;f++)a[0]*=n[f];a[1]=n[r];for(let f=r+1;f<n.length;f++)a[2]*=n[f];const i=new Map,o=new Int32Array(n[r]),l=new mr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let f=0;f<n[r];f++){let t;if(c)t=e[f].toString();else{const e=[];for(let t=0;t<a[0];t++)for(let n=0;n<a[2];n++)e.push(l.get(t,f,n));t=e.join(",")}const n=i.get(t);if(null!=n)o[f]=n;else{const e=i.size;i.set(t,e),o[f]=e,u.push(f)}}const h=a.slice();h[1]=i.size;const d=new mr(h,s);u.forEach((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)d.set(l.get(n,e,s),n,t,s)});const p=n.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:o}}const Tw=Object.freeze(Object.defineProperty({__proto__:null,addImpl:vy,bincountImpl:Sy,bincountReduceImpl:Ny,bitwiseAndImpl:Ty,castImpl:by,ceilImpl:Dy,concatImpl:Ly,equalImpl:My,expImpl:Py,expm1Impl:Vy,floorDivImpl:qy,floorImpl:jy,gatherNdImpl:Jy,gatherV2Impl:Qy,greaterEqualImpl:sk,greaterImpl:ek,lessEqualImpl:uk,lessImpl:ik,linSpaceImpl:dk,logImpl:pk,maxImpl:mk,maximumImpl:bk,minimumImpl:kk,multiplyImpl:Ik,negImpl:Nk,notEqualImpl:Ek,prodImpl:Ok,raggedGatherImpl:zk,raggedRangeImpl:Bk,raggedTensorToTensorImpl:Gk,rangeImpl:Hk,rsqrtImpl:jk,scatterImpl:qk,sigmoidImpl:Yk,simpleAbsImpl:oy,sliceImpl:Qk,sparseFillEmptyRowsImpl:nw,sparseReshapeImpl:sw,sparseSegmentReductionImpl:rw,sqrtImpl:aw,squaredDifferenceImpl:lw,staticRegexReplaceImpl:hw,stridedSliceImpl:pw,stringNGramsImpl:gw,stringSplitImpl:bw,stringToHashBucketFastImpl:xw,subImpl:yw,tileImpl:Iw,topKImpl:Sw,transposeImpl:Fk,uniqueImpl:Nw},Symbol.toStringTag,{value:"Module"}));ha("cpu",()=>new iy,1);const Ew=Ay(Ke,e=>e>=0?e:Math.exp(e)-1),Rw={kernelName:Ke,backendName:"cpu",kernelFunc:Ew};function Aw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;ry([r],"leakyRelu");const i=f(r.shape),o=n.data.get(r.dataId).values,l=I("float32",i);for(let u=0;u<o.length;u++)l[u]=o[u]<0?a*o[u]:o[u];return n.makeTensorInfo(r.shape,"float32",l)}const Fw={kernelName:mt,backendName:"cpu",kernelFunc:Aw},Dw=uy((e,t)=>e<0?t*e:e);function _w(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;ry([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=Dw(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const Ow={kernelName:Zt,backendName:"cpu",kernelFunc:_w},Lw=Ay(an,e=>Math.max(0,e)),Mw={kernelName:an,backendName:"cpu",kernelFunc:Lw},zw=Ay(dn,e=>Math.min(Math.max(0,e),6)),Bw={kernelName:dn,backendName:"cpu",kernelFunc:zw};function Pw(e,t,n,s,r){if("linear"===n)return py({inputs:{x:t},backend:e});if("relu"===n)return Lw({inputs:{x:t},backend:e});if("elu"===n)return Ew({inputs:{x:t},backend:e});if("relu6"===n)return zw({inputs:{x:t},backend:e});if("prelu"===n)return _w({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Aw({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return Zk({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Ww(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=f(r.shape),o=k(a,i),l=f(o);h(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Uw={kernelName:on,backendName:"cpu",kernelFunc:Ww};function Vw(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;ry([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],d=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],g=o?a.shape[u-2]:a.shape[u-1],m=r.shape.slice(0,-2),b=a.shape.slice(0,-2),x=f(m),y=f(b),k=oo(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([p,g]);h(c===d,()=>`Error in matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`);const w=o?[y,g,d]:[y,d,g],v=Ww({inputs:{x:r},backend:n,attrs:{shape:i?[x,c,p]:[x,p,c]}}),I=Ww({inputs:{x:a},backend:n,attrs:{shape:w}}),C=i?v.shape[1]:v.shape[2],$=i?v.shape[2]:v.shape[1],S=o?I.shape[1]:I.shape[2],N=Math.max(x,y),T=n.data.get(v.dataId).values,E=n.data.get(I.dataId).values,R=F(v.shape),A=F(I.shape),[D,_,O]=i?[R[0],1,R[1]]:[R[0],R[1],1],[L,M,z]=o?[1,A[1],A[0]]:[A[1],1,A[0]],B=$*S,P=Ua([N,$,S],v.dtype),W=P.values,U=n.blockSize;for(let h=0;h<N;h++){const e=h%x,t=h%y;for(let n=0;n<$;n+=U){const s=Math.min(n+U,$);for(let r=0;r<S;r+=U){const a=Math.min(r+U,S);for(let i=0;i<C;i+=U){const o=Math.min(i+U,C);for(let l=n;l<s;l++)for(let n=r;n<a;n++){let s=0;for(let r=i;r<o;r++)s+=T[e*D+l*_+r*O]*E[r*L+n*M+t*z];W[h*B+(l*S+n)]+=s}}}}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(k,P.dtype,P.values)}const Gw={kernelName:fe,backendName:"cpu",kernelFunc:Vw},Hw={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=Vw({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(p=Cy({inputs:{a:d,b:i},backend:n}),g.push(d),d=p),c&&(f=Pw(n,d,c,o,h),g.push(d),d=f);for(const m of g)n.disposeIntermediateTensorInfo(m);return d}},jw=Ay(Z,e=>Math.acos(e)),Kw={kernelName:Z,backendName:"cpu",kernelFunc:jw},Xw=Ay(J,e=>Math.acosh(e)),qw={kernelName:J,backendName:"cpu",kernelFunc:Xw},Yw={kernelName:ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;ry(t,"addN");const r=s.map(e=>n.data.get(e.dataId).values),a=Ua(s[0].shape,s[0].dtype),i=a.values;for(let o=0;o<s.length;o++){const e=r[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}},Zw={kernelName:te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ry(r,"all");const o=w(a,r.shape);let l=o;const u=vo(l,r.shape.length);let c=r;null!=u&&(c=Dk({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Co(l.length,r.shape.length)),wo("all",l,c.shape.length);const[h,d]=yo(c.shape,l),p=f(d),g=L(f(h),c.dtype),m=n.data.get(c.dataId).values;for(let f=0;f<g.length;++f){const e=f*p;let t=m[e];for(let n=0;n<p;++n){const s=m[e+n];t=t&&s}g[f]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const b=n.makeTensorInfo(h,c.dtype,g);if(i){const e=Ww({inputs:{x:b},backend:n,attrs:{shape:ko(h,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Jw={kernelName:ne,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ry(r,"any");const o=w(a,r.shape);let l=o;const u=vo(l,r.shape.length);let c=r;null!=u&&(c=Dk({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Co(l.length,r.shape.length)),wo("any",l,c.shape.length);const[h,d]=yo(c.shape,l),p=f(d),g=L(f(h),c.dtype),m=n.data.get(c.dataId).values;for(let f=0;f<g.length;++f){const e=f*p;let t=m[e];for(let n=0;n<p;++n){const s=m[e+n];t=t||s}g[f]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const b=n.makeTensorInfo(h,c.dtype,g);if(i){const e=Ww({inputs:{x:b},backend:n,attrs:{shape:ko(h,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}},Qw={kernelName:se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;ry(r,"argMax");let i=w(a,r.shape);const o=vo(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Dk({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Co(i.length,l.shape.length)),i=[i[0]],wo("argMax",i,l.shape.length);const[c,h]=yo(l.shape,i),d=L(f(c),"int32"),p=f(h),g=n.data.get(l.dataId).values;for(let f=0;f<d.length;++f){const e=f*p;let t=g[e],n=0;for(let s=0;s<p;++s){const r=g[e+s];r>t&&(t=r,n=s)}d[f]=n}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",d)}},ev={kernelName:re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;ry(r,"argMin");let i=w(a,r.shape);const o=vo(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Dk({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Co(i.length,l.shape.length)),i=[i[0]],wo("argMin",i,l.shape.length);const[c,h]=yo(l.shape,i),d=L(f(c),"int32"),p=f(h),g=n.data.get(l.dataId).values;for(let f=0;f<d.length;++f){const e=f*p;let t=g[e],n=0;for(let s=0;s<p;++s){const r=g[e+s];r<t&&(t=r,n=s)}d[f]=n}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(c,"int32",d)}},tv=Ay(ae,e=>Math.asin(e)),nv={kernelName:ae,backendName:"cpu",kernelFunc:tv},sv=Ay(ie,e=>Math.asinh(e)),rv={kernelName:ie,backendName:"cpu",kernelFunc:sv},av=Ay(oe,e=>Math.atan(e)),iv={kernelName:oe,backendName:"cpu",kernelFunc:av},ov=uy((e,t)=>Math.atan2(e,t)),lv=ky(ue,ov),uv={kernelName:ue,backendName:"cpu",kernelFunc:lv},cv=Ay(le,e=>Math.atanh(e)),hv={kernelName:le,backendName:"cpu",kernelFunc:cv};function dv(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Ua(r.outShape,n),m=g.values,b=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],y=r.outShape[3];for(let k=0;k<r.batchSize;++k){const t=k*b,n=k*s[0];for(let g=0;g<r.inChannels;++g)for(let b=0;b<r.outHeight;++b){const k=b*i-d,w=Math.max(0,k),v=Math.min(r.inHeight,c+k),I=t+b*x;for(let t=0;t<r.outWidth;++t){const i=t*o-p,c=Math.max(0,i),d=Math.min(r.inWidth,h+i);let b=f,x=0,k=0;for(let t=w;t<v;t+=l){const r=n+t*s[1];for(let t=c;t<d;t+=u){const n=e[r+t*s[2]+g];"max"===a&&n>b?b=n:"avg"===a&&(x+=n,k++)}if(isNaN(b))break}m[I+t*y+g]="avg"===a?x/k:b}}}return g}function pv(e,t,n,s,r=!1,a=!1){const i=Ua(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Ua(t,n,e);for(let m=0;m<s.batchSize;++m)for(let e=0;e<s.inChannels;++e)for(let t=0;t<s.outHeight;++t){const n=t*o-p;let b=n;for(;b<0;)b+=u;const x=Math.min(s.inHeight,h+n);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let p=h;for(;p<0;)p+=c;const y=Math.min(s.inWidth,d+h);let k=Number.NEGATIVE_INFINITY,w=-1;for(let t=b;t<x;t+=u){const i=t-n;for(let n=p;n<y;n+=c){const o=n-h,l=g.get(m,t,n,e);l>k&&(k=l,w=r?a?((m*s.inHeight+t)*s.inWidth+n)*s.inChannels+e:(t*s.inWidth+n)*s.inChannels+e:i*d+o)}}i.set(w,m,t,o,e)}}return i}function fv(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,b=r.padInfo.left,x="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=Ua(r.outShape,n),k=y.values,w=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],C=r.outShape[4];for(let $=0;$<r.batchSize;++$){const t=$*w,n=$*s[0];for(let y=0;y<r.inChannels;++y)for(let w=0;w<r.outDepth;++w){const $=w*i-g;let S=$;for(;S<0;)S+=u;const N=Math.min(r.inDepth,d+$),T=t+w*v;for(let t=0;t<r.outHeight;++t){const i=t*o-m;let d=i;for(;d<0;)d+=c;const g=Math.min(r.inHeight,p+i),w=T+t*I;for(let t=0;t<r.outWidth;++t){const i=t*l-b;let o=i;for(;o<0;)o+=h;const p=Math.min(r.inWidth,f+i),m=w+t*C;let v=x,I=0,$=0;for(let t=S;t<N;t+=u){const r=n+t*s[1];for(let t=d;t<g;t+=c){const n=r+t*s[2];for(let t=o;t<p;t+=h){const r=e[n+t*s[3]+y];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}k[m+y]="avg"===a?I/Math.max($,1):v}}}}return y}const gv={kernelName:ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ry(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(xi(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=li(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))c=py({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=F(r.shape),s=dv(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},mv={kernelName:de,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;ry(r,"avgPool3d");const c=ui(r.shape,a,i,1,o,l,u),h=fv(n.data.get(r.dataId).values,r.shape,r.dtype,F(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},bv={kernelName:pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;ry([r,a],"avgPool3DGrad");const c=ui(a.shape,i,o,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,b=c.dilationDepth,x=c.dilationHeight,y=c.dilationWidth,k=c.effectiveFilterDepth,w=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=k-1-c.padInfo.front,C=v-1-c.padInfo.left,$=w-1-c.padInfo.top,S=Ua(a.shape,"float32"),N=1/(f*g*m),T=n.bufferSync(r);for(let E=0;E<c.batchSize;++E)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=t-I,a=n-$,i=s-C;let o=0;for(let t=0;t<k;t+=b){const n=(r+t)/h;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let t=0;t<w;t+=x){const s=(a+t)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let t=0;t<v;t+=y){const r=(i+t)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(o+=T.get(E,n,s,r,e))}}}S.set(o*N,E,t,n,s,e)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},xv={kernelName:he,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;ry([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=li(i.shape,o,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,b=c.effectiveFilterHeight,x=c.effectiveFilterWidth,y=x-1-c.padInfo.left,k=b-1-c.padInfo.top,w=Ua(i.shape,"float32"),v=1/(p*f),I=n.data.get(r.dataId).values,C=Ua(r.shape,"float32",I);for(let $=0;$<c.batchSize;++$)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const s=t-k,r=n-y;let a=0;for(let t=0;t<b;t+=g){const n=(s+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<x;t+=m){const s=(r+t)/d;s<0||s>=c.outWidth||Math.floor(s)!==s||(a+=C.get($,n,s,e))}}w.set(a*v,$,t,n,e)}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},yv={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;h(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h(null==a||o.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),ry([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,d=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),g=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),b=g.length,x=f.length,y=p.length,k=d.length;let w=0,v=0,I=0,C=0;for(let h=0;h<c.length;++h)m[h]=g[w++]+(c[h]-d[v++])*f[I++]/Math.sqrt(p[C++]+u),w>=b&&(w=0),v>=k&&(v=0),I>=x&&(I=0),C>=y&&(C=0);return n.makeTensorInfo(r.shape,r.dtype,m)}},kv={kernelName:ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;ry([r],"batchToSpaceND");const o=a.reduce((e,t)=>e*t),l=hh(r.shape,a,o),u=dh(l.length,a.length),c=ph(r.shape,a,o),h=fh(i,a.length),d=gh(c,i,a.length),p=Ww({inputs:{x:r},backend:n,attrs:{shape:l}}),f=Dk({inputs:{x:p},backend:n,attrs:{perm:u}}),g=Ww({inputs:{x:f},backend:n,attrs:{shape:c}}),m=ew({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),m}},wv={kernelName:me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=Sy(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},vv={kernelName:xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=oo(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},Iv=Ay(we,(e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}),Cv={kernelName:we,backendName:"cpu",kernelFunc:Iv},$v={kernelName:Ie,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(f(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let u=0;u<o.length;u++){const e=o[u],t=l[u];s[u]=Math.hypot(e,t)}return n.makeOutput(s,t.shape,"float32")}};function Sv(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Nv={kernelName:dt,backendName:"cpu",kernelFunc:Sv};function Tv(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=w(r,t[0].shape)[0];th(t.map(e=>e.shape),a);let i=nh(t.map(e=>e.shape),a);if(0===f(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter(e=>f(e.shape)>0);if(1===o.length)return py({inputs:{x:o[0]},backend:n});if("complex64"===o[0].dtype){const e=o.map(e=>gy({inputs:{input:e},backend:n})),t=o.map(e=>Sv({inputs:{input:e},backend:n})),s=Tv({inputs:e,backend:n,attrs:{axis:a}}),r=Tv({inputs:t,backend:n,attrs:{axis:a}}),i=cy({inputs:{real:s,imag:r},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map(e=>{const t=f(e.shape.slice(a));return Ww({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),u=l.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));i=nh(l.map(e=>e.shape),1);const c=1===l[0].shape[0],h=Ly(u,i,t[0].dtype,c),d=nh(o.map(e=>e.shape),a),p=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}const Ev={kernelName:Ce,backendName:"cpu",kernelFunc:Tv};function Rv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ry([r,a],"conv2d");const h=ki(l),d=ci(r.shape,a.shape,i,u,o,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,b=d.padInfo.left,x=d.padInfo.top,y="channelsLast"===d.dataFormat,k=new mr(d.outShape,r.dtype),w=F(r.shape),v=F(a.shape),I=w[0],C=y?w[1]:w[2],$=y?w[2]:1,S=y?1:w[1],N=k.strides[0],T=y?k.strides[1]:k.strides[2],E=y?k.strides[2]:1,R=y?1:k.strides[1],A=n.data.get(r.dataId).values,D=n.data.get(a.dataId).values,_=k.values;for(let F=0;F<d.batchSize;++F){const e=F*I,t=F*N;for(let n=0;n<d.outHeight;++n){const s=t+n*T,r=n*d.strideHeight-x;for(let t=0;t<p;++t){const n=r+t*g;if(n<0||n>=d.inHeight)continue;const a=t*v[0],i=e+n*C;for(let e=0;e<d.outWidth;++e){const t=s+e*E,n=e*d.strideWidth-b;for(let e=0;e<f;++e){const s=n+e*m;if(s<0||s>=d.inWidth)continue;const r=i+s*$;let o=a+e*v[1];for(let e=0;e<d.inChannels;++e){const n=A[r+e*S];for(let e=0;e<d.outChannels;++e)_[t+e*R]+=n*D[o+e];o+=d.outChannels}}}}}}return n.makeTensorInfo(k.shape,k.dtype,_)}const Av={kernelName:$e,backendName:"cpu",kernelFunc:Rv},Fv={kernelName:Se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ry([r,a],"conv2dBackpropFilter");const h=ki(l),d=ci(r.shape,c,i,1,o,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,b="channelsLast"===d.dataFormat,x=new mr(d.filterShape,"float32"),y=d.padInfo.left,k=d.padInfo.top,w=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=new mr(r.shape,r.dtype,w),C=new mr(a.shape,a.dtype,v);for(let $=0;$<g;++$){const e=Math.max(0,Math.ceil((k-$)/p)),t=Math.min(d.outHeight,(d.inHeight+k-$)/p);for(let n=0;n<m;++n){const s=Math.max(0,Math.ceil((y-n)/f)),r=Math.min(d.outWidth,(d.inWidth+y-n)/f);for(let a=0;a<d.inChannels;++a)for(let i=0;i<d.outChannels;++i){let o=0;for(let l=0;l<d.batchSize;++l)for(let u=e;u<t;++u){const e=$+u*p-k;for(let t=s;t<r;++t){const s=n+t*f-y;o+=b?I.get(l,e,s,a)*C.get(l,u,t,i):I.get(l,a,e,s)*C.get(l,i,u,t)}}x.set(o,$,n,a,i)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Dv={kernelName:Ne,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;ry([r,a],"conv2dBackpropInput");const h=F(a.shape),d=F(r.shape);let p=ki(u);const f=ci(i,a.shape,o,1,l,c,!1,p),g=new mr(f.inShape,"float32"),m=g.values,b=n.data.get(r.dataId).values,x=n.data.get(a.dataId).values,[y,k,w]=h,{batchSize:v,filterHeight:I,filterWidth:C,inChannels:$,inHeight:S,inWidth:N,outChannels:T,outHeight:E,outWidth:R,strideHeight:A,strideWidth:D}=f;p=f.dataFormat;const _=I-1-f.padInfo.top,O=C-1-f.padInfo.left,L="channelsLast"===p,M=g.strides[0],z=L?g.strides[1]:g.strides[2],B=L?g.strides[2]:1,P=L?1:g.strides[1],W=d[0],U=L?d[1]:d[2],V=L?d[2]:1,G=L?1:d[1];for(let F=0;F<v;++F)for(let e=0;e<$;++e)for(let t=0;t<S;++t){const n=t-_,s=Math.max(0,Math.ceil(n/A)),r=Math.min(E,(I+n)/A);for(let a=0;a<N;++a){const i=a-O,o=Math.max(0,Math.ceil(i/D)),l=Math.min(R,(C+i)/D);let u=0;for(let t=s;t<r;++t){const s=t*A-n;for(let n=o;n<l;++n){const r=W*F+U*t+V*n,a=y*(I-1-s)+k*(C-1-(n*D-i))+w*e;for(let e=0;e<T;++e)u+=b[r+G*e]*x[a+e]}}m[M*F+z*t+B*a+P*e]=u}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},_v={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;ry([r,a],"conv3d");const u=hi(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,b=m.front,x=m.left,y=m.top,k=new mr(u.outShape,r.dtype),w=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=k.values,C=F(r.shape),$=F(a.shape);for(let S=0;S<u.batchSize;++S){const e=S*C[0],t=S*k.strides[0];for(let n=0;n<u.outDepth;++n){const s=t+n*k.strides[1],r=n*u.strideDepth-b;for(let t=0;t<c;++t){const n=r+t*p;if(n<0||n>=u.inDepth)continue;const a=t*$[0],i=e+n*C[1];for(let e=0;e<u.outHeight;++e){const t=s+e*k.strides[2],n=e*u.strideHeight-y;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*$[1],o=i+s*C[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-x;for(let e=0;e<d;++e){const t=s+e*g;if(t<0||t>=u.inWidth)continue;const a=r+e*$[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=w[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},Ov={kernelName:Ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;ry([r,a],"conv3dBackpropFilterV2");const u=F(r.shape),c=F(a.shape),h=hi(r.shape,l,i,1,o),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,b=h.filterWidth,x=new mr(h.filterShape,"float32"),y=x.values,[k,w,v,I]=x.strides,C=n.data.get(a.dataId).values,[$,S,N,T]=c,E=n.data.get(r.dataId).values,[R,A,D,_]=u,O=h.padInfo.front,L=h.padInfo.left,M=h.padInfo.top;for(let F=0;F<g;++F){const e=Math.max(0,Math.ceil((O-F)/d)),t=Math.min(h.outDepth,(h.inDepth+O-F)/d),n=F*k;for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((M-s)/p)),a=Math.min(h.outHeight,(h.inHeight+M-s)/p),i=s*w+n;for(let n=0;n<b;++n){const o=Math.max(0,Math.ceil((L-n)/f)),l=Math.min(h.outWidth,(h.inWidth+L-n)/f),u=n*v+i;for(let i=0;i<h.inChannels;++i){const c=i*I+u;for(let u=0;u<h.outChannels;++u){let g=0;for(let c=0;c<h.batchSize;++c){const h=c*R,m=c*$;for(let c=e;c<t;++c){const e=(F+c*d-O)*A+h,t=c*S+m;for(let c=r;c<a;++c){const r=(s+c*p-M)*D+e,a=c*N+t;for(let e=o;e<l;++e){const t=e*T+a;g+=E[(n+e*f-L)*_+r+i]*C[t+u]}}}}y[c+u]=g}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Lv={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;ry([r],"conv3dBackpropInputV2");const u=F(r.shape),c=F(a.shape),h=hi(l,a.shape,o,1,i),d=new mr(h.inShape,"float32"),p=d.values,[f,g,m,b]=d.strides,x=n.data.get(r.dataId).values,[y,k,w,v]=u,I=n.data.get(a.dataId).values,[C,$,S,N]=c,{batchSize:T,filterDepth:E,filterHeight:R,filterWidth:A,inChannels:D,inDepth:_,inHeight:O,inWidth:L,outChannels:M,outDepth:z,outHeight:B,outWidth:P,strideDepth:W,strideHeight:U,strideWidth:V}=h,G=E-1-h.padInfo.front,H=R-1-h.padInfo.top,j=A-1-h.padInfo.left;for(let F=0;F<T;++F)for(let e=0;e<D;++e)for(let t=0;t<_;++t){const n=t-G,s=Math.max(0,Math.ceil(n/W)),r=Math.min(z,(E+n)/W);for(let a=0;a<O;++a){const i=a-H,o=Math.max(0,Math.ceil(i/U)),l=Math.min(B,(R+i)/U);for(let u=0;u<L;++u){const c=u-j,h=Math.max(0,Math.ceil(c/V)),d=Math.min(P,(A+c)/V);let T=0;for(let t=s;t<r;++t){const s=t*W-n;for(let n=o;n<l;++n){const r=n*U-i;for(let a=h;a<d;++a){const i=y*F+k*t+w*n+v*a,o=C*(E-1-s)+$*(R-1-r)+S*(A-1-(a*V-c))+N*e;for(let e=0;e<M;++e)T+=x[i+e]*I[o+e]}}}p[f*F+g*t+m*a+b*u+e]=T}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},Mv=Ay(Ae,e=>Math.cos(e)),zv={kernelName:Ae,backendName:"cpu",kernelFunc:Mv},Bv=Ay(Fe,e=>Math.cosh(e)),Pv={kernelName:Fe,backendName:"cpu",kernelFunc:Bv},Wv={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[g,m]=o,b=Ua([f,g,m,p],"float32"),x=n.data.get(a.dataId).values,y=n.data.get(i.dataId).values,k=n.data.get(r.dataId).values,w=F(r.shape),v=F(b.shape);for(let I=0;I<f;I++){const e=4*I,t=x[e],n=x[e+1],s=x[e+2],r=x[e+3],a=y[I];if(a>=c)continue;const i=g>1?(s-t)*(h-1)/(g-1):0,o=m>1?(r-n)*(d-1)/(m-1):0;for(let c=0;c<g;c++){const e=g>1?t*(h-1)+c*i:.5*(t+s)*(h-1);if(e<0||e>h-1)for(let t=0;t<m;t++)for(let e=0;e<p;e++){const n=e+t*v[2]+c*v[1]+I*v[0];b.values[n]=u}else if("bilinear"===l){const t=Math.floor(e),s=Math.ceil(e),i=e-t;for(let e=0;e<m;e++){const l=m>1?n*(d-1)+e*o:.5*(n+r)*(d-1);if(l<0||l>d-1){for(let t=0;t<p;t++){const n=t+e*v[2]+c*v[1]+I*v[0];b.values[n]=u}continue}const h=Math.floor(l),f=Math.ceil(l),g=l-h;for(let n=0;n<p;n++){let r=n+h*w[2]+t*w[1]+a*w[0];const o=k[r];r=n+f*w[2]+t*w[1]+a*w[0];const l=k[r];r=n+h*w[2]+s*w[1]+a*w[0];const u=k[r];r=n+f*w[2]+s*w[1]+a*w[0];const d=o+(l-o)*g,p=u+(k[r]-u)*g;r=n+e*v[2]+c*v[1]+I*v[0],b.values[r]=d+(p-d)*i}}}else for(let t=0;t<m;++t){const s=m>1?n*(d-1)+t*o:.5*(n+r)*(d-1);if(s<0||s>d-1){for(let e=0;e<p;e++){const n=e+t*v[2]+c*v[1]+I*v[0];b.values[n]=u}continue}const i=Math.round(s),l=Math.round(e);for(let e=0;e<p;e++){const n=e+i*w[2]+l*w[1]+a*w[0],s=e+t*v[2]+c*v[1]+I*v[0];b.values[s]=k[n]}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Uv={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;ry(r,"cumprod");const l=vo([a],r.shape.length);let u=r;null!=l&&(u=Dk({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Co(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Dr(u.dtype,"int32"),d=O(f(u.shape),h),p=n.data.get(u.dataId).values,g=u.shape[u.shape.length-1],m=o?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let f=0;f<p.length;f+=g)for(let e=0;e<g;e++){const t=m(f,e);if(0===e)d[t]=i?1:p[t];else{const n=m(f,e-1);d[t]=i?p[n]*d[n]:p[t]*d[n]}}const b=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=Dk({inputs:{x:b},backend:n,attrs:{perm:Io(l)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(u),e}return b}},Vv={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;ry(r,"cumsum");const l=vo([a],r.shape.length);let u=r;null!=l&&(u=Dk({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Co(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Dr(u.dtype,"int32"),d=L(f(u.shape),h),p=n.data.get(u.dataId).values,g=u.shape[u.shape.length-1],m=o?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let f=0;f<p.length;f+=g)for(let e=0;e<g;e++){const t=m(f,e);if(0===e)d[t]=i?0:p[t];else{const n=m(f,e-1);d[t]=i?p[n]+d[n]:p[t]+d[n]}}const b=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=Dk({inputs:{x:b},backend:n,attrs:{perm:Io(l)}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(u),e}return b}},Gv={kernelName:Le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=Sy(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Ny(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},Hv={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;h("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],d=l*a,p=u*a,f=c/(a*a),g=n.data.get(r.dataId).values,m=new Float32Array(o*d*p*f);let b=0;for(let h=0;h<o;++h)for(let e=0;e<d;++e){const t=Math.floor(e/a),n=e%a;for(let e=0;e<p;++e){const s=Math.floor(e/a),r=(n*a+e%a)*f;for(let e=0;e<f;++e){const n=e+r+c*(s+u*(t+l*h));m[b++]=g[n]}}}return n.makeTensorInfo([o,d,p,f],r.dtype,m)}};function jv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;ry([r,a],"depthwiseConv2DNative");const c=F(r.shape),d=F(a.shape);let p=l;null==p&&(p=[1,1]),h(xi(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const f=ci(r.shape,a.shape,i,p,o,u,!0),{filterHeight:g,filterWidth:m,dilationHeight:b,dilationWidth:x,padInfo:y}=f,k=y.left,w=y.top,v=f.outChannels/f.inChannels,I=new mr(f.outShape,r.dtype),C=n.data.get(r.dataId).values,$=n.data.get(a.dataId).values,S=I.values;for(let h=0;h<f.batchSize;++h){const e=h*c[0],t=h*I.strides[0];for(let n=0;n<f.outHeight;++n){const s=t+n*I.strides[1],r=n*f.strideHeight-w;for(let t=0;t<g;++t){const n=r+t*b;if(n<0||n>=f.inHeight)continue;const a=t*d[0],i=e+n*c[1];for(let e=0;e<f.outWidth;++e){const t=s+e*I.strides[2],n=e*f.strideWidth-k;for(let e=0;e<m;++e){const s=n+e*x;if(s<0||s>=f.inWidth)continue;const r=a+e*d[1],o=i+s*f.inChannels;let l=t,u=r;for(let e=0;e<f.inChannels;++e){const t=C[o+e];for(let e=0;e<v;++e)S[l+e]+=t*$[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const Kv={kernelName:ze,backendName:"cpu",kernelFunc:jv},Xv={kernelName:Be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;ry([r,a],"depthwiseConv2dNativeBackpropFilter");const h=ci(r.shape,c,i,o,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new mr(h.filterShape,"float32"),b=h.padInfo.left,x=h.padInfo.top,y=h.outChannels/h.inChannels,k=n.data.get(r.dataId).values,w=new mr(r.shape,r.dtype,k),v=n.data.get(a.dataId).values,I=new mr(a.shape,a.dtype,v);for(let C=0;C<f;++C){const e=Math.max(0,Math.ceil((x-C)/d)),t=Math.min(h.outHeight,(h.inHeight+x-C)/d);for(let n=0;n<g;++n){const s=Math.max(0,Math.ceil((b-n)/p)),r=Math.min(h.outWidth,(h.inWidth+b-n)/p);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/y),o=a%y;let l=0;for(let u=0;u<h.batchSize;++u)for(let o=e;o<t;++o){const e=C+o*d-x;for(let t=s;t<r;++t){const s=n+t*p-b;l+=w.get(u,e,s,i)*I.get(u,o,t,a)}}m.set(l,C,n,i,o)}}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},qv={kernelName:Pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;ry([r,a],"depthwiseConv2DNativeBackpropInput");const h=F(r.shape),d=F(a.shape),p=ci(c,a.shape,i,o,l,u,!0),f=new mr(p.inShape,"float32"),g=f.values,[m,b,x]=f.strides,y=n.data.get(r.dataId).values,[k,w,v]=h,I=n.data.get(a.dataId).values,[C,$,S]=d,{batchSize:N,filterHeight:T,filterWidth:E,inChannels:R,inHeight:A,inWidth:D,outChannels:_,outHeight:O,outWidth:L,strideHeight:M,strideWidth:z}=p,B=T-1-p.padInfo.top,P=E-1-p.padInfo.left,W=_/R;for(let F=0;F<N;++F)for(let e=0;e<R;++e)for(let t=0;t<A;++t){const n=t-B,s=Math.max(0,Math.ceil(n/M)),r=Math.min(O,(T+n)/M);for(let a=0;a<D;++a){const i=a-P,o=Math.max(0,Math.ceil(i/z)),l=Math.min(L,(E+i)/z);let u=0;for(let t=s;t<r;++t){const s=t*M-n;for(let n=o;n<l;++n){const r=k*F+w*t+v*n,a=C*(T-1-s)+$*(E-1-(n*z-i))+S*e;for(let t=0;t<W;++t)u+=y[r+(e*W+t)]*I[a+t]}}g[m*F+b*t+x*a+e]=u}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Yv={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=f(s.shape),a=n.data.get(s.dataId).values,i=Ua([r,r],s.dtype),o=i.values;for(let u=0;u<a.length;u++)o[u*r+u]=a[u];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Zv={kernelName:Ue,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:g,inWidth:m,inChannels:b,outHeight:x,outWidth:y,padInfo:k,strideHeight:w,strideWidth:v,filterHeight:I,filterWidth:$,dilationHeight:S,dilationWidth:N,outShape:T}=oi(s.shape,r.shape,a,i,"NHWC",o),E=f(T),R=T.length,A=C(s.dtype,E);for(let f=0;f<p;++f)for(let e=0;e<x;++e){const t=e*w-k.top;for(let n=0;n<y;++n){const a=n*v-k.left;for(let i=0;i<b;++i){let o=Number.MIN_SAFE_INTEGER;for(let e=0;e<I;++e){const n=t+e*S;if(n>=0&&n<g)for(let t=0;t<$;++t){const l=a+t*N;if(l>=0&&l<m){const a=B([f,n,l,i],c,F(s.shape)),p=B([e,t,i],d,F(r.shape)),g=u[a]+h[p];g>o&&(o=g)}}}A[B([f,e,n,i],R,F(T))]=o}}}return{dataId:l.write(nr(A,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},Jv={kernelName:Ge,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=_(s.shape,u.data.get(s.dataId).values),d=_(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:b,outWidth:x,padInfo:y,strideHeight:k,strideWidth:w,filterHeight:v,filterWidth:I,dilationHeight:C,dilationWidth:$,outShape:S}=oi(s.shape,r.shape,i,o,"NHWC",l);h(a.rank===S.length,()=>`Error in ${Ge}, dy must have the same rank as output ${S.length}, but got ${a.rank}`);const N=_(S,u.data.get(a.dataId).values),T=M(r.shape,r.dtype);for(let h=0;h<p;++h)for(let e=0;e<b;++e){const t=e*k-y.top;for(let n=0;n<x;++n){const s=n*w-y.left;for(let r=0;r<m;++r){let a=Number.MIN_SAFE_INTEGER,i=0,o=0;for(let e=0;e<v;++e){const n=t+e*C;if(n>=0&&n<f)for(let t=0;t<I;++t){const l=s+t*$;if(l>=0&&l<g){const s=c[h][n][l][r]+d[e][t][r];s>a&&(a=s,i=e,o=t)}}}T[i][o][r]+=N[h][e][n][r]}}}return{dataId:u.write(nr(T,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Qv={kernelName:Ve,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=_(s.shape,u.data.get(s.dataId).values),d=_(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:b,outWidth:x,padInfo:y,strideHeight:k,strideWidth:w,filterHeight:v,filterWidth:I,dilationHeight:C,dilationWidth:$,outShape:S}=oi(s.shape,r.shape,i,o,"NHWC",l);h(a.rank===S.length,()=>`Error in ${Ve}, dy must have the same rank as output ${S.length}, but got ${a.rank}`);const N=_(S,u.data.get(a.dataId).values),T=M(s.shape,s.dtype);for(let h=0;h<p;++h)for(let e=0;e<b;++e){const t=e*k-y.top;for(let n=0;n<x;++n){const s=n*w-y.left;for(let r=0;r<m;++r){let a=Number.MIN_SAFE_INTEGER,i=t<0?0:t,o=s<0?0:s;for(let e=0;e<v;++e){const n=t+e*C;if(n>=0&&n<f)for(let t=0;t<I;++t){const l=s+t*$;if(l>=0&&l<g){const s=c[h][n][l][r]+d[e][t][r];s>a&&(a=s,i=n,o=l)}}}T[h][i][o][r]+=N[h][e][n][r]}}}return{dataId:u.write(nr(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},eI={kernelName:"Draw",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r}=t,{canvas:a,options:i}=s,{contextOptions:o,imageOptions:l}=i||{},u=(null==l?void 0:l.alpha)||1,c=(null==o?void 0:o.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${o.contextType} is not supported by the CPU backend.`);const h=a.getContext(c,(null==o?void 0:o.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],g=n.data.get(r.dataId).values,m="float32"===r.dtype?255:1,b=new Uint8ClampedArray(p*d*4);for(let y=0;y<d*p;++y){const e=[0,0,0,255*u];for(let n=0;n<f;n++){const t=g[y*f+n];if("float32"===r.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===r.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===f?(e[0]=t*m,e[1]=t*m,e[2]=t*m):e[n]=t*m}const t=4*y;b[t+0]=Math.round(e[0]),b[t+1]=Math.round(e[1]),b[t+2]=Math.round(e[2]),b[t+3]=Math.round(e[3])}a.width=p,a.height=d;const x=new ImageData(b,p,d);return h.putImageData(x,0,0),r}};function tI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;ry(r,"sum"),o="bool"===r.dtype?xy({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):py({inputs:{x:r},backend:n});const l=o.shape.length,u=w(a,o.shape),c=vo(u,l);let h=u,d=o;null!=c&&(d=Dk({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Co(h.length,l)),wo("sum",h,d.shape.length);const[p,g]=yo(d.shape,h);let m=dy(n,p,Dr(d.dtype,"int32"));const b=f(g),x=n.data.get(m.dataId).values,y=n.data.get(d.dataId).values;for(let f=0;f<x.length;++f){const e=f*b;let t=0;for(let n=0;n<b;++n)t+=y[e+n];x[f]=t}if(i){const e=m;m=Ww({inputs:{x:m},backend:n,attrs:{shape:ko(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),m}const nI={kernelName:Tn,backendName:"cpu",kernelFunc:tI},sI={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Dh(r,a.length);Oh(i.length,l,a);const{path:u,steps:c}=Lh(o,l),h=c.length;let d=null,p=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:s}=_h(p,l[e]);let r;Mh(t)?r=a[e]:(r=Dk({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);g(r.shape,i)||(r=Ww({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===d?d=r:(d=$k({inputs:{a:r,b:d},backend:n}),f.push(d))}m<h-1&&(u[m]>=0&&(d=tI({inputs:{x:d},backend:n,attrs:{axis:u[m]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&n.disposeIntermediateTensorInfo(g);return d}},rI={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;ry([s,r],"eluGrad");const a=new Float32Array(f(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let l=0;l<i.length;++l){const e=i[l];a[l]=e>=0?o[l]:o[l]*(e+1)}return n.makeTensorInfo(r.shape,"float32",a)}},aI=xh,iI=yh,oI=kh,lI=wh,uI=vh,cI=Ih,hI=Ay(qe,e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+aI*n);return t*(1-((((cI*s+uI)*s+lI)*s+oI)*s+iI)*s*Math.exp(-n*n))}),dI={kernelName:qe,backendName:"cpu",kernelFunc:hI};function pI(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(h(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+a+1),o.splice(l,0,1),Ww({inputs:{x:r},backend:n,attrs:{shape:o}})}const fI={kernelName:Je,backendName:"cpu",kernelFunc:pI},gI=uy((e,t)=>e/t),mI=ky(He,gI),bI={kernelName:He,backendName:"cpu",kernelFunc:mI};function xI(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=f(u),h=I("float32",c),d=I("float32",c);for(let f=0;f<r;f++){const e=ew({inputs:{x:o},backend:n,attrs:{begin:[f,0],size:[1,a]}}),s=ew({inputs:{x:l},backend:n,attrs:{begin:[f,0],size:[1,a]}}),r=cy({inputs:{real:e,imag:s},backend:n}),{real:i,imag:u}=yI(r,t,n),c=Ch(i,u);for(let t=0;t<a;t++){const e=Th(c,t);h[f*a+t]=e.real,d[f*a+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r)}const p=n.makeTensorInfo(u,"float32",h),g=n.makeTensorInfo(u,"float32",d),m=cy({inputs:{real:p,imag:g},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(g),m}function yI(e,t,n){const s=f(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if((o=s)&o-1){const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Ah(r*s,t,n),l=Th(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Eh(s,a,i,r)}return s}(Ch(a,i),s,t);return $h(e)}{const r=kI(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",tr(s,"float32")),i=py({inputs:{x:a},backend:n}),l=bI.kernelFunc({inputs:{a:e,b:a},backend:n}),u=bI.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}var o}function kI(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Ch(e,t),i=n/2,o=Sh(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=cy({inputs:{real:h,imag:d},backend:r}),f=Nh(a),g=f.real,m=f.imag,b=[g.length],x=r.makeTensorInfo(b,"float32",g),y=r.makeTensorInfo(b,"float32",m),k=cy({inputs:{real:x,imag:y},backend:r}),w=kI(l,u,i,s,r),v=w.real,I=w.imag,C=[v.length],$=r.makeTensorInfo(C,"float32",v),S=r.makeTensorInfo(C,"float32",I),N=cy({inputs:{real:$,imag:S},backend:r}),T=kI(g,m,i,s,r),E=T.real,R=T.imag,A=[E.length],F=r.makeTensorInfo(A,"float32",E),D=r.makeTensorInfo(A,"float32",R),_=cy({inputs:{real:F,imag:D},backend:r}),O=Rh(n,s),L=[O.real.length],M=r.makeTensorInfo(L,"float32",O.real),z=r.makeTensorInfo(L,"float32",O.imag),B=cy({inputs:{real:M,imag:z},backend:r}),P=$k({inputs:{a:B,b:_},backend:r}),W=Cy({inputs:{a:N,b:P},backend:r}),U=ww({inputs:{a:N,b:P},backend:r}),V=gy({inputs:{input:W},backend:r}),G=gy({inputs:{input:U},backend:r}),H=Sv({inputs:{input:W},backend:r}),j=Sv({inputs:{input:U},backend:r}),K=Tv({inputs:[V,G],backend:r,attrs:{axis:0}}),X=Tv({inputs:[H,j],backend:r,attrs:{axis:0}}),q=r.data.get(K.dataId).values,Y=r.data.get(X.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(k),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(M),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(X),{real:q,imag:Y}}const wI={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=f(s.shape),a=s.shape[s.shape.length-1],i=Ww({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=xI(i,!1,n),l=Ww({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function vI(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||E(r),o=C(i,f(s));return function(e,t){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const II={kernelName:tt,backendName:"cpu",kernelFunc:vI},CI={kernelName:nt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=I(s.dtype,f(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let h=0;h<i;h++){const e=h*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let t=0;t<l;t++){const s=t*u;for(let r=0;r<u;r++){const i=Math.round(l-t-1),o=e+n+s+r;let h=c[o];i>=0&&i<l&&(h=c[e+n+i*u+r]),a[o]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$I={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=Rv({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=g;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=Ww({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});g=Cy({inputs:{a:g,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else g=Cy({inputs:{a:g,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=g;if("NCHW"===c&&"prelu"===p&&1===o.shape.length&&1!==o.shape[0]){const e=Ww({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});g=Pw(n,g,p,e,f),n.disposeIntermediateTensorInfo(e)}else g=Pw(n,g,p,o,f);n.disposeIntermediateTensorInfo(e)}return g}},SI={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=jv({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(i){const e=g;g=Cy({inputs:{a:g,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=g;g=Pw(n,g,p,o,f),n.disposeIntermediateTensorInfo(e)}return g}},NI={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=f(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=Oc(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=Jy(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,d.values)}},TI={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;ry([r,a],"gatherV2");const l=w(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let f=0;f<u.length;++f){const e=u[f];h(e<=c-1&&e>=0,()=>`GatherV2: the index value ${e} is not in [0, ${c-1}]`)}let d=o;null==o&&(d=0);const p=f(a.shape),g=Jh(r,a,l,d),m=Ww({inputs:{x:r},backend:n,attrs:{shape:[g.batchSize,g.outerSize,g.dimSize,g.sliceSize]}}),b=Ww({inputs:{x:a},backend:n,attrs:{shape:[g.batchSize,p/g.batchSize]}}),x=[g.batchSize,g.outerSize,p/g.batchSize,g.sliceSize],y=n.bufferSync(b),k=Qy(n.bufferSync(m),y,x);return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.makeTensorInfo(g.outputShape,k.dtype,k.values)}},EI={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=f(s.shape),a=s.shape[s.shape.length-1],i=Ww({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=xI(i,!0,n),l=Ww({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},RI=Ay(pt,e=>Number.isFinite(e)?1:0,"bool"),AI={kernelName:pt,backendName:"cpu",kernelFunc:RI},FI=Ay(ft,e=>Math.abs(e)===1/0?1:0,"bool"),DI={kernelName:ft,backendName:"cpu",kernelFunc:FI},_I=Ay(gt,e=>Number.isNaN(e)?1:0,"bool"),OI={kernelName:gt,backendName:"cpu",kernelFunc:_I},LI={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=dk(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},MI=Ay(wt,e=>Math.log1p(e)),zI={kernelName:wt,backendName:"cpu",kernelFunc:MI},BI=uy((e,t)=>e&&t),PI=ky(vt,BI,null,"bool"),WI={kernelName:vt,backendName:"cpu",kernelFunc:PI},UI=Ay(It,e=>e?0:1,"bool"),VI={kernelName:It,backendName:"cpu",kernelFunc:UI},GI=uy((e,t)=>e||t),HI=ky(Ct,GI,null,"bool"),jI={kernelName:Ct,backendName:"cpu",kernelFunc:HI},KI={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;ry(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,d=f(r.shape),p=new Float32Array(d);function g(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let f=0;f<d;f++){const e=g(f),t=h[f]*Math.pow(i+o*e,-l);p[f]=t}return n.makeTensorInfo(r.shape,r.dtype,p)}},XI={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;ry(i,"LRNGrad");const h=f(i.shape),d=i.shape[3],p=n.data.get(i.dataId).values,g=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,b=new Float32Array(h),x=h;for(let f=0;f<x;f++){const e=f%d,t=f-e+Math.max(0,e-o),n=f-e+Math.min(d,e+o+1);let s=0;for(let r=t;r<n;r++)s+=Math.pow(g[r],2);s=u*s+l;for(let r=t;r<n;r++){let e=-2*u*c*g[r]*m[f]/s;f===r&&(e+=Math.pow(s,-c)),e*=p[f],b[r]+=e}}return n.makeTensorInfo(i.shape,r.dtype,b)}};function qI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=w(a,l);let h=c;const d=vo(h,u);let p=o.data.get(r.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];p=Fk(p,l,r.dtype,d,e),h=Co(h.length,u),l=e}ry(r,"max"),wo("max",h,u);const[g,m]=yo(l,h),b=mk(p,f(m),g,r.dtype),x=o.write(b,g,r.dtype);let y=g;return i&&(y=ko(g,c)),{dataId:x,shape:y,dtype:r.dtype}}const YI={kernelName:Nt,backendName:"cpu",kernelFunc:qI},ZI={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ry(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(xi(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=li(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))c=py({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=F(r.shape),s=dv(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},JI={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;ry(r,"maxPool3d");const c=ui(r.shape,a,i,1,o,l,u),h=fv(n.data.get(r.dataId).values,r.shape,r.dtype,F(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},QI={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;ry([r,a],"maxPool3DGrad");const c=ui(a.shape,i,o,1,l,u),h=function(e,t){const n=Ua(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let b=0;b<t.outDepth;++b){const x=b*s-d;let y=x;for(;y<0;)y+=i;const k=Math.min(t.inDepth,u+x);for(let s=0;s<t.outHeight;++s){const u=s*r-p;let d=u;for(;d<0;)d+=o;const w=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const p=r*a-f;let v=p;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+p);let C=Number.NEGATIVE_INFINITY,$=-1;for(let t=y;t<k;t+=i){const n=t-x;for(let s=d;s<w;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-p,o=e.get(g,t,s,a,m);o>=C&&(C=o,$=n*c*h+r*c+i)}}}n.set($,g,b,s,r,m)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,g=c.dilationDepth,m=c.dilationHeight,b=c.dilationWidth,x=c.effectiveFilterDepth,y=c.effectiveFilterHeight,k=c.effectiveFilterWidth,w=x-1-c.padInfo.front,v=k-1-c.padInfo.left,I=y-1-c.padInfo.top,C=Ua(a.shape,"float32"),$=n.bufferSync(r);for(let S=0;S<c.batchSize;++S)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=t-w,a=n-I,i=s-v;let o=0;for(let t=0;t<x;t+=g){const n=(r+t)/d;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let s=0;s<y;s+=m){const r=(a+s)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let a=0;a<k;a+=b){const l=(i+a)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const u=x*y*k-1-h.get(S,n,r,l,e)===t*y*k+s*k+a?1:0;0!==u&&(o+=$.get(S,n,r,l,e)*u)}}}C.set(o,S,t,n,s,e)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},eC={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;ry([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=li(o.shape,l,u,1,c,h),p=n.data.get(o.dataId).values,f=Ua(d.outShape,o.dtype,pv(p,o.shape,o.dtype,d).values),g=d.strideHeight,m=d.strideWidth,b=d.dilationHeight,x=d.dilationWidth,y=d.effectiveFilterHeight,k=d.effectiveFilterWidth,w=k-1-d.padInfo.left,v=y-1-d.padInfo.top,I=Ua(o.shape,"float32"),C=n.data.get(r.dataId).values,$=Ua(r.shape,"float32",C);for(let S=0;S<d.batchSize;++S)for(let e=0;e<d.inChannels;++e)for(let t=0;t<d.inHeight;++t)for(let n=0;n<d.inWidth;++n){const s=t-v,r=n-w;let a=0;for(let t=0;t<y;t+=b){const n=(s+t)/g;if(!(n<0||n>=d.outHeight||Math.floor(n)!==n))for(let s=0;s<k;s+=x){const i=(r+s)/m;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const o=y*k-1-f.get(S,n,i,e)===t*k+s?1:0;0!==o&&(a+=$.get(S,n,i,e)*o)}}I.set(a,S,t,n,e)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},tC={kernelName:Dt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;ry(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=li(s.shape,r,a,[1,1],i),[h,d]=function(e,t,n,s,r){const a=dv(e,0,n,F(t),r,"max"),i=pv(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},nC={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=w(a,r.shape),l=f(yo(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=xy({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const d=mI({inputs:{a:h,b:c},backend:n});u.push(d);const p=tI({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},sC={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ry(r,"min");const o=w(a,r.shape);let l=o;const u=vo(l,r.shape.length);let c=r;null!=u&&(c=Dk({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Co(l.length,r.shape.length)),wo("min",l,c.shape.length);const[h,d]=yo(c.shape,l),p=f(d),g=L(f(h),c.dtype),m=n.data.get(c.dataId).values;for(let f=0;f<g.length;++f){const e=f*p;let t=m[e];for(let n=0;n<p;++n){const s=m[e+n];(Number.isNaN(s)||s<t)&&(t=s)}g[f]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const b=n.makeTensorInfo(h,c.dtype,g);if(i){const e=Ww({inputs:{x:b},backend:n,attrs:{shape:ko(h,o)}});return n.disposeIntermediateTensorInfo(b),e}return b}},rC={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;ry(r,"mirrorPad");const o=a.map((e,t)=>e[0]+r.shape[t]+e[1]),l=a.map(e=>e[0]),u=a.map((e,t)=>e[0]+r.shape[t]),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,d=r.shape.length,p=F(r.shape),g=f(o),m=o.length,b=F(o),x=I(r.dtype,g);for(let f=0;f<g;f++){let e=P(f,m,b);for(let n=0;n<m;n++)e[n]<l[n]?e[n]=2*l[n]-e[n]-c:e[n]>=u[n]&&(e[n]=2*(u[n]-1)-e[n]+c);e=e.map((e,t)=>e-l[t]);const t=B(e,d,p);x[f]=h[t]}return{dataId:n.write(x,o,r.dtype),shape:o,dtype:r.dtype}}},aC=uy((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),iC=ky(zt,aC),oC={kernelName:zt,backendName:"cpu",kernelFunc:iC};function lC(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=w([o],r.shape),u=qI({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=ko(u.shape,l),h=Ww({inputs:{x:u},backend:n,attrs:{shape:c}}),d=ww({inputs:{a:r,b:h},backend:n}),p=Wy({inputs:{x:d},backend:n}),f=tI({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),g=Ww({inputs:{x:f},backend:n,attrs:{shape:c}}),m=mI({inputs:{a:p,b:g},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),m}const uC={kernelName:An,backendName:"cpu",kernelFunc:lC},cC={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;ry(r,"multinomial");const l=o?r:lC({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,a],p=L(f(d),"int32");for(let f=0;f<u;++f){const e=f*c,t=new Float32Array(c-1);t[0]=h[e];for(let r=1;r<t.length;++r)t[r]=t[r-1]+h[e+r];const n=Zl.alea(i.toString()),s=f*a;for(let r=0;r<a;++r){const e=n();p[s+r]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){p[s+r]=n;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",p)}},hC=oc,dC={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;ry(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=hC(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},pC=lc,fC={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;ry(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=pC(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},gC=uc,mC={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;ry(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,d=i,p=o,f=l,g=u,{selectedIndices:m,selectedScores:b}=gC(c,h,d,p,f,g);return[n.makeTensorInfo([m.length],"int32",new Int32Array(m)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}},bC={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s;ry(r,"oneHot");const u=f(r.shape),c=new Float32Array(u*i);c.fill(l);const h=n.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<i&&(c[d*i+h[d]]=o);return n.makeTensorInfo([...r.shape,i],a,c)}};function xC(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=gy({inputs:{input:s},backend:n}),t=xC({inputs:{x:e},backend:n}),r=Sv({inputs:{input:s},backend:n}),a=xC({inputs:{x:r},backend:n}),i=cy({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return vI({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const yC={kernelName:es,backendName:"cpu",kernelFunc:xC},kC={kernelName:jt,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=gy({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Sv({inputs:{input:r},backend:s}),i=xC({inputs:{x:a},backend:s}),o=cy({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return vI({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function wC(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return pI({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{d(a,e.shape,"All tensors passed to stack must have matching shapes"),h(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],l=Tv({inputs:t.map(e=>{const t=pI({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t}),backend:n,attrs:{axis:r}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}const vC={kernelName:Xt,backendName:"cpu",kernelFunc:wC},IC={kernelName:qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;ry(r,"pad");const o=a.map((e,t)=>e[0]+r.shape[t]+e[1]),l=a.map(e=>e[0]),u=n.data.get(r.dataId).values,c=f(r.shape),h=r.shape.length,d=F(r.shape),p=f(o),g=o.length,m=F(o),b=I(r.dtype,p);0!==i&&b.fill(i);for(let f=0;f<c;f++)b[B(P(f,h,d).map((e,t)=>e+l[t]),g,m)]=u[f];return{dataId:n.write(b,o,r.dtype),shape:o,dtype:r.dtype}}},CC=uy((e,t)=>Math.pow(e,t)),$C=ky(Yt,CC),SC={kernelName:Yt,backendName:"cpu",kernelFunc:$C},NC={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map(e=>n.data.get(e.dataId).values),u=r.map(e=>e.shape),c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,[d,p,f]=zk(l,u,c,a.shape,a.dtype,h,i.shape),g=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),m=n.makeTensorInfo(f,a.dtype,p);return g.concat([m])}},TC={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=Bk(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}},EC={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,d=o.map(e=>n.data.get(e.dataId).values),p=o.map(e=>e.shape),[f,g]=Gk(u,r.shape,c,a.shape,a.dtype,h,i.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,g)}},RC={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=Hk(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},AC=Ay(rn,e=>1/e),FC={kernelName:rn,backendName:"cpu",kernelFunc:AC},DC={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;ry(r,"resizeBilinear");const l=F(r.shape),[u,c]=o,[h,d,p,g]=r.shape,m=n.data.get(r.dataId).values,b=new Float32Array(f([h,u,c,g])),x=[a&&u>1?d-1:d,a&&c>1?p-1:p],y=[a&&u>1?u-1:u,a&&c>1?c-1:c];let k=0;const w=x[0]/y[0],v=x[1]/y[1];for(let f=0;f<h;f++)for(let e=0;e<u;e++){let t;t=i?w*(e+.5)-.5:w*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(d-1,Math.ceil(t)),a=f*l[0]+n*l[1],o=f*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,u=Math.min(p-1,Math.ceil(t)),c=a+n*l[2],h=o+n*l[2],d=a+u*l[2],f=o+u*l[2];for(let e=0;e<g;e++){const t=m[c+e],n=m[h+e],a=t+(m[d+e]-t)*r,i=a+(n+(m[f+e]-n)*r-a)*s;b[k++]=i}}}return n.makeTensorInfo([h,u,c,g],"float32",b)}},_C={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;ry([a,r],"resizeBilinearGrad");const o=F(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),g=[i&&d>1?u-1:u,i&&p>1?c-1:c],m=[i&&d>1?d-1:d,i&&p>1?p-1:p],b=g[0]/m[0],x=g[1]/m[1],y=n.data.get(a.dataId).values;let k=0;for(let w=0;w<l;w++){const e=w*o[0];for(let t=0;t<d;t++){const n=t*b,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=e+s*o[1],i=e+r*o[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*x,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,p=a+n*o[2],g=a+s*o[2],m=i+n*o[2],b=i+s*o[2],w=d*u,v=d*r,I=l*u,C=l*r;for(let e=0;e<h;e++){const t=y[k++];f[p+e]+=t*w,f[g+e]+=t*v,f[m+e]+=t*I,f[b+e]+=t*C}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},OC={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;ry(r,"resizeNearestNeighbor");const l=F(r.shape),[u,c]=o,[h,d,p,f]=r.shape,g=n.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),b=[a&&u>1?d-1:d,a&&c>1?p-1:p],x=[a&&u>1?u-1:u,a&&c>1?c-1:c],y=b[0]/x[0],k=b[1]/x[1];let w=0;for(let v=0;v<h;v++){const e=v*l[0];for(let t=0;t<u;t++){const n=i?y*(t+.5):y*t;let s=Math.min(d-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=e+s*l[1];for(let e=0;e<c;e++){const t=i?k*(e+.5):k*e;let n=Math.min(p-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=g[s+e];m[w++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,m)}},LC={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;ry([a,r],"resizeNearestNeighborGrad");const o=F(r.shape),l=F(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,g=new Float32Array(u*c*h*d),m=n.data.get(a.dataId).values,b=[i&&p>1?c-1:c,i&&f>1?h-1:h],x=[i&&p>1?p-1:p,i&&f>1?f-1:f],y=b[0]/x[0],k=b[1]/x[1],w=1/y,v=1/k,I=2*Math.ceil(w)+2,C=2*Math.ceil(v)+2;for(let $=0;$<u;$++){const e=$*o[0];for(let t=0;t<c;t++){const n=e+t*o[1],s=Math.floor(t*w),r=Math.floor(s-I/2);for(let a=0;a<h;a++){const s=n+a*o[2],u=Math.floor(a*v),b=Math.floor(u-C/2);for(let n=0;n<d;n++){let o=0;for(let s=0;s<I;s++){const u=s+r;if(u<0||u>=p)continue;const d=e+u*l[1],g=u*y;if(t===Math.min(c-1,i?Math.round(g):Math.floor(g)))for(let e=0;e<C;e++){const t=e+b;if(t<0||t>=f)continue;const s=d+t*l[2],r=t*k;a===Math.min(h-1,i?Math.round(r):Math.floor(r))&&(o+=m[s+n])}}g[s+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,g)}},MC={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;ry(r,"reverse");const i=r.shape.length,o=w(a,r.shape);if(0===i)return py({inputs:{x:r},backend:n});const l=new mr(r.shape,r.dtype),u=n.bufferSync(r);for(let c=0;c<l.size;c++){const e=l.indexToLoc(c),t=e.slice();o.forEach(e=>t[e]=r.shape[e]-1-t[e]),l.set(u.get(...t),...e)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},zC={kernelName:ns,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=I(s.dtype,f(s.shape)),[u,c,h,d]=s.shape,[p,g]=ch(i,c,h),m=Math.sin(r),b=Math.cos(r),x=o.data.get(s.dataId).values;for(let f=0;f<u;f++){const e=f*h*c*d;for(let t=0;t<c;t++){const n=t*(h*d);for(let s=0;s<h;s++){const r=s*d;for(let i=0;i<d;i++){const o=[u,t,s,i],f=o[2],y=o[1];let k=(f-p)*b-(y-g)*m,w=(f-p)*m+(y-g)*b;k=Math.round(k+p),w=Math.round(w+g);let v=a;"number"!=typeof a&&(v=3===i?255:a[i]),k>=0&&k<h&&w>=0&&w<c&&(v=x[e+w*(h*d)+k*d+i]),l[e+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},BC=Ay(fn,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),PC={kernelName:fn,backendName:"cpu",kernelFunc:BC},WC={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=_u(0,r,i),d=qk(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,d.dtype,d.values)}};function UC(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function VC(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const GC={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=function(e,t,n,s,r,a){const i=C("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*r;for(let e=0;e<r;++e)i[l+e]="left"===a?UC(n,t[e+l]):VC(n,t[e+l])}return i}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}},HC={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;ry([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Dr(r.dtype,a.dtype),h=L(f(r.shape),c);let d=0;const p=0===i||i>1||1===r.shape.length?1:f(r.shape.slice(1));for(let f=0;f<o.length;f++)for(let e=0;e<p;e++)1===o[f]?h[d++]=l[f]:h[d++]=u[f];return n.makeTensorInfo(r.shape,c,h)}},jC=mh,KC=bh,XC=Ay(kn,e=>e>=0?KC*e:jC*(Math.exp(e)-1)),qC={kernelName:kn,backendName:"cpu",kernelFunc:XC},YC=Ay(Cn,e=>e<0?-1:e>0?1:0),ZC={kernelName:Cn,backendName:"cpu",kernelFunc:YC},JC=Ay(vn,e=>Math.sin(e)),QC={kernelName:vn,backendName:"cpu",kernelFunc:JC},e$=Ay(In,e=>Math.sinh(e)),t$={kernelName:In,backendName:"cpu",kernelFunc:e$},n$=Math.log(1.1920928955078125e-7)+2,s$=Ay(Sn,e=>{const t=e>-n$,n=e<n$,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r}),r$={kernelName:Sn,backendName:"cpu",kernelFunc:s$},a$={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;ry([r],"spaceToBatchND");const o=f(a),l=[[0,0]];l.push(...i);for(let f=1+a.length;f<r.shape.length;++f)l.push([0,0]);const u=IC.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=hh(u.shape,a,o,!1),h=dh(c.length,a.length,!1),d=ph(u.shape,a,o,!1),p=Ww({inputs:{x:u},backend:n,attrs:{shape:c}}),g=Dk({inputs:{x:p},backend:n,attrs:{perm:h}}),m=Ww({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(g),m}},i$={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,d,p,f,g]=nw(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},o$={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=sw(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},l$={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=rw(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},u$={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=rw(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},c$={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=_u(0,r,o),p=!1,f=n.bufferSync(r);let g;switch(a.dtype){case"bool":g=qk(f,n.bufferSync(a),o,d,c,u,l,h,Boolean(n.data.get(i.dataId).values[0]),p);break;case"float32":case"int32":g=qk(f,n.bufferSync(a),o,d,c,u,l,h,n.data.get(i.dataId).values[0],p);break;case"string":g=qk(f,n.bufferSync(a),o,d,c,u,l,h,ar(n.data.get(i.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,g.dtype,g.values)}},h$={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=w(i,r.shape)[0],l=Bh(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(e=>{const t=[...c];t[o]=e;const s=ew({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s})}},d$={kernelName:zn,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;ry(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let i=0;i<r.length;++i){const e=r[i];a[i]=e*e}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},p$=Ay(ts,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),f$={kernelName:ts,backendName:"cpu",kernelFunc:p$},g$={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=s;ry(r,"stridedSlice");const{finalShapeSparse:f,finalShape:g,isIdentity:m,sliceDim0:b,isSimpleSlice:x,begin:y,end:k,strides:w}=qc(r.shape,a,i,o,l,u,c,d,p);let v;if(m)v=Ww({inputs:{x:r},backend:n,attrs:{shape:g}});else if(b||x){h(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const e=Mc(y,k,w),t=ew({inputs:{x:r},backend:n,attrs:{begin:y,size:e}});v=Ww({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else{const e=pw(f,n.bufferSync(r),w,y);v=n.makeTensorInfo(g,e.dtype,e.values)}return v}},m$={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,g]=gw(d,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",g)]}},b$={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=bw(o,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},x$={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=xw(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},y$=Ay(Hn,e=>Math.tan(e)),k$={kernelName:Hn,backendName:"cpu",kernelFunc:y$},w$=Ay(jn,e=>Math.tanh(e));function v$(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return l(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return l(0,n,t-1)}(e,t);case"nearest":return function(e,t){return l(0,e,t-1)}(e,t);default:return e}}function I$(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function C$(e,t,n,s,r,a,i,o,l,u,c){return I$(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function $$(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),d=Math.floor(l),p=h+1,f=d+1;return(p-o)*((f-l)*I$(e,t,n,s,r,a,i,h,d,u,c)+(l-d)*I$(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*I$(e,t,n,s,r,a,i,p,d,u,c)+(l-d)*I$(e,t,n,s,r,a,i,p,f,u,c))}const S$=[Hw,ly,Kw,qw,$y,Yw,Zw,Jw,Qw,ev,nv,rv,iv,uv,hv,gv,mv,bv,xv,Gw,yv,kv,wv,Ey,vv,yy,Oy,Cv,hy,$v,Ev,Av,Fv,Dv,_v,Ov,Lv,zv,Pv,Wv,Uv,Vv,Gv,Hv,Kv,Xv,qv,Yv,Zv,Jv,Qv,eI,sI,Rw,rI,By,dI,Uy,fI,Hy,wI,II,CI,Xy,Zy,$I,SI,NI,TI,nk,ak,fy,EI,Nv,AI,DI,OI,Fw,lk,hk,LI,gk,zI,WI,VI,jI,KI,XI,YI,yk,ZI,JI,QI,eC,tC,nC,sC,vk,rC,oC,cC,Sk,Tk,dC,fC,mC,Ak,bC,kC,vC,IC,SC,Ow,Lk,NC,TC,EC,RC,my,bI,FC,Mw,Bw,Uw,DC,_C,OC,LC,MC,zC,PC,Xk,WC,GC,HC,qC,Jk,ZC,QC,t$,tw,uC,r$,a$,i$,o$,l$,u$,c$,h$,ow,d$,cw,dw,f$,g$,m$,b$,x$,vw,nI,k$,{kernelName:jn,backendName:"cpu",kernelFunc:w$},{kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:r,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:l,strides:u,outputSize:c}=_u(0,r,s.shape),h=n.bufferSync(r),d=n.bufferSync(a),p=n.bufferSync(s),f=qk(h,d,s.shape,c,l,o,i,u,p,!1);return n.makeTensorInfo(s.shape,f.dtype,f.values)}},{kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;ry(r,"tile");const i=Iw(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;ry(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=Sw(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,d,p]=r.shape,[g,m]=null!=u?u:[h,d],b=[c,g,m,p],x=F(r.shape),y=x[0],k=x[1],w=x[2],v=F(b),C=v[0],$=v[1],S=v[2],N=I(r.dtype,f(b));N.fill(l);const T=s.data.get(r.dataId).values,E=s.data.get(a.dataId).values;for(let f=0;f<c;++f){const e=1===a.shape[0]?E:E.subarray(8*f,8*f+8);for(let t=0;t<g;++t)for(let n=0;n<m;++n)for(let s=0;s<p;++s){let r;const a=e[6]*n+e[7]*t+1;if(0===a)continue;const u=(e[0]*n+e[1]*t+e[2])/a,c=(e[3]*n+e[4]*t+e[5])/a,p=v$(u,d,o),g=v$(c,h,o);switch(i){case"nearest":r=C$(T,h,d,y,k,w,f,g,p,s,l);break;case"bilinear":r=$$(T,h,d,y,k,w,f,g,p,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[f*C+t*$+n*S+s]=r}return s.makeTensorInfo(b,r.dtype,N)}return{dataId:s.write(N,b,r.dtype),shape:r.shape,dtype:r.dtype}}},_k,{kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;ry(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=Nw(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let p=0;p<i;p++)p!==a&&(l[u++]=r.shape[p]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(o);for(let p=0;p<d.length;p++){c[a]=p;const e=ew({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});d[p]=Ww({inputs:{x:e},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(e)}return d}},{kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;ry(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let d=0;d<u;++d){const e=pI({inputs:{input:c},backend:n,attrs:{dim:d+1}});c=e,l.push(e)}for(let d=0;d<i;++d){const e=tr(d,"int32"),t=n.makeTensorInfo([],"int32",e),s=zy({inputs:{a:t,b:c},backend:n}),a=xy({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),i=$k({inputs:{a:a,b:r},backend:n}),u=tI({inputs:{x:i},backend:n,attrs:{axis:0,keepDims:!1}});o.push(u),l.push(t),l.push(s),l.push(a),l.push(i),l.push(u)}const h=wC({inputs:o,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},yC];for(const Z_ of S$)ds(Z_);const N$={},T$={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function E$(e,t){if(!(e in N$)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(H().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;return n.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete N$[e]},!1),H().getBool("SOFTWARE_WEBGL_ENABLED")&&(T$.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",T$)||n.getContext("experimental-webgl",T$):n.getContext("webgl2",T$)}(e,t);if(null===n)return null;N$[e]=n}const n=N$[e];return null==n||n.isContextLost()?(delete N$[e],E$(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),N$[e])}var R$,A$,F$,D$,_$,O$;function L$(e,t){return[t,e]}function M$(e){const t=f(e);return b(Math.ceil(t/4))}function z$(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function B$(e,t){const n=e;let s,r,a,i,o,l,u,c,h,d;return 2===H().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function P$(e,t){const n=t();return H().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function W$(e){return!!(H().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function U$(e,t){return Y$(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}(A$=R$||(R$={}))[A$.DENSE=0]="DENSE",A$[A$.SHARED_BATCH=1]="SHARED_BATCH",(D$=F$||(F$={}))[D$.RENDER=0]="RENDER",D$[D$.UPLOAD=1]="UPLOAD",D$[D$.PIXELS=2]="PIXELS",D$[D$.DOWNLOAD=3]="DOWNLOAD",(O$=_$||(_$={}))[O$.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",O$[O$.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",O$[O$.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",O$[O$.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",O$[O$.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";const V$=/ERROR: [0-9]+:([0-9]+):/g;function G$(e,t){const n=V$.exec(t);if(null==n)return;const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map((e,t)=>x((t+1).toString(),a)+e);let o=0;for(let l=0;l<i.length;l++)o=Math.max(i[l].length,o);i.slice(0,s-1),i.slice(s-1,s),i.slice(s)}function H$(e,t){if(P$(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw new Error("Shader program validation failed.")}function j$(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(P$(e,()=>e.bindBuffer(e.ARRAY_BUFFER,s)),P$(e,()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i)),P$(e,()=>e.enableVertexAttribArray(o)),!0)}function K$(e,t,n){P$(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),P$(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function X$(e,t){P$(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),P$(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function q$(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Y$(e,t,n){const s=P$(e,()=>t());if(null==s)throw new Error(n);return s}function Z$(e,t=2){return f(e.slice(0,e.length-t))}function J$(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Q$(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Z$(e),...J$(e)]),t}function eS(e){return e%2==0}function tS(e,t){if(g(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(eS(n)&&eS(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&eS(e[0])&&eS(t[0])}let nS,sS;function rS(e,t){return null!=e.getExtension(t)}function aS(e){try{if(null!=E$(e))return!0}catch(q_){return!1}return!1}function iS(e){const t=B$(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function oS(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&h("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const lS=H();function uS(){let e,t,n,s,r,a,i,o,l,u;return 2===H().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o=H().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function cS(e,t,n="index"){const s=F(t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`).join("")}function hS(e,t,n="index"){const s=F(t);return s.map((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`).join("")}function dS(e){const t=F(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}lS.registerFlag("HAS_WEBGL",()=>lS.getNumber("WEBGL_VERSION")>0),lS.registerFlag("WEBGL_VERSION",()=>aS(2)?2:aS(1)?1:0),lS.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),lS.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===lS.get("WEBGL_VERSION")),lS.registerFlag("WEBGL_CPU_FORWARD",()=>!0),lS.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),lS.registerFlag("WEBGL_PACK",()=>lS.getBool("HAS_WEBGL")),lS.registerFlag("WEBGL_PACK_NORMALIZATION",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_CLIP",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_REDUCE",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_LAZILY_UNPACK",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_CONV_IM2COL",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>lS.getBool("WEBGL_PACK")),lS.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==nS){const t=E$(e);nS=t.getParameter(t.MAX_TEXTURE_SIZE)}return nS}(lS.getNumber("WEBGL_VERSION"))),lS.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==sS){const t=E$(e);sS=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sS)}(lS.getNumber("WEBGL_VERSION"))),lS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=lS.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=E$(e);return t=rS(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:rS(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),lS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>lS.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!jr()),lS.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=E$(e);if(1===e){if(!rS(t,"OES_texture_float"))return!1}else if(!rS(t,"EXT_color_buffer_float"))return!1;return iS(t)}(lS.getNumber("WEBGL_VERSION"))),lS.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!lS.getBool("WEBGL_FORCE_F16_TEXTURES")&&lS.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),lS.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function(e){if(0===e)return!1;const t=E$(e);if(1!==e){if(rS(t,"EXT_color_buffer_float"))return iS(t);const e="EXT_color_buffer_half_float";if(rS(t,e)){const n=t.getExtension(e);return function(e,t){const n=B$(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!rS(t,"OES_texture_float")&&!!rS(t,"WEBGL_color_buffer_float")&&iS(t)}(lS.getNumber("WEBGL_VERSION"))),lS.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=lS.getNumber("WEBGL_VERSION"))&&null!=E$(e).fenceSync;var e}),lS.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>lS.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),lS.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),lS.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>jr()?1:-1,e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),lS.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),lS.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),lS.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),lS.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),lS.registerFlag("WEBGL_EXP_CONV",()=>!1),lS.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>lS.getBool("IS_TEST")),lS.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),lS.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),lS.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),lS.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const pS="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:fS}=nd;function gS(e,t,n){const s=[];if(e.forEach(e=>{const t=f(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=$S(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});const r=s.join("\n"),a=e.map(e=>function(e,t,n=!1,s){let r="";r+=n?bS(e,s):mS(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;return a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=fS(e.shapeInfo.logicalShape,t.logicalShape),l=CS(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${h[e+u]} = 0;`).join("\n");let d="";d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${h[t+u]}`).join(", ");let p="return outputValue;";const g=1===f(e.shapeInfo.logicalShape),m=1===f(t.logicalShape);if(1!==a||g||m){if(g&&!m)p=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?p="return vec4(outputValue.x);":o.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&g(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=CS(l),c=fS(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${p[e+h]} = 0;`).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${p[t+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),i=t.texShape,o=uS(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${xS}\n    ${yS}\n    ${kS}\n  `}(o);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(g(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let u=2;u<e.length-1;u++)i*=e[e.length-u-1],o=`\n      int b${u} = index / ${i};\n      index -= b${u} * ${i};\n    `+o,l=`b${u}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return g(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${hS(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=cS(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${hS(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=cS(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=cS(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=cS(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=wS),[h,l,c,r,u,a,n.userCode].join("\n")}function mS(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=vS(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${IS(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=vS(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&g(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=v(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${mS(SS(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${NS(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${IS(e)}\n      }\n    `;const u=a[0],c=a[1],h=vS(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=v(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${mS(SS(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${NS(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${IS(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===i&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=vS(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=v(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${mS(SS(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${NS(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${IS(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const b=vS(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${b});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=v(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${mS(SS(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${NS(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${IS(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${vS(n)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=v(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${mS(SS(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${NS(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${IS(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${vS(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function bS(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${uS().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=uS();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=uS();if(null!=a&&g(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${bS(SS(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${NS(a,s)});\n        }\n      `}const o=uS();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=uS();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let d=h*Math.ceil(a[i-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<i-1;g++)p=`int b${g}, `+p,d*=a[i-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const xS="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",yS="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",kS="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",wS="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function vS(e){return`offset${e}`}function IS(e){const t=e.name,n=f(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function CS(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function $S(e,t,n){const{newShape:s,keptDims:r}=v(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!g(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function SS(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function NS(e,t){return t.map(t=>e[t]).join(", ")}function TS(e,t,n){const s=[],r=[];let a,i,o,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===H().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const r={name:h,uniform:e.getUniformLocation(n,h,c),offset:e.getUniformLocation(n,`offset${h}`,c)};t.enableShapeUniforms&&(r.shape=e.getUniformLocation(n,`${h}Shape`,c),r.texShape=e.getUniformLocation(n,`${h}TexShape`,c)),s.push(r)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),o=e.getUniformLocation(n,"outShapeStrides",c),i=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(e.getUniformLocation(n,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}}function ES(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!g(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!g(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}function RS(e){return H().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class AS{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=R$.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=uS();this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?hS(["r","c","d"],e):cS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class FS{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=R$.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=uS();this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?hS(["r","c","d"],e):cS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class DS{constructor(e){this.variableNames=["A"],this.outTexUsage=F$.DOWNLOAD;const t=uS();this.outputShape=e,this.userCode=`\n      ${pS}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class _S{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=F$.DOWNLOAD;const t=uS();this.outputShape=e,this.userCode=`\n      ${pS}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const OS={R:0,G:1,B:2,A:3};class LS{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=uS();this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let i=0;i<n.length;i++){const e=n[i];a+=`\n          if(offset == ${i}) {\n            result = values[${OS[e]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":dS(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class MS{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=uS();this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let t=0;t<=1;t++){const r=2*a+t;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${t};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":dS(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function zS(e,t,n,s,r,a){!function(e,t){const n=H().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return Y$(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return P$(e,()=>e.bindTexture(o,i)),P$(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),P$(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),P$(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),P$(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===H().getNumber("WEBGL_VERSION")?P$(e,()=>e.texImage2D(o,0,s,t,n,0,r,a,null)):P$(e,()=>e.texStorage2D(o,1,s,t,n)),P$(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:i,texShape:[n,t]}}function BS(e){return e.internalFormatFloat}function PS(e){return e.internalFormatHalfFloat}function WS(e){return e.downloadTextureFormat}function US(e){return e.internalFormatPackedFloat}function VS(e){return e.internalFormatPackedHalfFloat}class GS{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=H().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){N$[e]=t}(t,e)):this.gl=E$(t),e=this.gl,2===H().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>P$(t,()=>t.createVertexArray()),this.bindVertexArray=e=>P$(t,()=>t.bindVertexArray(e)),this.deleteVertexArray=e=>P$(t,()=>t.deleteVertexArray(e)),this.getVertexArray=()=>P$(t,()=>t.getParameter(t.VERTEX_ARRAY_BINDING))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>P$(e,()=>t.createVertexArrayOES()),this.bindVertexArray=n=>P$(e,()=>t.bindVertexArrayOES(n)),this.deleteVertexArray=n=>P$(e,()=>t.deleteVertexArrayOES(n)),this.getVertexArray=()=>P$(e,()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===H().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=U$(this.gl,e),rS(this.gl,t))this.textureHalfFloatExtension=U$(this.gl,t);else if(H().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),rS(this.gl,s))this.colorBufferHalfFloatExtension=U$(this.gl,s);else if(H().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",rS(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!rS(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=Y$(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return P$(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),P$(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=Y$(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return P$(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),P$(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return Y$(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=B$(this.gl,this.textureHalfFloatExtension)}get debug(){return H().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program,this.outputTexture;const e=this.gl;P$(e,()=>e.finish()),P$(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),P$(e,()=>e.deleteFramebuffer(this.framebuffer)),P$(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),P$(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),P$(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=L$(t,n);return zS(e,r,a,BS(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=L$(t,n);return zS(e,r,a,PS(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=L$(t,n);return zS(e,r,a,WS(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){P$(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?2===H().getNumber("WEBGL_VERSION")?P$(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data)):P$(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):2===H().getNumber("WEBGL_VERSION")?P$(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n)):P$(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),P$(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;P$(e,()=>e.bindTexture(e.TEXTURE_2D,t)),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===H().getNumber("WEBGL_VERSION")?P$(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i)):P$(e,()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i)),P$(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=z$(t,n);return zS(e,r,a,VS(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=z$(t,n);return zS(e,r,a,US(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(X$(this.gl,this.framebuffer),this.outputTexture=null),P$(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,s){const[r,a]=L$(t,n),i=new Uint8Array(t*n*4);return P$(e,()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i){const o=e,l=new Float32Array(function(e,t){const[n,s]=z$(e,t);return n*s*4}(a,i));return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,l),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n){const s=e.createBuffer();P$(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s));const r=16*t*n;return P$(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ)),P$(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),P$(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(H().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const s=new Float32Array(t*n*4);return P$(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s)),s}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=uS();return function(e,t){const n=Y$(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(P$(e,()=>e.shaderSource(n,t)),P$(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return Y$(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);P$(t,()=>t.attachShader(n,this.vertexShader)),P$(t,()=>t.attachShader(n,e)),function(e,t){if(P$(e,()=>e.linkProgram(t)),!H().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw new Error("Failed to link vertex and fragment shaders.")}(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&H$(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;P$(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function(e,t,n){P$(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),j$(e,t,"clipSpacePos",n,3,20,0)&&j$(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(P$(this.gl,()=>this.gl.deleteProgram(e)),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&H$(this.gl,this.program),P$(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Y$(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),P$(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){P$(e,()=>function(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)}(e,n),P$(e,()=>e.activeTexture(e.TEXTURE0+n)),P$(e,()=>e.bindTexture(e.TEXTURE_2D,t))}(e,t,s)),P$(e,()=>e.uniform1i(n,s))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=z$(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&H$(this.gl,this.program),q$(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&(this.getVertexArray(),this.debugValidate()),P$(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),P$(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=U$(this.gl,2===H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await y(()=>this.disposed||this.isQueryAvailable(e,H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in H().platform&&(n=H().platform.setTimeoutCustom.bind(H().platform)),y(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),K$(this.gl,e,this.framebuffer),this.debug&&q$(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(K$(this.gl,this.outputTexture,this.framebuffer),this.debug&&q$(this.gl)):X$(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;K$(s,e,this.framebuffer),this.debug&&q$(s),this.outputTexture=e,P$(s,()=>s.viewport(0,0,t,n)),P$(s,()=>s.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),P$(this.gl,()=>this.gl.scissor(e,t,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:HS,bincountImpl:jS,bincountReduceImpl:KS,bitwiseAndImpl:XS,castImpl:qS,ceilImpl:YS,concatImpl:ZS,equalImpl:JS,expImpl:QS,expm1Impl:eN,floorImpl:tN,gatherNdImpl:nN,gatherV2Impl:sN,greaterImpl:rN,greaterEqualImpl:aN,lessImpl:iN,lessEqualImpl:oN,linSpaceImpl:lN,logImpl:uN,maxImpl:cN,maximumImpl:hN,minimumImpl:dN,multiplyImpl:pN,negImpl:fN,notEqualImpl:gN,prodImpl:mN,raggedGatherImpl:bN,raggedRangeImpl:xN,raggedTensorToTensorImpl:yN,rangeImpl:kN,rsqrtImpl:wN,scatterImpl:vN,sigmoidImpl:IN,simpleAbsImpl:CN,sliceImpl:$N,sparseFillEmptyRowsImpl:SN,sparseReshapeImpl:NN,sparseSegmentReductionImpl:TN,sqrtImpl:EN,staticRegexReplaceImpl:RN,stridedSliceImpl:AN,stringNGramsImpl:FN,stringSplitImpl:DN,stringToHashBucketFastImpl:_N,subImpl:ON,tileImpl:LN,topKImpl:MN,transposeImpl:zN,uniqueImpl:BN}=Tw;function PN(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function WN(e,t){return 1===t?[e]:PN(e,t)}class UN{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=RS(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=WN("rc",this.rank),t=CS(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class VN{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length);let n="";for(let a=0;a<4;a++){let e="thisRC = rc;";a%2==1&&(e+="thisRC.z += 1;"),a>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${a>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${a}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${a>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map(e=>`${t}[${e}]`),r=new Array(n-1);r[n-2]=s[n-1];for(let a=n-3;a>=0;--a)r[a]=`(${r[a+1]} * ${s[a+1]})`;return r}(e.map((e,t)=>t),t);return s.map((t,r)=>`int ${e[r]} = ${n} / ${s[r]}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`).join("")}(["r","c","d"],"inputShape"):cS(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":dS(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class GN{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=jN(t,n),r=KN(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=HN(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}let i;return s===_$.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===_$.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===_$.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===_$.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===_$.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=jN(n,s),a=KN(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=HN(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=H().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){this.logEnabled&&(this.numFreeTextures,this.numUsedTextures,this._numBytesFree,this._numBytesAllocated)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function HN(e,t,n,s,r){const a=function(e,t){switch(e){case _$.PACKED_2X2_FLOAT32:return US(t);case _$.PACKED_2X2_FLOAT16:return VS(t);case _$.UNPACKED_FLOAT32:return BS(t);case _$.UNPACKED_FLOAT16:return PS(t);case _$.PACKED_4X1_UNSIGNED_BYTE:return WS(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=z$(e[0],e[1]);i=t*n}else{const[t,n]=L$(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function jN(e,t){if(e===F$.UPLOAD)return _$.PACKED_2X2_FLOAT32;if(e===F$.RENDER||null==e)return function(e){return H().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?_$.PACKED_2X2_FLOAT32:_$.UNPACKED_FLOAT32:e?_$.PACKED_2X2_FLOAT16:_$.UNPACKED_FLOAT16}(t);if(e===F$.DOWNLOAD||e===F$.PIXELS)return _$.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function KN(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class XN{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const qN="if (isnan(x)) return x;",YN="return abs(x);",ZN=qN+"\n  return (x < 0.0) ? 0.0 : x;\n",JN=qN+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",QN="return x;";class eT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class tT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length);const t=e.length,n=WN("rc",t),s=CS(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const nT=Pu,sT={},rT=H().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class aT extends a{nextDataId(){return aT.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!H().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof GS)t=e;else{const n=E$(H().getNumber("WEBGL_VERSION"),e);t=new GS(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=E$(H().getNumber("WEBGL_VERSION"));t=new GS(e),this.binaryCache=((n=H().getNumber("WEBGL_VERSION"))in sT||(sT[n]={}),sT[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new GN(this.gpgpu),this.numMBBeforeWarning=null==H().global.screen?1024:H().global.screen.height*H().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r(this,aa())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,r]},o.texShape=[s,r];const l=Q$(t),u=new LS(l,!1,a),c=this.runWebGLProgram(u,[i],n,[[s,r]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,n){if((H().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||H().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:F$.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if(H().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:F$.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new eT(i,QN):new XN(i,QN);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=sr()),c="complex64"===s?Ch(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=sr()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new eT(s,QN):new XN(s,QN);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(H().getBool("DEBUG")&&!H().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===H().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&H().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...M$(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Ch(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=f(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;P$(e,()=>e.deleteBuffer(c))}const h=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach(e=>e(h)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&aa().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new eT(r,QN):new XN(r,QN);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=aa().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>ar(e));return Ua(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ua(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!W$(n)){if(H().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=f(t);if(H().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...M$(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=H().getBool("WEBGL_PACK")&&!0===s,i=a?Q$(t):t,o=a?new _S(i):new DS(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=or(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),a=or(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:a[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:sr(),endMs:null}}endTimer(e){return H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=sr(),e)}async getQueryTime(e){if(H().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=rT){return H().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&f(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){is();const t=e.dataSync();return nT(e.shape,t)}packedUnaryOp(e,t,n){const s=new eT(e.shape,t),r=this.compileAndRun(s,[e],n);return aa().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=CN(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(H().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,YN,e.dtype);const t=new XN(e.shape,YN),n=this.compileAndRun(t,[e]);return aa().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&N(n[0])){const r=n.map(e=>rr(e));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return aa().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new tT(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new UN(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Z$(e.shape),...J$(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Z$(t),...J$(t)],a=new VN(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;null!=t&&h(f(r)<=t[0]*t[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const i=Q$(r);let o;o=s?new FS(i):new AS(i);const l=[null!=t?t:M$(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===R$.DENSE){const t=null!=a?a:M$(e.outputShape);o.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===f(i.shape))return o.values=I(i.dtype,0),i;const l=[],u=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&f(t.shape)<=H().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!tS(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach(t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=$S(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=F(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const d=t.shape.length,p=2===o.length&&g(t.shape,a),m=1===f(t.shape),b=ao(t.shape,n.shape),x=!e.packedInputs&&d===n.shape.length&&g(a,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${d}_${x}_${i?l:""}_${o.length}_${m}_${b}_${p}_${u}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}});const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${H().getNumber("WEBGL_VERSION")}`,a}(e,u,c),d=this.getAndSaveBinary(h,()=>function(e,t,n,s){const r=n.map((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}}),a=r.map(e=>e.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=gS(r,i,t),l=function(e,t){const n=Y$(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(P$(e,()=>e.shaderSource(n,t)),P$(e,()=>e.compileShader(n)),H().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw G$(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return H().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i},TS(e,t,u)))}(this.gpgpu,e,u,c)),p=null!=this.activeTimers;let m;p&&(m=this.startTimer()),H().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(ES(t.inShapeInfos,n),ES([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===H().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<n.length;++l){const s=n[l],{uniform:r,offset:a,shape:i,texShape:o}=t.variablesLocations[l];if(i){const{uniformShape:n}=$S(t.program.packedInputs,s.shape,s.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(i,new Int32Array(n));break;case 2:e.gl.uniform2iv(i,new Int32Array(n));break;case 3:e.gl.uniform3iv(i,new Int32Array(n));break;case 4:e.gl.uniform4iv(i,new Int32Array(n))}}if(o&&e.gl.uniform2i(o,s.texData.texShape[0],s.texData.texShape[1]),null!=r)if(s.isUniform)if(f(s.shape)<2)e.gl.uniform1f(r,s.uniformValues[0]);else{let t=s.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=s.texData.slice&&null!=a&&e.gl.uniform1i(a,s.texData.slice.flatOffset),e.setInputMatrixTexture(s.texData.texture.texture,r,l)}const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=F(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const n=t.program.customUniforms[l],s=t.customUniformLocations[l],a=r[l];if("float"===n.type)e.gl.uniform1fv(s,a);else if("vec2"===n.type)e.gl.uniform2fv(s,a);else if("vec3"===n.type)e.gl.uniform3fv(s,a);else if("vec4"===n.type)e.gl.uniform4fv(s,a);else if("int"===n.type)e.gl.uniform1iv(s,a);else if("ivec2"===n.type)e.gl.uniform2iv(s,a);else if("ivec3"===n.type)e.gl.uniform3iv(s,a);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,a)}}e.executeProgram()}(this.gpgpu,d,u,c,s),l.forEach(e=>this.disposeIntermediateTensorInfo(e)),p&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const b=H().getNumber("WEBGL_FLUSH_THRESHOLD");if(b>0){const e=sr();e-this.lastGlFlushTime>b&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!H().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(H().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=oa(()=>{if(!H().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=H().getBool("DEBUG");H().set("DEBUG",!1);const t=this.abs(To(1e-8)).dataSync()[0];if(H().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let c;l&&(c=sr());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=H().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=H().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&H().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map((t,n)=>n>=e.length-2?u(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=v(e);e=t.newShape}let r=f(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const i=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i)if(t){const t=Z$(e);let n=2,s=2;e.length&&([n,s]=J$(e)),r=t*(n/2)*(s/2),a=b(r).map(e=>2*e)}else a=b(r);return a}(n,o),t.texShape=h),null!=r){const e=Q$(n);let a,i=h[1],u=h[0];const d=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&d||([i,u]=z$(h[0],h[1])),a=o?new MS(e,d):new LS(e,d);const p=d?[u,i]:h,f=this.makeTensorInfo(p,s),g=this.texData.get(f.dataId);g.usage=d?F$.PIXELS:F$.UPLOAD,g.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,u,r);const m=[[u,i]],b=!0,x=this.runWebGLProgram(a,[f],s,m,b),y=this.texData.get(x.dataId);t.texShape=y.texShape,t.isPacked=y.isPacked,t.usage=y.usage,H().get("ENGINE_COMPILE_ONLY")?this.disposeData(x.dataId):(t.texture=y.texture,t.values=null,this.texData.delete(x.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=sr()-c)}else{const e=this.acquireTexture(h,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){return this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024&&((this.numBytesInGPU/1024/1024).toFixed(2),this.warnedAboutMemory=!0),this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*S(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(n){throw n}});e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await eh(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw G$(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}=TS(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:r,width:a,channels:i}=e,o=aa().backend;if(!o.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=o.writeTexture(s,t,n,r,a,i);return aa().makeTensorFromDataId(l,t,n,o)}}aT.nextDataId=0,Kr()&&ha("webgl",()=>new aT,2);const iT="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class oT{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=oo(t,n),this.enableShapeUniforms=RS(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const lT="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class uT{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=oo(t,n);const r=this.outputShape.length;this.enableShapeUniforms=RS(r);let a="";if(s)if(0===r||1===f(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${CS(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=WN("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function cT(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const hT={kernelName:ct,backendName:"webgl",kernelFunc:cT};function dT(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=cT({inputs:{x:s},backend:n}),l=cT({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const pT={kernelName:ve,backendName:"webgl",kernelFunc:dT},fT="return (a < 0.) ? b * a : a;",gT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",mT={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",tr(a,"float32")),o=H().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new uT(gT,r.shape,i.shape):new oT(fT,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},bT="return (a < 0.) ? b * a : a;",xT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",yT={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=H().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new uT(xT,s.shape,r.shape):new oT(bT,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}},kT="if (isnan(x)) return x;";function wT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=H().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new eT(i.shape,t):new XN(i.shape,e),o.runWebGLProgram(u,[i],l)}}function vT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new oT(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Dr(n.dtype,s.dtype))}),a=dT({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Dr(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?ed(e):e,s="string"===l.dtype?ed(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let d;return d=H().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new uT(t,l.shape,u.shape,n):new oT(e,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function IT(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":ZN;if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":JN;if("prelu"===e)return t?xT:bT;if("leakyrelu"===e)return t?gT:fT;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class CT{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=RS(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let g="",m="";i&&(g=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const b=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let x="rc.x",y="rc.x";e[0]<t[0]?x=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(y=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${g}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${x};\n        int batchB = ${y};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${b}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class $T{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=oo(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ST="return a * b;";function NT(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Dr(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new $T("return areal * breal - aimag * bimag;",s.shape,r.shape),i=new $T("return areal * bimag + aimag * breal;",s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=dT({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=pN(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=H().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new uT(ST,s.shape,r.shape):new oT(ST,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const TT={kernelName:Pt,backendName:"webgl",kernelFunc:NT};function ET(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=f(r.shape),l=k(a,o),u=f(l);h(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(r.dataId);return!c.isPacked||tS(r.shape,l)||null!==c.texture&&tS(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[Z$(e.shape),...J$(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[Z$(t),...J$(t)],i=new VN(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const RT={kernelName:on,backendName:"webgl",kernelFunc:ET};class AT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${m(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class FT{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function DT(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=uh(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new AT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new AT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new FT({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class _T{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const s=CS(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<e.length;r++)s[e[r]]=n[r];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class OT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let u=0;u<n.length;u++)n[u]=e[t[u]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=CS(this.rank),r=PN("rc",this.rank),a=new Array(this.rank);for(let u=0;u<t.length;u++)a[t[u]]=r[u];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function LT(e,t,n){const s=H().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new OT(e.shape,t):new _T(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function MT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=w(r,e.shape);let o=i;const l=vo(o,a),u=null!=l;let c=e;u&&(c=LT(e,l,s),o=Co(o.length,a)),wo("sum",o,a);const[h,d]=yo(c.shape,o);let p=h;n&&(p=ko(h,i));const g=f(d),m=ET({inputs:{x:c},attrs:{shape:[f(e.shape)/g,g]},backend:s}),b=DT(m,_r(e.dtype),"sum",s),x=ET({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),x}(r,a,i,n)}const zT={kernelName:Tn,backendName:"webgl",kernelFunc:MT};function BT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let c=0;c<l.length;c++)l[c]=r.shape[a[c]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=zN(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=LT(r,a,i);return u}const PT={kernelName:Yn,backendName:"webgl",kernelFunc:BT};function WT({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,d=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],g=n?e.shape[u-1]:e.shape[u-2],m=s?t.shape[c-2]:t.shape[c-1],b=e.shape.slice(0,-2),x=t.shape.slice(0,-2),y=f(b),k=f(x),w=oo(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([g,m]);h(d===p,()=>`Error in matMul: inner shapes (${d}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`);const v=n?[y,d,g]:[y,g,d],I=s?[k,m,p]:[k,p,m],C=ET({inputs:{x:e},backend:r,attrs:{shape:v}}),$=ET({inputs:{x:t},backend:r,attrs:{shape:I}}),S=[C,$],N=Math.max(y,k),T=n?C.shape[1]:C.shape[2],E=null!=a,R=null!=i,A="leakyrelu"===l,F=null!=l?IT(l,!0):null;let D;if((1===g||1===m)&&T>1e3&&!1===(E||R||A||null!=F)){let e=C,t=$;n&&(e=BT({inputs:{x:C},backend:r,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=BT({inputs:{x:$},backend:r,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===m;let i=e;1!==m&&(i=ET({inputs:{x:e},backend:r,attrs:{shape:[N,T,1]}}),S.push(i));const o=1===m?2:1;let l=t;a&&(l=ET({inputs:{x:t},backend:r,attrs:{shape:[N,1,T]}}),S.push(l));const u=NT({inputs:{a:i,b:l},backend:r});D=MT({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const l=Dr(e.dtype,t.dtype),u=new CT(v,I,[N,g,m],n,s,E,F,R,A),c=[C,$];if(null!=a&&c.push(a),R&&c.push(i),A){const e=r.makeTensorInfo([],"float32",tr(o,"float32"));c.push(e),S.push(e)}D=r.runWebGLProgram(u,c,l)}const _=ET({inputs:{x:D},backend:r,attrs:{shape:w}});S.push(D);for(const h of S)r.disposeIntermediateTensorInfo(h);return _}const UT={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return WT({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},VT="return abs(x);",GT={kernelName:Y,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=CN(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=H().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new eT(s.shape,VT):new XN(s.shape,VT),n.runWebGLProgram(r,[s],s.dtype)}},HT=wT({opSnippet:qN+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),jT={kernelName:Z,backendName:"webgl",kernelFunc:HT},KT=wT({opSnippet:qN+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),XT={kernelName:J,backendName:"webgl",kernelFunc:KT},qT="return a + b;",YT=vT({opSnippet:qT,packedOpSnippet:qT,supportsComplex:!0,cpuKernelImpl:HS}),ZT={kernelName:Q,backendName:"webgl",kernelFunc:YT};class JT{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class QT{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const s=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const eE={kernelName:ee,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return cT({inputs:{x:r[0]},backend:s});if(r.length>H().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map(e=>e.dtype).reduce((e,t)=>Dr(e,t)),i=r.map(e=>e.shape),o=H().getBool("WEBGL_PACK")?new QT(r[0].shape,i):new JT(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},tE={kernelName:te,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=vo(u,o);let h=r;null!=c&&(h=BT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Co(u.length,o)),wo("all",u,o);const[d,p]=yo(h.shape,u),g=ET({inputs:{x:h},backend:n,attrs:{shape:[-1,f(p)]}}),m=DT(g,g.dtype,"all",n);let b;return b=ET(i?{inputs:{x:m},backend:n,attrs:{shape:ko(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),b}},nE={kernelName:ne,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=vo(u,o);let h=r;null!=c&&(h=BT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Co(u.length,o)),wo("any",u,o);const[d,p]=yo(h.shape,u),g=ET({inputs:{x:h},backend:n,attrs:{shape:[-1,f(p)]}}),m=DT(g,g.dtype,"any",n);let b;return b=ET(i?{inputs:{x:m},backend:n,attrs:{shape:ko(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),b}};class sE{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class rE{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,h(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=CS(o),u=WN("coords",o);let c,d;if(1===a){d=o+1;const e=CS(d);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else d=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(e=>"int "+e),m=WN("sourceLocR",d-1).concat("inIdx.r"),b=WN("sourceLocG",d-1).concat("inIdx.g"),x=WN("sourceLocB",d-1).concat("inIdx.b"),y=WN("sourceLocA",d-1).concat("inIdx.a"),k="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${b.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,I=s?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${k}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function aE(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=uh(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new sE(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=aE(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function iE(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=uh(r[r.length-1]),i=new rE(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=iE(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function oE(e,t,n,s){const r=[n];if(wo("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!H().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=yo(i.shape,r),u=f(l),c=ET({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=aE(e,c,s);n.push(h);const d=ET({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),d}return iE(e,t,s)}const lE={kernelName:se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=w(a,r.shape);const o=vo(i,r.shape.length);let l=r;const u=[];null!=o&&(l=BT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Co(i.length,l.shape.length)),wo("argMax",[i[0]],l.shape.length);const c=oE(n,l,i[0],"max");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},uE={kernelName:re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=w(a,r.shape);const o=vo(i,r.shape.length);let l=r;const u=[];null!=o&&(l=BT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Co(i.length,l.shape.length)),wo("argMin",[i[0]],l.shape.length);const c=oE(n,l,i[0],"min");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},cE=wT({opSnippet:qN+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),hE={kernelName:ae,backendName:"webgl",kernelFunc:cE},dE=wT({opSnippet:qN+"return log(x + sqrt(x * x + 1.0));"}),pE={kernelName:ie,backendName:"webgl",kernelFunc:dE},fE=wT({opSnippet:qN+"\n  return atan(x);\n"}),gE={kernelName:oe,backendName:"webgl",kernelFunc:fE},mE=vT({opSnippet:iT+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+lT+"\n  return result;\n"}),bE={kernelName:ue,backendName:"webgl",kernelFunc:mE},xE=wT({opSnippet:qN+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),yE={kernelName:le,backendName:"webgl",kernelFunc:xE};class kE{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,g=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,m=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let b="0.0";if(f||(b="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?g:m:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / max(count, 1.0)");const y=4*Math.floor(a/4),k=a%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${x});\n      }\n    `}}class wE{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,g=e.padInfo.front,m=e.padInfo.top,b=e.padInfo.left;this.outputShape=e.outShape;const x="avg"===t;let y="0.0";if(x||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${g}, ${m}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let k=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(k="avgValue / max(count, 1.0)");const w=4*Math.floor(a/4),v=a%4,I=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${g}, ${m}, ${b});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n        }\n        setOutput(${k});\n      }\n    `}}const vE={kernelName:ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;oS(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(xi(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=li(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))return cT({inputs:{x:r},backend:n});const c=new kE(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},IE={kernelName:de,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=ui(r.shape,a,i,[1,1,1],o,l,u),h=new wE(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class CE{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $E{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,g=d-1-e.padInfo.left,m=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${g});\n      const float avgMultiplier = float(${m});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const SE={kernelName:pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=ui(i.shape,o,l,[1,1,1],u,c),d=new $E(h);return n.runWebGLProgram(d,[r],i.dtype)}},NE={kernelName:he,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;oS([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=li(i.shape,o,l,1,u),h=new CE(c);return n.runWebGLProgram(h,[r],i.dtype)}},TE={kernelName:fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return WT({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class EE{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],oo(e,t),oo(e,n);let i="0.0";null!=s&&(oo(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(oo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class RE{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],oo(e,t),oo(e,n);let i="vec4(0.0)";null!=s&&(oo(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(oo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const AE={kernelName:at,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;h(r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),h(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),h(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let d=null;null!=o&&(d=o.shape,u.push(o));const p=H().getBool("WEBGL_PACK_NORMALIZATION")?new RE(s.shape,r.shape,a.shape,c,d,l):new EE(s.shape,r.shape,a.shape,c,d,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class FE{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=CS(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return DE.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${DE[t]} = start[${t}] + coords.${DE[t]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const DE=["x","y","z","w","u","v"];class _E{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=CS(this.rank),n=WN("coords",this.rank),s=WN("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function OE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Xc(r,a,i);if(Lc(r,o,l),0===f(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=$N(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=jc(r.shape,o,l);if(u||!c){const e=H().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _E(l):new FE(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Kc(t,F(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const LE={kernelName:wn,backendName:"webgl",kernelFunc:OE},ME={kernelName:ge,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;h(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const o=a.reduce((e,t)=>e*t),l=hh(r.shape,a,o),u=dh(l.length,a.length),c=ph(r.shape,a,o),d=fh(i,a.length),p=gh(c,i,a.length),f=[],g=ET({inputs:{x:r},backend:n,attrs:{shape:l}}),m=BT({inputs:{x:g},backend:n,attrs:{perm:u}}),b=ET({inputs:{x:m},backend:n,attrs:{shape:c}}),x=OE({inputs:{x:b},backend:n,attrs:{begin:d,size:p}});return f.push(g),f.push(m),f.push(b),f.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},zE={kernelName:me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=jS(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},BE={kernelName:be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=H().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=H().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([s,r])||1===i){const e=n.texData.get(s.dataId).values,t=n.texData.get(r.dataId).values,[a,i]=XS(s.shape,r.shape,e,t,s.dtype),o=n.makeTensorInfo(i,s.dtype);return n.texData.get(o.dataId).values=a,o}let o;return o=a?new uT("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new oT("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),n.runWebGLProgram(o,[s,r],s.dtype)}},PE={kernelName:xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=oo(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},WE=vT({opSnippet:"return float(a != b);",cpuKernelImpl:gN,dtype:"bool"}),UE={kernelName:Ut,backendName:"webgl",kernelFunc:WE};function VE(e){const{inputs:t,backend:n}=e,{input:s}=t;return cT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const GE={kernelName:sn,backendName:"webgl",kernelFunc:VE},HE={kernelName:ye,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return cT({inputs:{x:a},backend:s});const t=gl(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=dT({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=VE({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!$(a.dtype,i)){const e=cT({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=qS(e,a.shape,a.dtype,i);return s.makeTensorInfo(t,n,r)}if("int32"===i)return function(e,t){const n=new XN(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",I("bool",1)),t=WE({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},jE="return ceil(x);",KE=wT({opSnippet:jE,packedOpSnippet:jE,cpuKernelImpl:YS}),XE={kernelName:ke,backendName:"webgl",kernelFunc:KE};class qE{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class YE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const ZE={kernelName:we,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=H().getBool("WEBGL_PACK_CLIP")?new YE(r.shape):new qE(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class JE{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function QE(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const eR={kernelName:Ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new JE(s.shape),i=[QE(s,r.complexTensorInfos.real),QE(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class tR{constructor(e){this.outputShape=[],this.outputShape=nh(e,1),this.variableNames=e.map((e,t)=>`T${t}`);const t=new Array(e.length-1);t[0]=e[0][1];for(let a=1;a<t.length;a++)t[a]=t[a-1]+e[a][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<t.length;a++){const e=t[a-1];n.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${e}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class nR{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=nh(e,t);const n=this.outputShape,s=n.length,r=CS(s),a=WN("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map((e,t)=>`T${t}`);const o=new Array(e.length-1);o[0]=e[0][t];for(let f=1;f<o.length;f++)o[f]=o[f-1]+e[f][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let f=1;f<o.length;f++){const e=o[f-1];h+=`\n        if (${l} < ${o[f]}  && ${l} >= ${o[f-1]}) {\n          return getChannel(\n            getT${f}(${sR(i,l,e)}),\n            vec2(${sR(u,l,e)}));\n        }`}const d=o.length,p=o[o.length-1];h+=`\n        return getChannel(\n          getT${d}(${sR(i,l,p)}),\n          vec2(${sR(u,l,p)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function sR(e,t,n){const s=e.indexOf(t);return e.map((e,t)=>t===s?`${e} - ${n}`:e).join()}function rR(e){const{inputs:t,backend:n}=e,{input:s}=t;return cT({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const aR={kernelName:dt,backendName:"webgl",kernelFunc:rR};function iR(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map(e=>VE({inputs:{input:e},backend:n})),r=e.map(e=>rR({inputs:{input:e},backend:n})),a=iR(s,t,n),i=iR(r,t,n),o=dT({inputs:{real:a,imag:i},backend:n});return s.forEach(e=>n.disposeIntermediateTensorInfo(e)),r.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map(e=>{const s=f(e.shape.slice(t));return ET({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})}),a=r.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),i=nh(r.map(e=>e.shape),1),o=1===r[0].shape[0],l=ZS(a,i,s,o),u=nh(e.map(e=>e.shape),t),c=n.makeTensorInfo(u,s,l);return r.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}const a=e.filter(e=>f(e.shape)>0),i=H().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=i?new XN(e[0].shape,QN):new eT(e[0].shape,QN);return n.runWebGLProgram(t,e,s)}const o=H().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>o){const e=[];for(let r=0;r<a.length;r+=o){const s=a.slice(r,r+o);e.push(iR(s,t,n))}const s=iR(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(i){const e=new nR(a.map(e=>e.shape),t);return n.runWebGLProgram(e,a,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=nh(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>ET({inputs:{x:e},attrs:{shape:[-1,f(e.shape.slice(t))]},backend:n})),outShape:s}}(a,t,n),c=new tR(l.map(e=>e.shape)),h=n.runWebGLProgram(c,l,s);l.forEach(e=>n.disposeIntermediateTensorInfo(e));const d=ET({inputs:{x:h},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(h),d}function oR(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=w(r,t[0].shape)[0];th(t.map(e=>e.shape),a);const i=nh(t.map(e=>e.shape),a);if(0===f(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter(e=>f(e.shape)>0);return 1===o.length?cT({inputs:{x:o[0]},backend:n}):iR(o,a,n)}const lR={kernelName:Ce,backendName:"webgl",kernelFunc:oR};class uR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,g="channelsLast"===e.dataFormat,m=g?1:2,b=g?2:3,x=g?3:1;let y="",k="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,k="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${b}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${g}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${g}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${k}\n        setOutput(result);\n      }\n    `}}class cR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=RS(this.outputShape.length);const a=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,c=e.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let u=0;u<c;u++)d+=`\n           vec4 xTexelC${2*u};\n           int xTexelC${2*u}Ready;\n           vec4 xTexelC${2*u+1};\n           int xTexelC${2*u+1}Ready;\n           vec4 xC${u};`;d+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let u=0;u<c;u++)d+=`\n           xTexelC${2*u} = vec4(0.0);\n           xTexelC${2*u}Ready = 0;\n           xTexelC${2*u+1} = vec4(0.0);\n           xTexelC${2*u+1}Ready = 0;\n           xC${u} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const t=2*m;if(d+=`\n           xC = xCCorner + ${t*o};\n           `,1===i){if(t<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n               `,d+=1===o&&t>0?`\n                 xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                   } else {\n                     xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xC${t} = xTexelC${t};\n                 `,t+1<c)){const e=a%2==0?u(o):o;o%2==0&&a%2==1||o%2!=0&&a%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                     xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${t+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${t+1}Ready = 1;\n                   }\n                   `,d+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                     } else {\n                      xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                     }\n                     `:`\n                     xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                     `):d+=1===e?`\n                     xC${t+1} = xTexelC${t};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                       xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${t+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${t+1}Ready = 1;\n                     }\n\n                     xC${t+1} = xTexelC${t+1};\n                     `}}else t<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n               `,t+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                   xTexelC${t} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${t}.zw = vec2(0.0);\n                   }\n                   xTexelC${t}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                   xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${t+1}.zw = vec2(0.);\n                   }\n                   xTexelC${t+1}Ready = 1;\n                 }\n\n                 xC${t} = vec4(\n                   xTexelC${t}.xy, xTexelC${t+1}.xy);\n               `,t+1<c&&(d+=`\n                   xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                 `)));t<c&&(d+=`\n             wTexel = getW(r, ${t}, d1, d2);\n             dotProd += xC${t}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${t}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,t+1<c&&(d+=`\n               wTexel = getW(r, ${t+1}, d1, d2);\n               dotProd += xC${t+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${t+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,f="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class dR{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=RS(this.outputShape.length);const{dataFormat:n}=t,s=uS(),r="channelsLast"===n,a=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let u=0;u<=1;u++)for(let e=0;e<=1;e++)l+=`\n          blockIndex = rc.z + ${e};\n          pos = rc.y + ${u};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*u+e}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*u+e}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function pR(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function fR({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,d=l[0]*l[1]*l[2],p=n.outChannels,f="channelsLast"===n.dataFormat,m=!1;let b;const x=[];if(null!=a){const e=pR(a.shape,f);null!=e&&(a=ET({inputs:{x:a},backend:s,attrs:{shape:e}}),x.push(a))}if(null!=r){const e=pR(r.shape,f);null!=e&&(r=ET({inputs:{x:r},backend:s,attrs:{shape:e}}),x.push(r))}if((1!==d&&1!==p||!(c>1e3))&&u.isPacked&&f&&null!=u.texture&&l[2]%2!=0&&g(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),d={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,h(tS(u.shape,d.shape),()=>`packed reshape ${u.shape} to ${d.shape} isn't free`);const f=ET({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});x.push(f);const g=WT({a:d,b:f,backend:s,transposeA:!1,transposeB:m,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),y=s.texData.get(g.dataId);h(y.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=p,y.shape=n.outShape,b=cT({inputs:{x:g},backend:s}),b.shape=n.outShape,x.push(g)}else{const l=n.outHeight*n.outWidth,u=ET({inputs:{x:e},backend:s,attrs:{shape:f?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=ET({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=WT({a:f?u:c,b:f?c:u,transposeA:!f,transposeB:m,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});b=ET({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),x.push(u),x.push(c),x.push(h)}for(const h of x)s.disposeIntermediateTensorInfo(h);return b}function gR({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=n,g="channelsLast"===p,m=l*u*c,b=d*h,x=[n.batchSize,m,b],y=[];if(null!=a){const e=pR(a.shape,g);null!=e&&(a=ET({inputs:{x:a},backend:s,attrs:{shape:e}}),y.push(a))}if(null!=r){const e=pR(r.shape,g);null!=e&&(r=ET({inputs:{x:r},backend:s,attrs:{shape:e}}),y.push(r))}const k=ET({inputs:{x:t},backend:s,attrs:{shape:[1,m,f(t.shape)/m]}});y.push(k);const w=new dR(x,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],I=s.runWebGLProgram(w,[e],"float32",v),C=ET({inputs:{x:I},backend:s,attrs:{shape:x}});y.push(I),y.push(C);const $=null!=r,S=null!=a,N="leakyrelu"===o,T=o?IT(o,!0):null,E=new CT(g?C.shape:k.shape,g?k.shape:C.shape,g?[n.batchSize,b,n.outChannels]:[n.batchSize,n.outChannels,b],!0,!1,$,T,S,N),R=g?[C,k]:[k,C];if(r&&R.push(r),S&&R.push(a),N){const e=s.makeTensorInfo([],"float32",tr(i,"float32"));R.push(e),y.push(e)}const A=s.runWebGLProgram(E,R,"float32"),F=ET({inputs:{x:A},backend:s,attrs:{shape:n.outShape}});y.push(A);for(const f of y)s.disposeIntermediateTensorInfo(f);return F}const mR={kernelName:$e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=ki(l),d=ci(r.shape,a.shape,i,u,o,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&H().getBool("WEBGL_EXP_CONV")){const e=new hR(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[r,a],"float32",t)}else if(H().getBool("WEBGL_CONV_IM2COL"))p=gR({x:r,filter:a,convInfo:d,backend:n});else{const e=new uR(d);p=n.runWebGLProgram(e,[r,a],"float32")}else p=fR({x:r,filter:a,convInfo:d,backend:n});const f=ET({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class bR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const wR={kernelName:Se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=ki(l),d=ci(r.shape,c,i,1,o,u,!1,h),p=new bR(d);return n.runWebGLProgram(p,[r,a],"float32")}};class vR{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=RS(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const IR={kernelName:Ne,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=ki(u),d=ci(i,a.shape,o,1,l,c,!1,h);if(H().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const e=[[d.strideHeight,d.strideWidth]],t=new vR(d);return n.runWebGLProgram(t,[r,a],"float32",e)}{const e=new xR(d);return n.runWebGLProgram(e,[r,a],"float32")}}},CR={kernelName:Te,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=hi(r.shape,a.shape,i,l,o),c=new cR(u);return n.runWebGLProgram(c,[r,a],"float32")}},$R={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=hi(r.shape,l,i,1,o),c=new yR(u);return n.runWebGLProgram(c,[r,a],"float32")}},SR={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=hi(l,a.shape,o,1,i),c=new kR(u);return n.runWebGLProgram(c,[r,a],"float32")}},NR=wT({opSnippet:kT+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${lT}\n  return result;\n`}),TR={kernelName:Ae,backendName:"webgl",kernelFunc:NR},ER=wT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),RR={kernelName:Fe,backendName:"webgl",kernelFunc:ER};class AR{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[i-1+".0",o-1+".0"],[g,m,b]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[x,y,k]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${m};\n        float width_scale = ${y};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${k};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const FR={kernelName:Oe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new AR(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};var DR,_R;(_R=DR||(DR={})).Prod="*",_R.Sum="+";class OR{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===DR.Prod?"1.0":"0.0",i=n?a:`getX(${LR(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${CS(r)} coords = getOutputCoords();\n        int end = ${MR(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${MR(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${LR(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function LR(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function MR(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function zR(e,t,n,s,r,a){const i=t.shape.length,o=vo([s],i);let l=t;null!=o&&(l=BT({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=Co(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=cT({inputs:{x:l},backend:n});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const t=new OR(e,l.shape,!1,a),s=[[d]],r=h;h=n.runWebGLProgram(t,[h],h.dtype,s),n.disposeIntermediateTensorInfo(r)}if(r){const t=new OR(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=BT({inputs:{x:h},backend:n,attrs:{perm:Io(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const BR={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return zR(DR.Prod,r,n,a,i,o)}},PR={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return zR(DR.Sum,r,n,a,i,o)}},WR={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=jS(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=KS(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class UR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const VR={kernelName:Me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new UR("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class GR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=RS(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class HR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=RS(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let u=0;u<h;u++)p+=`\n          vec4 xTexelC${2*u};\n          int xTexelC${2*u}Ready;\n          vec4 xTexelC${2*u+1};\n          int xTexelC${2*u+1}Ready;\n          vec4 xC${u};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let u=0;u<h;u++)p+=`\n          xTexelC${2*u} = vec4(0.0);\n          xTexelC${2*u}Ready = 0;\n          xTexelC${2*u+1} = vec4(0.0);\n          xTexelC${2*u+1}Ready = 0;\n          xC${u} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let b=0;b<(d+1)/2;b++){const e=2*b;if(p+=`\n          xC = xCCorner + ${e*l};\n          `,1===o){if(e<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n              `,p+=1===l&&e>0?`\n                xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                  } else {\n                    xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xC${e} = xTexelC${e};\n                `,e+1<h)){const t=i%2==0?u(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                    xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${e+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${e+1}Ready = 1;\n                  }\n                  `,p+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${e+1} = vec4(previous.zw, xTexelC${e+1}.xy);\n                    } else {\n                     xC${e+1} = vec4(0.0, 0.0, xTexelC${e+1}.xy);\n                    }\n                    `:`\n                    xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                    `):p+=1===t?`\n                    xC${e+1} = xTexelC${e};\n                    `:`\n                    xCOffset = xC + ${t};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                      xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${e+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${e+1}Ready = 1;\n                    }\n\n                    xC${e+1} = xTexelC${e+1};\n                    `}}else e<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n              `,e+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(\n                  xTexelC${e}.xy, xTexelC${e+1}.xy);\n              `,e+1<h&&(p+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                `)));e<h&&(p+=`\n            wTexel = getW(r, ${e}, d1, q);\n            dotProd += xC${e} * vec4(wTexel.xz, wTexel.xz);\n          `,e+1<h&&(p+=`\n              wTexel = getW(r, ${e+1}, d1, q);\n              dotProd += xC${e+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,g="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const jR={kernelName:ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),h(xi(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);const d=ci(r.shape,a.shape,i,c,o,u,!0);let p;p=H().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels===1?new HR(d):new GR(d);const f=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return n.runWebGLProgram(p,[r,a],"float32",f)}};class KR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const qR={kernelName:Be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=ci(r.shape,c,i,o,l,u,!0),d=new KR(h);return n.runWebGLProgram(d,[r,a],"float32")}},YR={kernelName:Pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=ci(c,a.shape,i,o,l,u,!0),d=new XR(h);return n.runWebGLProgram(d,[r,a],"float32")}};class ZR{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const JR={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=f(s.shape),i=ET({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new ZR(a),l=n.runWebGLProgram(o,[i],i.dtype),u=ET({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class QR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const eA={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=oi(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new QR(u);c=n.runWebGLProgram(h,[r,a],"float32");const d=ET({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},tA={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Dh(r,a.length);Oh(i.length,l,a);const{path:u,steps:c}=Lh(o,l),h=c.length;let d=null,p=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:s}=_h(p,l[e]);let r;Mh(t)?r=a[e]:(r=BT({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);g(r.shape,i)||(r=ET({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===d?d=r:(d=NT({inputs:{a:r,b:d},backend:n}),f.push(d))}m<h-1&&(u[m]>=0&&(d=MT({inputs:{x:d},backend:n,attrs:{axis:u[m]-(i.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&n.disposeIntermediateTensorInfo(g);return d}},nA=wT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),sA={kernelName:Ke,backendName:"webgl",kernelFunc:nA},rA={kernelName:Xe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=H().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new uT("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new oT("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},aA=vT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:JS}),iA={kernelName:Ye,backendName:"webgl",kernelFunc:aA},oA=wT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${xh};\n  float a1 = ${yh};\n  float a2 = ${kh};\n  float a3 = ${wh};\n  float a4 = ${vh};\n  float a5 = ${Ih};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),lA={kernelName:qe,backendName:"webgl",kernelFunc:oA},uA=wT({opSnippet:kT+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:QS,dtype:"float32"}),cA={kernelName:Ze,backendName:"webgl",kernelFunc:uA};function hA(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(h(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+r+1),o.splice(l,0,1),ET({inputs:{x:a},backend:s,attrs:{shape:o}})}const dA={kernelName:Je,backendName:"webgl",kernelFunc:hA},pA="return exp(x) - 1.0;",fA=wT({opSnippet:pA,packedOpSnippet:pA,cpuKernelImpl:eN}),gA={kernelName:Qe,backendName:"webgl",kernelFunc:fA};class mA{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function bA(e,t,n){const s=n.texData.get(e.dataId),r=f(e.shape),a=e.shape[e.shape.length-1],i=ET({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new mA("real",o,t),u=new mA("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),p=dT({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const g=ET({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(p),g}const xA={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return bA(s,!1,n)}};class yA{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function kA(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||E(r),"string"===a){const e=C(a,f(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new yA(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const wA={kernelName:tt,backendName:"webgl",kernelFunc:kA};class vA{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const IA={kernelName:nt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new vA(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},CA="return floor(x);",$A=wT({opSnippet:CA,packedOpSnippet:CA,cpuKernelImpl:tN}),SA={kernelName:st,backendName:"webgl",kernelFunc:$A},NA=vT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),TA={kernelName:rt,backendName:"webgl",kernelFunc:NA};class EA{constructor(e){this.variableNames=["A"];const t=uS(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class RA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=uS(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const AA={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(o||i){const e=H().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=FA&&e===DA||(DA=e,FA=document.createElement("canvas").getContext("2d",{willReadFrequently:DA})),FA.canvas.width=l,FA.canvas.height=u,FA.drawImage(r,0,0,l,u),r=FA.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=F$.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const p=H().getBool("WEBGL_PACK")?new RA(h):new EA(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let FA,DA=H().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const _A={kernelName:rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=ki(c),m=ci(r.shape,a.shape,l,h,u,d,!1,g);let b;const x=[],y=null!=i,k=null!=o,w="leakyrelu"===p,v=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=ET({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return x.push(t),t}return e};if(y&&e.push(t(i,c)),k&&e.push(t(o,c)),w){const t=n.makeTensorInfo([],"float32",tr(f,"float32"));e.push(t),x.push(t)}return e};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&H().getBool("WEBGL_EXP_CONV")){const e=p?IT(p,!0):null,t=new hR(m,y,e,k,w),s=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],r=v();b=n.runWebGLProgram(t,r,"float32",s)}else if(H().getBool("WEBGL_CONV_IM2COL"))b=gR({x:r,filter:a,convInfo:m,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});else{const e=p?IT(p,!1):null,t=new uR(m,y,e,k,w),s=v();b=n.runWebGLProgram(t,s,"float32")}else b=fR({x:r,filter:a,convInfo:m,backend:n,bias:i,activation:p,preluActivationWeights:o,leakyreluAlpha:f});const I=ET({inputs:{x:b},backend:n,attrs:{shape:m.outShape}});return x.push(b),x.forEach(e=>n.disposeIntermediateTensorInfo(e)),I}},OA={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=[];let m=c;null==m&&(m=[1,1]),h(xi(l,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);const b=ci(r.shape,a.shape,l,m,u,d,!0),x=H().getBool("WEBGL_PACK_DEPTHWISECONV")&&b.strideWidth<=2&&b.outChannels/b.inChannels===1,y=p?IT(p,x):null,k=[r,a],w=null!=i,v=null!=o,I="leakyrelu"===p;if(w&&k.push(i),v&&k.push(o),I){const e=n.makeTensorInfo([],"float32",tr(f,"float32"));k.push(e),g.push(e)}let C;C=x?new HR(b,w,y,v,I):new GR(b,w,y,v,I);const $=[[b.padInfo.top,b.padInfo.left],[b.strideHeight,b.strideWidth],[b.dilationHeight,b.dilationWidth],[b.inHeight,b.inWidth]],S=n.runWebGLProgram(C,k,"float32",$);return g.forEach(e=>n.disposeIntermediateTensorInfo(e)),S}};class LA{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=CS(n.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const MA={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=f(s.shape),[l,u,c,h]=Oc(s,r),d=ET({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),p=ET({inputs:{x:s},backend:n,attrs:{shape:[f(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=nN(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const g=new LA(i,h,[u,c],s.shape),m=n.runWebGLProgram(g,[p,d],p.dtype),b=ET({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),b}};class zA{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=CS(this.rank),s=function(e){const t=["resRC.x","resRC.y","resRC.z","resRC.w"],n=[];for(let s=0;s<e.length;s++)2===s?n.push("index"):n.push(`${t[s]}`);return n.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function BA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=w(i,r.shape)[0];if(H().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];h(s<=t-1&&s>=0,()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`)}}const u=Jh(r,a,l,o),c=f(a.shape),d=[],p=ET({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),g=ET({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});d.push(p),d.push(g);const m=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(g),t=n.bufferSync(p),s=sN(t,e,m);return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const b=new zA(p.shape,m),x=n.runWebGLProgram(b,[p,g],p.dtype);d.push(x);const y=ET({inputs:{x:x},backend:n,attrs:{shape:u.outputShape}});return d.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}const PA={kernelName:it,backendName:"webgl",kernelFunc:BA},WA=vT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:rN,dtype:"bool"}),UA={kernelName:lt,backendName:"webgl",kernelFunc:WA},VA=vT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:aN}),GA={kernelName:ut,backendName:"webgl",kernelFunc:VA},HA={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return bA(s,!0,n)}},jA=wT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),KA={kernelName:pt,backendName:"webgl",kernelFunc:jA},XA=wT({opSnippet:"return float(isinf(x));",dtype:"bool"}),qA={kernelName:ft,backendName:"webgl",kernelFunc:XA},YA=wT({opSnippet:"return float(isnan(x));",dtype:"bool"}),ZA={kernelName:gt,backendName:"webgl",kernelFunc:YA},JA=vT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:iN,dtype:"bool"}),QA={kernelName:bt,backendName:"webgl",kernelFunc:JA},eF=vT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:oN,dtype:"bool"}),tF={kernelName:xt,backendName:"webgl",kernelFunc:eF},nF={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=lN(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},sF=wT({opSnippet:kT+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:uN}),rF={kernelName:kt,backendName:"webgl",kernelFunc:sF},aF=wT({opSnippet:kT+"\n  return log(1.0 + x);\n"}),iF={kernelName:wt,backendName:"webgl",kernelFunc:aF},oF=vT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),lF={kernelName:vt,backendName:"webgl",kernelFunc:oF},uF=wT({opSnippet:"return float(!(x >= 1.0));"}),cF={kernelName:It,backendName:"webgl",kernelFunc:uF},hF=vT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),dF={kernelName:Ct,backendName:"webgl",kernelFunc:hF};class pF{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class fF{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const gF={kernelName:$t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=H().getBool("WEBGL_PACK_NORMALIZATION")?new fF(r.shape,a,i,o,l):new pF(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class mF{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const bF={kernelName:St,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new mF(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function xF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=vo(u,o),h=null!=c,d=n.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const e=n.texData.get(p.dataId).values,t=new Array(o);for(let n=0;n<t.length;n++)t[n]=r.shape[c[n]];const s=zN(e,r.shape,r.dtype,c,t);p=n.makeTensorInfo(t,r.dtype),n.texData.get(p.dataId).values=s}else p=LT(r,c,n);u=Co(u.length,o)}wo("max",u,o);const[g,m]=yo(p.shape,u);let b,x=g;if(i&&(x=ko(g,l)),d){const e=n.texData.get(p.dataId).values,t=cN(e,f(m),x,r.dtype);b=n.makeTensorInfo(x,r.dtype),n.texData.get(b.dataId).values=t}else b=function(e,t,n,s){const r=f(t),a=ET({inputs:{x:e},attrs:{shape:[f(e.shape)/r,r]},backend:s}),i=DT(a,e.dtype,"max",s),o=ET({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(p,m,x,n);return h&&n.disposeIntermediateTensorInfo(p),b}const yF={kernelName:Nt,backendName:"webgl",kernelFunc:xF},kF=vT({opSnippet:iT+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+lT+"\n  return result;\n",cpuKernelImpl:hN}),wF={kernelName:Tt,backendName:"webgl",kernelFunc:kF},vF={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;oS(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(xi(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=li(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))return cT({inputs:{x:r},backend:n});const c=new kE(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},IF={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=ui(r.shape,a,i,[1,1,1],o,u,l),h=new wE(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class CF{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $F{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const SF={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=ui(i.shape,o,l,[1,1,1],u,c),d=new wE(h,"max",!0),p=n.runWebGLProgram(d,[i],i.dtype),f=new $F(h),g=n.runWebGLProgram(f,[r,p],i.dtype);return n.disposeIntermediateTensorInfo(p),g}},NF={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;oS([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=li(o.shape,l,u,1,c,h),p=new kE(d,"max",!0),f=n.runWebGLProgram(p,[o],o.dtype),g=new CF(d),m=n.runWebGLProgram(g,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),m}},TF={kernelName:Dt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;h(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];h(xi(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=li(s.shape,r,a,u,i),[d,p]=function(e,t,n,s){let r=new kE(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new kE(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[d,p]}},EF={kernelName:_t,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=w(a,s.shape);let u=l;const c=vo(u,o),h=null!=c,d=i.shouldExecuteOnCPU([s]),p=[];let g=s;if(h){if(d){const e=i.texData.get(g.dataId).values,t=new Array(o);for(let r=0;r<t.length;r++)t[r]=s.shape[c[r]];const n=zN(e,s.shape,s.dtype,c,t);g=i.makeTensorInfo(t,s.dtype),i.texData.get(g.dataId).values=n}else g=LT(s,c,i);p.push(g),u=Co(u.length,o)}wo("sum",u,o);const[m,b]=yo(g.shape,u);let x=m;r&&(x=ko(m,l));const y=function(e,t,n,s){const r=f(t),a=ET({inputs:{x:e},attrs:{shape:[f(e.shape)/r,r]},backend:s}),i=DT(a,"float32","mean",s),o=ET({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(g,b,x,i);for(const f of p)i.disposeIntermediateTensorInfo(f);return y}},RF={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=vo(u,o);let h=r;null!=c&&(h=BT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Co(u.length,r.shape.length)),wo("min",u,o);const[d,p]=yo(h.shape,u),g=ET({inputs:{x:h},backend:n,attrs:{shape:[-1,f(p)]}}),m=DT(g,g.dtype,"min",n);let b;return b=ET(i?{inputs:{x:m},backend:n,attrs:{shape:ko(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),b}},AF=vT({opSnippet:iT+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+lT+"\n  return result;\n",cpuKernelImpl:dN}),FF={kernelName:Lt,backendName:"webgl",kernelFunc:AF};class DF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=CS(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class _F{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=CS(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=WN("rc",s),l=WN("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const OF={kernelName:Mt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=H().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _F(s.shape,r,a):new DF(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},LF=vT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+lT+"\n  return result;\n"}),MF={kernelName:zt,backendName:"webgl",kernelFunc:LF};class zF{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const BF=vT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),PF={kernelName:He,backendName:"webgl",kernelFunc:BF},WF="return a - b;",UF=vT({opSnippet:WF,packedOpSnippet:WF,supportsComplex:!0,cpuKernelImpl:ON}),VF={kernelName:Gn,backendName:"webgl",kernelFunc:UF};function GF(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=w([a],r.shape),o=xF({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=ko(o.shape,i),u=ET({inputs:{x:o},backend:n,attrs:{shape:l}}),c=UF({inputs:{a:r,b:u},backend:n}),h=uA({inputs:{x:c},backend:n}),d=MT({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),p=ET({inputs:{x:d},backend:n,attrs:{shape:l}}),f=BF({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const HF={kernelName:An,backendName:"webgl",kernelFunc:GF},jF={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:GF({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new zF(u,c,a),d=[[i]],p=n.runWebGLProgram(h,[l],"int32",d);return o||n.disposeIntermediateTensorInfo(l),p}},KF=qN+"\n  return -x;\n",XF={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=fN(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=H().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new eT(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new XN(s.shape,KF),n.runWebGLProgram(r,[s],s.dtype)}},qF=oc,YF={kernelName:Vt,backendName:"webgl",kernelFunc:function(e){is();const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=qF(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},ZF=lc,JF={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){is();const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=ZF(c,h,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},QF=uc,eD={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){is();const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),d=i,p=o,f=l,g=u,{selectedIndices:m,selectedScores:b}=QF(c,h,d,p,f,g);return[n.makeTensorInfo([m.length],"int32",new Int32Array(m)),n.makeTensorInfo([b.length],"float32",new Float32Array(b))]}};class tD{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const nD={kernelName:Kt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s,u=f(r.shape),c=new tD(u,i,o,l),h=ET({inputs:{x:r},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const p=ET({inputs:{x:d},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(d),p}};function sD(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=VE({inputs:{input:s},backend:n}),t=sD({inputs:{x:e},backend:n}),r=rR({inputs:{input:s},backend:n}),a=sD({inputs:{x:r},backend:n}),i=dT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return kA({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const rD={kernelName:es,backendName:"webgl",kernelFunc:sD},aD={kernelName:jt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=VE({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=rR({inputs:{input:r},backend:s}),i=sD({inputs:{x:a},backend:s}),o=dT({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return kA({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},iD={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return hA({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach(e=>{d(a,e.shape,"All tensors passed to stack must have matching shapes"),h(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=[],l=oR({inputs:t.map(e=>{const t=hA({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t}),backend:n,attrs:{axis:r}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),l}};class oD{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=CS(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class lD{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const s=e.length,r=CS(s),a=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=WN("rc",s),l=WN("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let f=0,g=1===s?2:4;f<g;f++)p+=`\n        ${h[f]}\n        if (${d}) {\n          result[${f}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${f}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const uD=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===f(r.shape))return kA({backend:n,attrs:{shape:a.map((e,t)=>e[0]+r.shape[t]+e[1]),value:i,dtype:r.dtype}});const o=H().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lD(r.shape,a,i):new oD(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},cD={kernelName:qt,backendName:"webgl",kernelFunc:uD},hD=vT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+lT+"\n  return result;\n"}),dD={kernelName:Yt,backendName:"webgl",kernelFunc:hD},pD={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=w(a,r.shape);let c=u;const h=vo(c,o);let d,p=r;if(null!=h&&(p=BT({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Co(c.length,o),l.push(p)),wo("prod",c,o),n.shouldExecuteOnCPU([p])){const e=n.texData.get(p.dataId).values,{outVals:t,outShape:s,outDtype:r}=mN(p.shape,p.dtype,e,c);d=n.makeTensorInfo(s,r,t)}else{const[e,t]=yo(p.shape,c),s=f(t),a=ET({inputs:{x:p},backend:n,attrs:{shape:[-1,s]}}),i=DT(a,_r(r.dtype),"prod",n);d=ET({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(d);const e=ko(d.shape,u);d=ET({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),d}},fD={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map(e=>n.readSync(e.dataId)),u=r.map(e=>e.shape),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[d,p,f]=bN(l,u,c,a.shape,a.dtype,h,i.shape,o),g=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),m=n.makeTensorInfo(f,a.dtype,p);return g.concat([m])}},gD={kernelName:en,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=xN(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}},mD={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),d=o.map(e=>n.readSync(e.dataId)),p=o.map(e=>e.shape),[f,g]=yN(u,r.shape,c,a.shape,a.dtype,h,i.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,g)}},bD=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=kN(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},xD={kernelName:nn,backendName:"webgl",kernelFunc:bD},yD=wT({opSnippet:"return 1.0 / x;"}),kD={kernelName:rn,backendName:"webgl",kernelFunc:yD},wD=wT({opSnippet:qN+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),vD={kernelName:an,backendName:"webgl",kernelFunc:wD},ID=wT({opSnippet:qN+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),CD={kernelName:dn,backendName:"webgl",kernelFunc:ID};class $D{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class SD{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const ND={kernelName:cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=H().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new SD(r.shape,l,u,a,i):new $D(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class TD{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const ED={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new TD(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class RD{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class AD{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const FD={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=H().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new AD(r.shape,l,u,a,i):new RD(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class DD{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const _D={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new DD(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class OD{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),r=CS(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class LD{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=WN("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=CS(n);var o;function l(n){const s=e.map((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=s.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const MD={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=w(a,r.shape);if(0===i)return cT({inputs:{x:r},backend:n});const l=H().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new LD(r.shape,o):new OD(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class zD{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const BD={kernelName:ns,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new zD(s.shape,a),[u,c]=ch(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},PD=wT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),WD={kernelName:fn,backendName:"webgl",kernelFunc:PD},UD=wT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:wN}),VD={kernelName:gn,backendName:"webgl",kernelFunc:UD};class GD{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=CS(r.length),u=CS(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===s?d="i":2===s&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";o&&(f="coords[0], coords[1]");const g=`getDefaultValue(${f})`,m=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${h});\n              flattenedIndex += index * ${m};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(${g}, sum, float(found)));\n        }\n      `}}class HD{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const l=CS(r.length),u=CS(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===s?d="i":2===s&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";o&&(f="coords[0], coords[1]");const g=`getDefaultValue(${f})`,m=t>1?"strides[j]":"strides",b=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${h});\n              flattenedIndex += index.xz * ${m};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${b};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${p};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${g}, sum, found));\n        }\n      `}}const jD={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=_u(0,r,i),d=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const p=ET({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=ET({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=H().getBool("WEBGL_PACK")?new HD(l,o,p.shape.length,f.shape.length,c,d):new GD(l,o,p.shape.length,f.shape.length,c,d);const b=n.runWebGLProgram(m,[f,p,g],f.dtype),x=ET({inputs:{x:b},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),x}};class KD{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===H().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const XD={kernelName:xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new KD(r.shape[0],r.shape[1],a.shape[1],i),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",l)}};class qD{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=CS(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const YD={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new qD(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Dr(r.dtype,a.dtype))}},ZD=wT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${bh};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),JD={kernelName:kn,backendName:"webgl",kernelFunc:ZD},QD=wT({opSnippet:kT+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:IN}),e_={kernelName:$n,backendName:"webgl",kernelFunc:QD},t_=wT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),n_={kernelName:Cn,backendName:"webgl",kernelFunc:t_},s_=wT({opSnippet:kT+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${lT}\n  return result;\n`}),r_={kernelName:vn,backendName:"webgl",kernelFunc:s_},a_=wT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),i_={kernelName:In,backendName:"webgl",kernelFunc:a_},o_=wT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),l_={kernelName:Sn,backendName:"webgl",kernelFunc:o_},u_={kernelName:En,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;h(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const o=a.reduce((e,t)=>e*t),l=[[0,0]];l.push(...i);for(let h=1+a.length;h<r.shape.length;++h)l.push([0,0]);const u=[],c=uD({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),d=hh(c.shape,a,o,!1),p=dh(d.length,a.length,!1),f=ph(c.shape,a,o,!1),g=ET({inputs:{x:c},backend:n,attrs:{shape:d}}),m=BT({inputs:{x:g},backend:n,attrs:{perm:p}}),b=ET({inputs:{x:m},backend:n,attrs:{shape:f}});return u.push(c),u.push(g),u.push(m),u.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}},c_={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,d,p,f,g]=SN(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},h_={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=NN(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},d_={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=TN(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},p_={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=TN(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},f_={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=_u(0,r,o),p=!1;if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=ar(n.readSync(i.dataId)[0]),f=vN(e,t,o,d,c,u,l,h,s,p);return n.makeTensorInfo(o,f.dtype,f.values)}const f=new GD(u,l,r.shape.length,a.shape.length,h,[d,1],p),g=n.runWebGLProgram(f,[a,r,i],a.dtype),m=ET({inputs:{x:g},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(g),m}},g_={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=w(i,r.shape)[0],l=Bh(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map(e=>{const t=[...h];t[o]=e;const s=OE({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s})}},m_="return sqrt(x);",b_=wT({opSnippet:m_,packedOpSnippet:m_,cpuKernelImpl:EN}),x_={kernelName:Nn,backendName:"webgl",kernelFunc:b_},y_={kernelName:zn,backendName:"webgl",kernelFunc:wT({opSnippet:"return x * x;"})},k_="return (a - b) * (a - b);",w_=vT({opSnippet:k_,packedOpSnippet:k_}),v_={kernelName:Mn,backendName:"webgl",kernelFunc:w_},I_={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=ed(n.readSync(r.dataId)),i=RN(a,"string",s);return n.makeTensorInfo(r.shape,"string",i)}},C_={kernelName:ts,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=qN+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new XN(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class $_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=CS(n.length),a=CS(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const S_={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=s,{finalShapeSparse:f,finalShape:g,isIdentity:m,sliceDim0:b,isSimpleSlice:x,begin:y,end:k,strides:w}=qc(r.shape,a,i,o,l,u,c,d,p);let v;if(m)v=ET({inputs:{x:r},backend:n,attrs:{shape:g}});else if(b||x){h(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const e=Mc(y,k,w),t=OE({inputs:{x:r},backend:n,attrs:{begin:y,size:e}});v=ET({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=Ua(r.shape,r.dtype,e),s=AN(f,t,w,y);v=n.makeTensorInfo(g,r.dtype,s.values)}else{const e=new $_(y,w,f);v=n.runWebGLProgram(e,[r],r.dtype)}const I=ET({inputs:{x:v},backend:n,attrs:{shape:g}});return n.disposeIntermediateTensorInfo(v),I}},N_={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,g]=FN(d,p,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",g)]}},T_={kernelName:Un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=DN(o,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},E_={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=_N(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},R_=wT({opSnippet:"return tan(x);"}),A_={kernelName:Hn,backendName:"webgl",kernelFunc:R_},F_=wT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),D_={kernelName:jn,backendName:"webgl",kernelFunc:F_},__={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:r,indices:a,updates:i}=t,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=_u(0,a,r.shape),d=[h/u,u];if(0===h)return n.makeTensorInfo(r.shape,a.dtype);const p=ET({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=ET({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),g=ET({inputs:{x:r},backend:n,attrs:{shape:d}}),m=new GD(l,o,p.shape.length,f.shape.length,c,d,!1,!0),b=n.runWebGLProgram(m,[f,p,g],g.dtype),x=ET({inputs:{x:b},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(b),x}};class O_{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const s=CS(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<e.length;r++)s.push(`imod(${n[r]}, ${e[r]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function L_(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map(e=>ar(e)):e,s=Ua(r.shape,r.dtype,t),i=LN(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new O_(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const M_={kernelName:Kn,backendName:"webgl",kernelFunc:L_};class z_{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class B_{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function P_(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function W_(e){let t=1;for(;t<e;)t*=2;return t}const U_={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=H().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=H().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=MN(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,kA({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(r):r,g=f(u)/c,m=ET({inputs:{x:p},attrs:{shape:[g,c]},backend:n});d&&P_(n,p);const b=W_(a),x=W_(c);let y=null;const k=()=>null===y?[m,m]:[m,y],w=(e,t,s)=>{const r=k(),a=new z_(s),i=[[c],[null===y?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=y;y=n.runWebGLProgram(a,r,"int32",i),P_(n,o)};for(let f=1;f<b;f*=2){const e=2*f;for(let t=f;t>=1;t/=2)w(e,t,[g,x])}for(let f=x;f>b;f/=2){const e=k(),t=new B_([g,f/2]),s=[[c],[null===y?1:0],[b]],r=y;y=n.runWebGLProgram(t,e,"int32",s),P_(n,r);const a=b/2,i=2*a;for(let n=a;n>=1;n/=2)w(i,n,y.shape)}let v=y;y=OE({inputs:{x:y},backend:n,attrs:{begin:0,size:[g,a]}}),P_(n,v);let I=BA({inputs:{x:m,indices:y},backend:n,attrs:{axis:1,batchDims:1}});P_(n,m);const C=u.slice(0,-1);C.push(a),v=y,y=ET({inputs:{x:y},attrs:{shape:C},backend:n}),P_(n,v);const $=I;return I=ET({inputs:{x:I},attrs:{shape:C},backend:n}),P_(n,$),[I,y]}};class V_{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const G_={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],m=new V_(h,d,i,o,l,[c,f,g,p]);return n.runWebGLProgram(m,[r,a],"float32")}},H_={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;oS(a,"unique");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=BN(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},j_={kernelName:Jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let g=0;g<o;g++)g!==a&&(u[c++]=i.shape[g]);const h=[],d=new Array(o).fill(0),p=i.shape.slice();p[a]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[a]=g;const e=OE({inputs:{x:i},backend:n,attrs:{begin:d,size:p}}),t=ET({inputs:{x:e},backend:n,attrs:{shape:u}});f[g]=t,h.push(e)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}};class K_{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const X_=[UT,GT,jT,XT,ZT,eE,tE,nE,lE,uE,hE,pE,gE,bE,yE,vE,IE,SE,NE,TE,AE,ME,zE,BE,PE,HE,XE,ZE,pT,eR,lR,mR,wR,IR,CR,$R,SR,TR,RR,FR,BR,PR,WR,VR,jR,qR,YR,JR,eA,tA,sA,rA,iA,lA,cA,dA,gA,xA,wA,IA,SA,TA,AA,_A,OA,MA,PA,UA,GA,hT,HA,aR,KA,qA,ZA,mT,QA,tF,nF,rF,iF,lF,cF,dF,gF,bF,yF,wF,vF,IF,SF,NF,TF,EF,RF,FF,OF,MF,jF,TT,XF,YF,JF,eD,UE,nD,aD,iD,cD,dD,yT,pD,fD,gD,mD,xD,GE,PF,kD,vD,CD,RT,ND,ED,FD,_D,MD,BD,WD,VD,jD,XD,YD,JD,e_,n_,r_,i_,LE,HF,l_,u_,c_,h_,d_,p_,f_,g_,x_,y_,v_,I_,C_,S_,N_,T_,E_,VF,zT,A_,D_,__,M_,U_,G_,PT,H_,j_,{kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=vo([u],o);let h=r;null!=c&&(h=BT({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Co(1,o)[0]);const d=Zh(h.shape,u,i),p=f([h.shape[u]]),g=ET({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});l.push(g);const m=_r(r.dtype),b=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Yh(o,a),c=new K_({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const d=bD({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=L_({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});return l.push(d),l.push(p),b(h,t,p,r,a)},x=ET({inputs:{x:b(g,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:d}});let y=x;if(null!=c){l.push(x);const e=Io(c);y=BT({inputs:{x:y},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},rD];for(const Z_ of X_)ds(Z_);export{H as e,ca as s};
