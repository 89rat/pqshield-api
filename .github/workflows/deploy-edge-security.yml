name: Deploy SNN/ANN Edge Security System

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - 'src/**'
      - 'package.json'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Security and quality checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level high
        
      - name: Run ESLint security rules
        run: pnpm lint
        
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Test suite execution
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        run: pnpm test:run
        
      - name: Run integration tests
        run: pnpm test:integration
        
      - name: Generate coverage report
        run: pnpm test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: snn-ann-edge-security
          
      - name: Performance benchmarks
        run: pnpm test:performance
        
      - name: Neural network model validation
        run: pnpm test:models

  # Build and validate
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      build-hash: ${{ steps.build-info.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          
      - name: Validate build output
        run: |
          ls -la dist/
          du -sh dist/
          echo "Build size: $(du -sh dist/ | cut -f1)"
          
      - name: Generate build info
        id: build-info
        run: |
          BUILD_HASH=$(sha256sum dist/assets/*.js | sha256sum | cut -d' ' -f1)
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "Build hash: $BUILD_HASH"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  # Deploy Cloudflare Workers
  deploy-cloudflare:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Wrangler CLI
        run: npm install -g wrangler
        
      - name: Install dependencies
        run: |
          cd infrastructure/cloudflare
          npm ci
          
      - name: Run Cloudflare Worker tests
        run: |
          cd infrastructure/cloudflare
          npm test
          
      - name: Deploy SNN/ANN Edge API Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          cd infrastructure/cloudflare
          wrangler deploy workers/snn-ann-edge-api.ts --env ${{ github.event.inputs.environment || 'staging' }}
          
      - name: Deploy Analytics Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd infrastructure/cloudflare
          wrangler deploy workers/analytics.ts --env ${{ github.event.inputs.environment || 'staging' }}
          
      - name: Run D1 database migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          cd infrastructure/cloudflare
          wrangler d1 migrations apply snn-ann-security-db --env ${{ github.event.inputs.environment || 'staging' }}
          
      - name: Update KV cache with neural models
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # Upload latest SNN/ANN models to KV storage
          wrangler kv:key put "model:snn:latest" --path="models/snn-latest.json" --namespace-id=${{ secrets.SNN_MODEL_KV_ID }}
          wrangler kv:key put "model:ann:latest" --path="models/ann-latest.json" --namespace-id=${{ secrets.ANN_MODEL_KV_ID }}
          
      - name: Purge Cloudflare cache
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

  # Deploy Firebase Functions
  deploy-firebase:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Install Firebase Functions dependencies
        run: |
          cd infrastructure/firebase/functions
          npm ci
          
      - name: Build Firebase Functions
        run: |
          cd infrastructure/firebase/functions
          npm run build
          
      - name: Deploy Firebase Functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          cd infrastructure/firebase
          firebase use $FIREBASE_PROJECT
          firebase deploy --only functions --token $FIREBASE_TOKEN
          
      - name: Deploy Firestore security rules
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          cd infrastructure/firebase
          firebase deploy --only firestore:rules --token $FIREBASE_TOKEN
          
      - name: Deploy Firebase Storage rules
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          cd infrastructure/firebase
          firebase deploy --only storage --token $FIREBASE_TOKEN

  # Deploy React Dashboard
  deploy-dashboard:
    runs-on: ubuntu-latest
    needs: [build, deploy-cloudflare]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          
      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npx wrangler pages deploy dist/ \
            --project-name=snn-ann-security-dashboard \
            --env=${{ github.event.inputs.environment || 'staging' }}

  # Health checks and validation
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare, deploy-firebase, deploy-dashboard]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Wait for deployment propagation
        run: sleep 30
        
      - name: Health check - Edge API
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.snn-ann-security.app/health)
          if [ $RESPONSE -ne 200 ]; then
            echo "Edge API health check failed with status $RESPONSE"
            exit 1
          fi
          echo "Edge API health check passed"
          
      - name: Health check - Dashboard
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://dashboard.snn-ann-security.app)
          if [ $RESPONSE -ne 200 ]; then
            echo "Dashboard health check failed with status $RESPONSE"
            exit 1
          fi
          echo "Dashboard health check passed"
          
      - name: Performance test - Edge latency
        run: |
          LATENCY=$(curl -s -w "%{time_total}" -o /dev/null https://api.snn-ann-security.app/health)
          echo "Edge API latency: ${LATENCY}s"
          if (( $(echo "$LATENCY > 0.1" | bc -l) )); then
            echo "Warning: Edge API latency is higher than expected"
          fi
          
      - name: Neural network model validation
        run: |
          # Test SNN/ANN processing endpoint
          curl -X POST https://api.snn-ann-security.app/api/detect-threat \
            -H "Content-Type: application/json" \
            -d '{"deviceId":"test","packetData":"test","timestamp":1234567890}' \
            -w "Response time: %{time_total}s\n"

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    needs: [deploy-cloudflare, deploy-firebase, deploy-dashboard, health-check]
    steps:
      - name: Rollback Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "Rolling back Cloudflare Workers to previous version"
          # Implementation would rollback to previous deployment
          
      - name: Rollback Firebase Functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "Rolling back Firebase Functions to previous version"
          # Implementation would rollback to previous deployment
          
      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 SNN/ANN Edge Security deployment failed and was rolled back"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notification and reporting
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-cloudflare, deploy-firebase, deploy-dashboard, health-check]
    if: always()
    steps:
      - name: Deployment success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ SNN/ANN Edge Security deployed successfully to ${{ github.event.inputs.environment || 'staging' }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Deployment failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ SNN/ANN Edge Security deployment failed"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Generate deployment report
        if: always()
        run: |
          echo "## Deployment Report" > deployment-report.md
          echo "- **Environment**: ${{ github.event.inputs.environment || 'staging' }}" >> deployment-report.md
          echo "- **Build Hash**: ${{ needs.build.outputs.build-hash }}" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Status**: ${{ job.status }}" >> deployment-report.md
          echo "- **Timestamp**: $(date -u)" >> deployment-report.md
          
      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md
